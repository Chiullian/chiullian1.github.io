<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法技（寄）巧</title>
      <link href="/posts/52109.html"/>
      <url>/posts/52109.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本解绑加速">基本解绑加速</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>) -&gt; ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="吸吸吸吸吸吸吸吸吸氧">吸吸吸吸吸吸吸吸吸氧</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once<span class="comment">//只编译一次 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC diagnostic <span class="keyword">error</span> <span class="string">&quot;-std=c++11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3,<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target(<span class="string">&quot;avx&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fgcse&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fgcse-lm&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fipa-sra&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-pre&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-vrp&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fpeephole2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ffast-math&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fsched-spec&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-labels&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fdevirtualize&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcaller-saves&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcrossjumping&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fthread-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-funroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fwhole-program&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-freorder-blocks&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fschedule-insns&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-tail-merge&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fschedule-insns2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fstrict-aliasing&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fstrict-overflow&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-falign-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcse-skip-blocks&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fcse-follow-jumps&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fsched-interblock&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fpartial-inlining&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;no-stack-protector&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-freorder-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-findirect-inlining&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fhoist-adjacent-loads&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-frerun-cse-after-loop&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-small-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-finline-small-functions&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-ftree-switch-conversion&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-foptimize-sibling-calls&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fexpensive-optimizations&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-funsafe-loop-optimizations&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;inline-functions-called-once&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;-fdelete-null-pointer-checks&quot;</span>)</span></span><br></pre></td></tr></table></figure><h2 id="一般的快读">一般的快读</h2><blockquote><p>采取用getchar/putchar 来加速读入， 这个应该都知道</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    T f = <span class="number">1</span>; x = <span class="number">0</span>; <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... other&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; x, other&amp;... y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(y...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>); </span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x, <span class="type">char</span> ch)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">print</span>(x), <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当遇到数据流大的题目，如果你的评测机不够快，还是会超时， 研究了巨佬的代码教程发现了真正的快读：</p><p>这个函数的原理就是先把数据流中的一整段都存下来，然后从这个数组里读取，直到数组读空了再重新从数据流中读取，由于是整段整段读取，所以自然比getchar()要快的多。</p><p>[转自： <a href="https://www.luogu.com.cn/blog/cicos/fread-more">https://www.luogu.com.cn/blog/cicos/fread-more</a>]:</p></blockquote><h2 id="用fread加速读入">用fread加速读入</h2><blockquote><p>就是优化 getchar()， 比传统快读快的好几倍</p><blockquote><p>注:用了这个读入优化。getchar，scanf都不能用了</p></blockquote></blockquote><p>模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> BUFSIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> ibuf[BUFSIZE], *is = ibuf, *it = ibuf;</span><br><span class="line">    <span class="type">char</span> obuf[BUFSIZE], *os = obuf, *ot = obuf + BUFSIZE;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">Getchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is == it) it = (is = ibuf) + <span class="built_in">fread</span>(ibuf, <span class="number">1</span>, BUFSIZE, stdin);</span><br><span class="line">        <span class="keyword">return</span> (is == it) ? EOF : *is++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, os - obuf, stdout); os = obuf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Putchar</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        *os++ = ch; <span class="keyword">if</span>(os == ot) <span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>; <span class="type">bool</span> neg = <span class="literal">false</span>; <span class="type">char</span> ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(!(<span class="built_in">isdigit</span>(ch) <span class="keyword">or</span> ch == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">and</span> ch != EOF) ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) neg = <span class="literal">true</span>, ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) res = res * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>), ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">return</span> neg ? -res : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">        T f = <span class="number">1</span>; x = <span class="number">0</span>; <span class="type">char</span> ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(!(<span class="built_in">isdigit</span>(ch) <span class="keyword">or</span> ch == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">and</span> ch != EOF) ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>, ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        x *= f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... other&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x, other &amp;... y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T res)</span>  </span>&#123;</span><br><span class="line">        <span class="type">char</span> q[<span class="number">10</span>]; <span class="type">int</span> top;</span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (res) q[top ++] = res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>, res /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (top --) <span class="built_in">Putchar</span>(q[top]) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x, <span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(x), <span class="built_in">Putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// double </span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">getreal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>, base; <span class="type">bool</span> neg = <span class="literal">false</span>; <span class="type">char</span> ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="built_in">isdigit</span>(ch) <span class="keyword">or</span> ch == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">and</span> ch != EOF) ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) neg = <span class="literal">true</span>, ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) res = res * <span class="number">10.0</span> + (ch - <span class="string">&#x27;0&#x27;</span>), ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            base = <span class="number">0.1</span>;</span><br><span class="line">            ch = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) res += (ch - <span class="string">&#x27;0&#x27;</span>) * base, base *= <span class="number">0.1</span>, ch = <span class="built_in">Getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> neg ? -res : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">putreal</span><span class="params">(<span class="type">double</span> res, <span class="type">int</span> acc = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> who; <span class="type">double</span> tmp, base = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">        tmp = res - (<span class="type">int</span>)(res);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= acc + <span class="number">1</span>; ++ i)</span><br><span class="line">            base /= <span class="number">10.0</span>, who = tmp / base, tmp -= who * base;</span><br><span class="line">        <span class="keyword">if</span>(who &gt;= <span class="number">5</span>) res += base * <span class="number">10.0</span>;</span><br><span class="line">        base = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(res / base &gt;= <span class="number">10.0</span>) base *= <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(base &gt;= <span class="number">1.0</span>) who = res / base, <span class="built_in">Putchar</span>(who + <span class="string">&#x27;0&#x27;</span>), res -= who * base, base /= <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(acc) &#123;</span><br><span class="line">            <span class="built_in">Putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            base = <span class="number">0.1</span>;</span><br><span class="line">            <span class="keyword">while</span>(acc--) who = res / base, <span class="built_in">Putchar</span>(who + <span class="string">&#x27;0&#x27;</span>), res -= who * base, base /= <span class="number">10.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br></pre></td></tr></table></figure><h2 id="更新一下整活竞赛模板">更新一下整活竞赛模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(3,&quot;Ofast&quot;,&quot;inline&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;; err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;; using i64 = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T&gt; void print(vector&lt;T&gt; &amp;v, bool beg = 0, bool wSize = false) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (wSize) cout &lt;&lt; v.size() &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (!beg) for(int i = 0; i &lt; v.size(); i ++) cout &lt;&lt; v[i] &lt;&lt; &quot;</span> <span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    else for(int i = 1; i &lt; v.size(); i ++) cout &lt;&lt; v[i] &lt;&lt; &quot;</span> <span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cout &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct chiullian &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    inline bool O(int x = true) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return  x &gt; 0.0 ? (- 0xffffffff) : (- 0xffffffff);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; o;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    </span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">#ifndef ONLINE_JUDGE</span></span></span><br><span class="line"><span class="string"><span class="meta">    clock_t start = clock();</span></span></span><br><span class="line"><span class="string"><span class="meta">#endif</span></span></span><br><span class="line"><span class="string"><span class="meta">    cin.tie(nullptr), cout.tie(nullptr) -&gt; ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">    // cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span></span><br><span class="line"><span class="string"><span class="meta">    int T_T = o.O();</span></span></span><br><span class="line"><span class="string"><span class="meta">    // cin &gt;&gt; T_T;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 1; i &lt;= T_T; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">#ifndef ONLINE_JUDGE</span></span></span><br><span class="line"><span class="string"><span class="meta">    clock_t end = clock();</span></span></span><br><span class="line"><span class="string"><span class="meta">    cout &lt;&lt; &quot;</span>\n\nRunning Time : <span class="string">&quot; &lt;&lt; (double) (end - start) / CLOCKS_PER_SEC * 1000 &lt;&lt; &quot;</span>ms<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">#endif</span></span></span><br><span class="line"><span class="string"><span class="meta">    return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 奇淫技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dp专训</title>
      <link href="/posts/100DAW.html"/>
      <url>/posts/100DAW.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>施工中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客寒假训练营3</title>
      <link href="/posts/684WA4.html"/>
      <url>/posts/684WA4.html</url>
      
        <content type="html"><![CDATA[<h2 id="A">A</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/A">https://ac.nowcoder.com/acm/contest/46811/A</a><br>来源：牛客网</p><p>小红拿到了一个数组，她每次操作可以选择一个偶数除以2，可以操作任意次（也可以不操作）。求最终数组所有元素之和的最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">0</span> || x &amp; <span class="number">1</span>) ans += x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!(x &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                x /= <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    ans += x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B构造">B构造</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/B">https://ac.nowcoder.com/acm/contest/46811/B</a><br>来源：牛客网</p><p>小红希望用<strong>恰好</strong>nnn块矩形积木来搭建正方形，其中小红可以自由选择每块积木的大小，但必须是$1*k$的长和宽。其中$1\leq k \leq \lceil \frac{n}{2} \rceil$。小红想知道，自己最大可以搭建多大的正方形？请你帮小红计算正方形的边长。如果无法用恰好nnn块矩形拼成正方形，请输出-1。</p><blockquote><p>有空在挂文字</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl);</span><br><span class="line">    <span class="type">int</span> m = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; (n + m * <span class="number">2</span>) / <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C">C</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/C">https://ac.nowcoder.com/acm/contest/46811/C</a><br>来源：牛客网</p><p>小红希望你构造一个长度为n的排列，满足对于每个$a_i$，有$2 \le |a_i-i|\le 3$。你能帮帮她吗？</p><p>注：数组下标从1到n。</p><p>排列是指长度为n的数组，1到n每个正整数恰好出现一次。</p><blockquote><p>i 往i-2, i - 3, i + 2, i + 3连边, 做二分图最大匹配即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> match[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> v : e[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (st[v]) <span class="keyword">continue</span>;</span><br><span class="line">st[v] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!match[v] || <span class="built_in">find</span>(match[v])) &#123;</span><br><span class="line">match[v] = u;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">st.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">3</span> &lt;= n) e[i].<span class="built_in">emplace_back</span>(i + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">3</span> &gt;= <span class="number">1</span>) e[i].<span class="built_in">emplace_back</span>(i - <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">2</span> &lt;= n) e[i].<span class="built_in">emplace_back</span>(i + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">2</span> &gt;= <span class="number">1</span>) e[i].<span class="built_in">emplace_back</span>(i - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="built_in">fill</span>(<span class="built_in">all</span>(st), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(i)) cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">3</span> || cnt != n) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">1</span>) cout &lt;&lt; match[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(9);</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D">D</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/E">https://ac.nowcoder.com/acm/contest/46811/E</a><br>来源：牛客网</p><p>小红在平面直角坐标系上选择了两个点$A$和$B$（保证两点不重合），它们的坐标分别为$(x_A,y_A)$和$(x_B,y_B)$。小红希望你选择一个整点C，满足三角形ABC为以AB为斜边的等腰直角三角形。你能帮帮她吗？<br>整点的定义：横坐标和纵坐标均为整数。</p><blockquote><p>向量AB(x, y)过点B的垂直向量BD为(-y, x)</p><p>想加得向量AD,向量AD的中点就是C点坐标</p><p>,也可以使用计算几何,求直线与圆的交点,直线与直线的交点等,顺便找了个好用的计算几何板子(注意精度!!!),</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> inf = <span class="number">1e20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxp = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断正负</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sgn</span> <span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">sqr</span> <span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//精度高时用long long!</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    <span class="built_in">Point</span> () &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span> (<span class="type">double</span> _x, <span class="type">double</span> _y) &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf%.2lf\n&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (Point b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(y - b.y) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Point b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>(x - b.x) == <span class="number">0</span> ? <span class="built_in">sgn</span>(y - b.y) &lt; <span class="number">0</span> : x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="type">const</span> Point &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span> (x + b.x, y + b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="type">const</span> Point &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span> (x - b.x, y - b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="type">const</span> <span class="type">double</span> &amp;k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x * k, y * k);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="type">const</span> <span class="type">double</span> &amp;k) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(x / k, y / k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//叉积</span></span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span> ^ (<span class="type">const</span> Point &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.y - y * b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点乘</span></span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span> * (<span class="type">const</span> Point &amp;b) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x * b.x + y * b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//距离原点长度</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">len</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//距离原点长度的平方</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">len2</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两点距离</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">distance</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hypot</span>(x - p.x, y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pa和pb所成的夹角</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">rad</span> <span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">        Point p = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">atan2</span>(<span class="built_in">fabs</span>((a - p) ^ (b - p)), (a - p) * (b - p)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化为长度为r的向量</span></span><br><span class="line">    <span class="function">Point <span class="title">trunc</span> <span class="params">(<span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> l = <span class="built_in">len</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">sgn</span>(l)) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        r /= l;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span> (x * r, y * r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逆时针旋转90°</span></span><br><span class="line">    <span class="function">Point <span class="title">rotleft</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺时针旋转90°</span></span><br><span class="line">    <span class="function">Point <span class="title">rotright</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(y, -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绕着p点逆时针旋转angle</span></span><br><span class="line">    <span class="function">Point <span class="title">rotate</span> <span class="params">(Point p, <span class="type">double</span> angle)</span> </span>&#123;</span><br><span class="line">        Point v = (*<span class="keyword">this</span>) - p;</span><br><span class="line">        <span class="type">double</span> c = <span class="built_in">cos</span>(angle), s = <span class="built_in">sin</span>(angle);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span> (p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eq</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(A - B) &lt;= eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (A &gt; B) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//象限排序</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">quadrant</span> <span class="params">(Point a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x &gt; <span class="number">0</span> &amp;&amp; a.y &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.x &lt;= <span class="number">0</span> &amp;&amp; a.y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.x &lt; <span class="number">0</span> &amp;&amp; a.y &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//极角排序</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Pcmp</span> <span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> aa = a ^ b;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">quadrant</span>(a) == <span class="built_in">quadrant</span>(b)) <span class="keyword">return</span> aa &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quadrant</span>(a) &lt; <span class="built_in">quadrant</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    Point s, e;</span><br><span class="line">    <span class="built_in">Line</span> () &#123;&#125;</span><br><span class="line">    <span class="built_in">Line</span> (Point _s, Point _e) &#123;</span><br><span class="line">        s = _s;</span><br><span class="line">        e = _e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (Line v) &#123;</span><br><span class="line">        <span class="built_in">return</span> (s == v.s) &amp;&amp; (e == v.e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据一个点和倾斜角angle确定直线， 0 &lt;= angle &lt; pi</span></span><br><span class="line">    <span class="built_in">Line</span> (Point p, <span class="type">double</span> angle) &#123;</span><br><span class="line">        s = p;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(angle - pi / <span class="number">2</span>) == <span class="number">0</span>) e = (s + <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> e = (s + <span class="built_in">Point</span>(<span class="number">1</span>, <span class="built_in">tan</span>(angle)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Line</span> (<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span> c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(a) == <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = <span class="built_in">Point</span>(<span class="number">1</span>, -c / b);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(b) == <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(-c / a, <span class="number">0</span>);</span><br><span class="line">            e = <span class="built_in">Point</span>(-c / a, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = <span class="built_in">Point</span>(<span class="number">0</span>, -c / b);</span><br><span class="line">            e = <span class="built_in">Point</span>(<span class="number">1</span>, (-c - a) / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        s.<span class="built_in">input</span>();</span><br><span class="line">        e.<span class="built_in">input</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">adjust</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e &lt; s) <span class="built_in">swap</span>(s, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求线段长度</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">length</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">distance</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回直线倾斜角</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">angle</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> k = <span class="built_in">atan2</span>(e.y - s.y, e.x - s.x);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(k) &lt; <span class="number">0</span>) k += pi;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(k - pi) == <span class="number">0</span>) k -= pi;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点和直线的关系，1在左侧，2在右侧，3在直线上</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">sgn</span>((p - s) ^ (e - s));</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点在直线上判断</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pointonseg</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((p - s) ^ (e - s)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((p - s) * (p - e)) &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两向量平行（直线平行或重合）</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">parallel</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sgn</span>((e - s) ^ (v.e - v.s)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两线段相交判断，2规范相交，1非规范相交，0不相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">segcrossseg</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> d1 = <span class="built_in">sgn</span>((e - s) ^ (v.s - s));</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">sgn</span>((e - s) ^ (v.e - s));</span><br><span class="line">        <span class="type">int</span> d3 = <span class="built_in">sgn</span>((v.e - v.s) ^ (s - v.s));</span><br><span class="line">        <span class="type">int</span> d4 = <span class="built_in">sgn</span>((v.e - v.s) ^ (e - v.s));</span><br><span class="line">        <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span> &amp;&amp; (d3 ^ d4) == <span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.s - s) * (v.s - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d2 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((v.e - s) * (v.e - e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d3 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((s - v.s) * (s - v.e)) &lt;= <span class="number">0</span>) ||</span><br><span class="line">               (d4 == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>((e - v.s) * (e - v.e)) &lt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线（*this）与线段（v）相交判断，2规范相交，1非规范相交，0不相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">linecrossseg</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> d1 = <span class="built_in">sgn</span>((e - s) ^ (v.s - s));</span><br><span class="line">        <span class="type">int</span> d2 = <span class="built_in">sgn</span>((e - s) ^ (v.e - s));</span><br><span class="line">        <span class="keyword">if</span> ((d1 ^ d2) == <span class="number">-2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (d1 == <span class="number">0</span> || d2 == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线关系，0平行，1重合，2相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">linecrossline</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((*<span class="keyword">this</span>).<span class="built_in">parallel</span>(v)) <span class="keyword">return</span> v.<span class="built_in">relation</span>(s) == <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两直线交点</span></span><br><span class="line">    <span class="function">Point <span class="title">crosspoint</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> a1 = (v.e - v.s) ^ (s - v.s);</span><br><span class="line">        <span class="type">double</span> a2 = (v.e - v.s) ^ (e - v.s);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>((s.x * a2 - e.x * a1) / (a2 - a1), (s.y * a2 - e.y * a1) / (a2 - a1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//点到直线距离</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dispointtoline</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>((p - s) ^ (e - s) / <span class="built_in">length</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点到线段距离</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dispointtoseg</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>((p - s) * (e - s)) &lt; <span class="number">0</span> || <span class="built_in">sgn</span>((p - e) * (s - e)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(p.<span class="built_in">distance</span>(s), p.<span class="built_in">distance</span>(e));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dispointtoline</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线段到线段的距离</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dissegtosseg</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="built_in">dispointtoseg</span>(v.s), <span class="built_in">dispointtoseg</span>(v.e)), <span class="built_in">min</span>(v.<span class="built_in">dispointtoseg</span>(s), v.<span class="built_in">dispointtoseg</span>(e)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点p在直线上的投影</span></span><br><span class="line">    <span class="function">Point <span class="title">lineprog</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + (((e - s) * ((e - s) * (p - s))) / ((e - s).<span class="built_in">len2</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回点p关于直线的对称点</span></span><br><span class="line">    <span class="function">Point <span class="title">symmetrypoint</span> <span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">        Point q = <span class="built_in">lineprog</span>(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(<span class="number">2</span> * q.x - p.x, <span class="number">2</span> * q.y - p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">    Point p; <span class="comment">//圆心</span></span><br><span class="line">    <span class="type">double</span> r; <span class="comment">//半径</span></span><br><span class="line">    <span class="built_in">circle</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">circle</span> (Point _p, <span class="type">double</span> _r) &#123;</span><br><span class="line">        p = _p;</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">circle</span> (<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> _r) &#123;</span><br><span class="line">        p = <span class="built_in">Point</span>(x, y);</span><br><span class="line">        r = _r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三角形的外接圆</span></span><br><span class="line">    <span class="comment">//需要 Point 的 + / rotate() 以及 Line 的 crosspoint()</span></span><br><span class="line">    <span class="comment">//利用两条边的中垂线得到圆心</span></span><br><span class="line">    <span class="built_in">circle</span> (Point a, Point b, Point c) &#123;</span><br><span class="line">        Line u = <span class="built_in">Line</span>((a + b) / <span class="number">2</span>, ((a + b) / <span class="number">2</span>) + ((b - a).<span class="built_in">rotleft</span>()));</span><br><span class="line">        Line v = <span class="built_in">Line</span>((b + c) / <span class="number">2</span>, ((b + c) / <span class="number">2</span>) + ((c - b).<span class="built_in">rotleft</span>()));</span><br><span class="line">        p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">        r = p.<span class="built_in">distance</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三角形的内切圆</span></span><br><span class="line">    <span class="comment">//参数 bool t 没有作用，只是为了和外接圆函数区别</span></span><br><span class="line">    <span class="built_in">circle</span> (Point a, Point b, Point c, <span class="type">bool</span> t) &#123;</span><br><span class="line">        Line u, v;</span><br><span class="line">        <span class="type">double</span> m = <span class="built_in">atan2</span>(b.y - a.y, b.x - a.x), n = <span class="built_in">atan2</span>(c.y - a.y, c.x - a.x);</span><br><span class="line">        u.s = a;</span><br><span class="line">        u.e = u.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">        v.s = b;</span><br><span class="line">        m = <span class="built_in">atan2</span> (a.y - b.y, a.x - b.x), n = <span class="built_in">atan2</span>(c.y - b.y, c.x - b.x);</span><br><span class="line">        v.e = v.s + <span class="built_in">Point</span>(<span class="built_in">cos</span>((n + m) / <span class="number">2</span>), <span class="built_in">sin</span>((n + m) / <span class="number">2</span>));</span><br><span class="line">        p = u.<span class="built_in">crosspoint</span>(v);</span><br><span class="line">        r = <span class="built_in">Line</span>(a, b).<span class="built_in">dispointtoseg</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        p.<span class="built_in">input</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf %.2lf\n&quot;</span>, p.x, p.y, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (circle v) &#123;</span><br><span class="line">        <span class="built_in">return</span> (p == v.p) &amp;&amp; <span class="built_in">sgn</span>(r - v.r) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (circle v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((p &lt; v.p) || ((p == v.p) &amp;&amp; <span class="built_in">sgn</span>(r - v.r) &lt; <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//面积</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">area</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pi * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//周长</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">circumference</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * pi * r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点和圆的关系</span></span><br><span class="line">    <span class="comment">//0 圆外</span></span><br><span class="line">    <span class="comment">//1 圆上</span></span><br><span class="line">    <span class="comment">//2 圆内</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span> <span class="params">(Point b)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> dst = b.<span class="built_in">distance</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线段和圆的关系</span></span><br><span class="line">    <span class="comment">//比较的是圆心到线段的距离和半径的关系</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relationseg</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> dst = v.<span class="built_in">dispointtoseg</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直线和圆的关系</span></span><br><span class="line">    <span class="comment">//比较的是圆心到直线的距离和半径的关系</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relationline</span> <span class="params">(Line v)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> dst = v.<span class="built_in">dispointtoline</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sgn</span>(dst - r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两圆的关系</span></span><br><span class="line">    <span class="comment">//5 相离 4 外切 3 相交 2 内切 1 内含</span></span><br><span class="line">    <span class="comment">//需要 Point 的 distance</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relationcircle</span> <span class="params">(circle v)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">double</span> l = <span class="built_in">fabs</span>(r - v.r);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - r - v.r) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(d - l) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - l) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d - l) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两个圆的交点，返回 0 表示没有交点，返回 1 是一个交点，2 是两个交点</span></span><br><span class="line">    <span class="comment">//需要 relationcircle</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pointcrosscircle</span> <span class="params">(circle v, Point &amp;p1, Point &amp;p2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rel = <span class="built_in">relationcircle</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">1</span> || rel == <span class="number">5</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="type">double</span> l = (d * d + r * r - v.r * v.r) / (<span class="number">2</span> * d);</span><br><span class="line">        <span class="type">double</span> h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        Point tmp = p + (v.p - p).<span class="built_in">trunc</span>(l);</span><br><span class="line">        p1 = tmp + ((v.p - p).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(h));</span><br><span class="line">        p2 = tmp + ((v.p - p).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(h));</span><br><span class="line">        <span class="keyword">if</span> (rel == <span class="number">2</span> || rel == <span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求直线和圆的交点，返回交点个数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pointcrossline</span> <span class="params">(Line v, Point &amp;p1, Point &amp;p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(*<span class="keyword">this</span>).<span class="built_in">relationline</span>(v)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Point a = v.<span class="built_in">lineprog</span>(p);</span><br><span class="line">        <span class="type">double</span> d = v.<span class="built_in">dispointtoline</span>(p);</span><br><span class="line">        d = <span class="built_in">sqrt</span>(r * r - d * d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(d) == <span class="number">0</span>) &#123;</span><br><span class="line">            p1 = a;</span><br><span class="line">            p2 = a;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = a + (v.e - v.s).<span class="built_in">trunc</span>(d);</span><br><span class="line">        p2 = a - (v.e - v.s).<span class="built_in">trunc</span>(d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到过 a,b 两点，半径为 r1 的两个圆</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getcircle</span> <span class="params">(Point a, Point b, <span class="type">double</span> r1, circle &amp;c1, circle &amp;c2)</span> </span>&#123;</span><br><span class="line">        <span class="function">circle <span class="title">x</span><span class="params">(a, r1)</span>, <span class="title">y</span><span class="params">(b, r1)</span></span>;</span><br><span class="line">        <span class="type">int</span> t = x.<span class="built_in">pointcrosscircle</span>(y, c1.p, c2.p);</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r1;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到与直线 u 相切，过点 q, 半径为 r1 的圆</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getcircle</span> <span class="params">(Line u, Point q, <span class="type">double</span> r1, circle &amp;c1, circle &amp;c2)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> dis = u.<span class="built_in">dispointtoline</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dis - r1 * <span class="number">2</span>) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>(dis) == <span class="number">0</span>) &#123;</span><br><span class="line">            c1.p = q + ((u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">            c2.p = q + ((u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">            c1.r = c2.r = r1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Line u1 = <span class="built_in">Line</span>((u.s + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1)), (u.e + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1)));</span><br><span class="line">        Line u2 = <span class="built_in">Line</span>((u.s + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1)), (u.e + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1)));</span><br><span class="line">        circle cc = <span class="built_in">circle</span>(q, r1);</span><br><span class="line">        Point p1, p2;</span><br><span class="line">        <span class="keyword">if</span> (!cc.<span class="built_in">pointcrossline</span>(u1, p1, p2)) cc.<span class="built_in">pointcrossline</span>(u2, p1, p2);</span><br><span class="line">        c1 = <span class="built_in">circle</span>(p1, r1);</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">            c2 = c1;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c2 = <span class="built_in">circle</span>(p2, r1);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同时与直线 u,v 相切，半径为 r1 的圆</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getcircle</span> <span class="params">(Line u, Line v, <span class="type">double</span> r1, circle &amp;c1, circle &amp;c2, circle &amp;c3, circle &amp;c4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u.<span class="built_in">parallel</span>(v)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//两直线平行</span></span><br><span class="line">        Line u1 = <span class="built_in">Line</span>(u.s + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1), u.e + (u.e - u.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line u2 = <span class="built_in">Line</span>(u.s + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1), u.e + (u.e - u.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line v1 = <span class="built_in">Line</span>(v.s + (v.e - v.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1), v.e + (v.e - v.s).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        Line v2 = <span class="built_in">Line</span>(v.s + (v.e - v.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1), v.e + (v.e - v.s).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(r1));</span><br><span class="line">        c1.r = c2.r = c3.r = c4.r = r1;</span><br><span class="line">        c1.p = u1.<span class="built_in">crosspoint</span>(v1);</span><br><span class="line">        c2.p = u1.<span class="built_in">crosspoint</span>(v2);</span><br><span class="line">        c3.p = u2.<span class="built_in">crosspoint</span>(v1);</span><br><span class="line">        c4.p = u2.<span class="built_in">crosspoint</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同时与不相交圆 cx,cy 相切，半径为 r1 的圆</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getcircle</span> <span class="params">(circle cx, circle cy, <span class="type">double</span> r1, circle &amp;c1, circle &amp;c2)</span> </span>&#123;</span><br><span class="line">        <span class="function">circle <span class="title">x</span><span class="params">(cx.p, r1 + cx.r)</span>, <span class="title">y</span><span class="params">(cy.p, r1 + cy.r)</span></span>;</span><br><span class="line">        <span class="type">int</span> t = x.<span class="built_in">pointcrosscircle</span>(y, c1.p, c2.p);</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        c1.r = c2.r = r1;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//过一点作圆的切线 (先判断点和圆的关系)</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tangentline</span> <span class="params">(Point q, Line &amp;u, Line &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">relation</span>(q);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            u = <span class="built_in">Line</span>(q, q + (q - p).<span class="built_in">rotleft</span>());</span><br><span class="line">            v = u;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> d = p.<span class="built_in">distance</span>(q);</span><br><span class="line">        <span class="type">double</span> l = r * r / d;</span><br><span class="line">        <span class="type">double</span> h = <span class="built_in">sqrt</span>(r * r - l * l);</span><br><span class="line">        u = <span class="built_in">Line</span>(q, p + ((q - p).<span class="built_in">trunc</span>(l) + (q - p).<span class="built_in">rotleft</span>().<span class="built_in">trunc</span>(h)));</span><br><span class="line">        v = <span class="built_in">Line</span>(q, p + ((q - p).<span class="built_in">trunc</span>(l) + (q - p).<span class="built_in">rotright</span>().<span class="built_in">trunc</span>(h)));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求两圆相交的面积</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">areacircle</span> <span class="params">(circle v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rel = <span class="built_in">relationcircle</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (rel &gt;= <span class="number">4</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rel &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">area</span>(), v.<span class="built_in">area</span>());</span><br><span class="line">        <span class="type">double</span> d = p.<span class="built_in">distance</span>(v.p);</span><br><span class="line">        <span class="type">double</span> hf = (r + v.r + d) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="type">double</span> ss = <span class="number">2</span> * <span class="built_in">sqrt</span>(hf * (hf - r) * (hf - v.r) * (hf - d));</span><br><span class="line">        <span class="type">double</span> a1 = <span class="built_in">acos</span>((r * r + d * d - v.r * v.r) / (<span class="number">2.0</span> * r * d));</span><br><span class="line">        a1 = a1 * r * r;</span><br><span class="line">        <span class="type">double</span> a2 = <span class="built_in">acos</span>((v.r * v.r + d * d - r * r) / (<span class="number">2.0</span> * v.r * d));</span><br><span class="line">        a2 = a2 * v.r * v.r;</span><br><span class="line">        <span class="keyword">return</span> a1 + a2 - ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求圆和三角形 pab 的相交面积</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">areatriangle</span> <span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sgn</span>((p - a) ^ (p - b)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        Point q[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        q[len ++] = a;</span><br><span class="line">        <span class="function">Line <span class="title">l</span><span class="params">(a, b)</span></span>;</span><br><span class="line">        Point p1, p2;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pointcrossline</span>(l, q[<span class="number">1</span>], q[<span class="number">2</span>]) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>((a - q[<span class="number">1</span>]) * (b - q[<span class="number">1</span>])) &lt; <span class="number">0</span>) q[len ++] = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sgn</span>((a - q[<span class="number">2</span>]) * (b - q[<span class="number">2</span>])) &lt; <span class="number">0</span>) q[len ++] = q[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        q[len ++] = b;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">4</span> &amp;&amp; <span class="built_in">sgn</span>((q[<span class="number">0</span>] - q[<span class="number">1</span>]) * (q[<span class="number">2</span>] - q[<span class="number">1</span>])) &gt; <span class="number">0</span>) <span class="built_in">swap</span>(q[<span class="number">1</span>], q[<span class="number">2</span>]);</span><br><span class="line">        <span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">relation</span>(q[i]) == <span class="number">0</span> || <span class="built_in">relation</span>(q[i + <span class="number">1</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">double</span> arg = p.<span class="built_in">rad</span>(q[i], q[i + <span class="number">1</span>]);</span><br><span class="line">                res += r * r * arg / <span class="number">2.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                res += <span class="built_in">fabs</span>((q[i] - p) ^ (q[i + <span class="number">1</span>] - p)) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="这题代码-向量翻转">这题代码(向量翻转)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const double eps = 1e-17, pi = acos(-1.0);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct Point &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">long double x, y;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point(long double x = 0, long double y = 0) : x(x), y(y) &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point &amp;operator+=(const Point &amp;p) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">x += p.x, y += p.y;</span></span></span><br><span class="line"><span class="string"><span class="meta">return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point &amp;operator-=(const Point &amp;p) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">x -= p.x, y -= p.y;</span></span></span><br><span class="line"><span class="string"><span class="meta">return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point &amp;operator*=(const long double &amp;v) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">x *= v, y *= v;</span></span></span><br><span class="line"><span class="string"><span class="meta">return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point &amp;operator/=(const long double &amp;k)  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">x /= k, y /= k;</span></span></span><br><span class="line"><span class="string"><span class="meta">return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">friend Point operator-(const Point &amp;p) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return Point(-p.x, -p.y);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">friend Point operator+(Point lhs, const Point &amp;rhs) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return lhs += rhs;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">friend Point operator-(Point lhs, const Point &amp;rhs) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return lhs -= rhs;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">friend Point operator*(Point lhs, const long double &amp;rhs) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return lhs *= rhs;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">friend Point operator/(Point lhs, const long double &amp;rhs)  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return lhs /= rhs;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">Point rotate(Point p, long double angle) &#123; // 绕 p 点逆时针旋转 angle</span></span></span><br><span class="line"><span class="string"><span class="meta">Point v = (*this) - p;</span></span></span><br><span class="line"><span class="string"><span class="meta">long double c = cos(angle), s = sin(angle);</span></span></span><br><span class="line"><span class="string"><span class="meta">return Point(p.x + v.x * c - v.y * s, p.y + v.x * s + v.y * c);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">int dcmp(long double x) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if(fabs(x) &lt; eps) return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">else return x &lt; 0 ? -1 : 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">bool operator == (const Point &amp;a, const Point &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return !dcmp(a.x - b.x) &amp;&amp; !dcmp(a.y - b.y);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">long double dist(const Point &amp;a, const Point &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">long double dot(const Point &amp;a, const Point &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return a.x * b.x + a.y * b.y;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">long double cross(const Point &amp;a, const Point &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return a.x * b.y - a.y * b.x;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">long double Length(Point A) &#123; //</span></span></span><br><span class="line"><span class="string"><span class="meta">return sqrt(dot(A, A));</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">long double Angle(Point A, Point B) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return acos(dot(A, B) / Length(A) / Length(B));</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Point Rotate(Point A, long double rad) &#123; // 向量顺时针旋转后的向量</span></span></span><br><span class="line"><span class="string"><span class="meta">return Point(A.x * cos(rad) + A.y * sin(rad), -A.x * sin(rad) + A.y * cos(rad));</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int eq(long double A, long double B) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (fabs(A - B) &lt;= eps) return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (A &gt; B) return 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">return -1;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll xa, ya, xb, yb;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; xa &gt;&gt; ya &gt;&gt; xb &gt;&gt; yb;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Point p1 = Point(xa, ya), p2 = Point(xb, yb);</span></span></span><br><span class="line"><span class="string"><span class="meta">Point ve_ab = p2 - p1;</span></span></span><br><span class="line"><span class="string"><span class="meta">ve_ab /= sqrt(2);</span></span></span><br><span class="line"><span class="string"><span class="meta">Point p3 = Rotate(ve_ab, pi / 4.0) + p1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(p3.x, p3.y);</span></span></span><br><span class="line"><span class="string"><span class="meta">ll x = p3.x + 0.5, y = p3.y + 0.5;</span></span></span><br><span class="line"><span class="string"><span class="meta">p3.x = x; p3.y = y;</span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(p3.x, p3.y);</span></span></span><br><span class="line"><span class="string"><span class="meta">Point d1 = p1 - p3, d2 = p2 - p3;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (d1.x * d2.x + d1.y * d2.y == 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">p3 = Rotate(ve_ab, -pi / 4.0) + p1;</span></span></span><br><span class="line"><span class="string"><span class="meta">x = p3.x + 0.5, y = p3.y + 0.5;</span></span></span><br><span class="line"><span class="string"><span class="meta">d1 = p1 - p3, d2 = p2 - p3;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (d1.x * d2.x + d1.y * d2.y == 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>No Answer!<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="G爆搜">G爆搜</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/G">https://ac.nowcoder.com/acm/contest/46811/G</a><br>来源：牛客网</p><p>小红拿到了一个运算式，其中有一些地方可以填入’+‘、’-‘、’#‘（不允许添加括号）。问最终是否可以使得等式成立。若可以，输出任意合法解。否则输出-1。<br>其中’+‘和’-‘代表四则运算的加法或者减法，’#‘符号是小红发明的新运算符号：a#b为a的a次方对b取模。’#'符号的运算优先级和加减法是相同的（从左到右进行运算）。<br>在本题中，我们定义a#b当且仅当<strong>a</strong>和<strong>b</strong>都是正整数时是有意义的。</p><blockquote><p>爆搜没什么可说</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">a %= mod;</span><br><span class="line"><span class="keyword">while</span>(k) &#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) ans = (ans * a) % mod;</span><br><span class="line">a = (a * a) % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st_add[N], st_jian[N], st_new[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="built_in">sz</span>(s); i ++)  &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) res = res * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> fuhao;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i])) fuhao = s[i];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(s[i]) &amp;&amp; i &lt; <span class="built_in">sz</span>(s)) &#123;</span><br><span class="line">tmp = tmp * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">i --;</span><br><span class="line"><span class="keyword">if</span> (fuhao == <span class="string">&#x27;-&#x27;</span>) res -= tmp;</span><br><span class="line"><span class="keyword">if</span> (fuhao == <span class="string">&#x27;+&#x27;</span>) res += tmp;</span><br><span class="line"><span class="keyword">if</span> (fuhao == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (res &lt;= <span class="number">0</span> || tmp == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">res = <span class="built_in">qmi</span>(res, res, tmp);</span><br><span class="line">&#125;</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos, string s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos == n) &#123;</span><br><span class="line">string pre = <span class="string">&quot;&quot;</span>, last = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">bool</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;=&#x27;</span>) ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!ok) pre += s[i];</span><br><span class="line"><span class="keyword">if</span> (ok &amp;&amp; s[i] != <span class="string">&#x27;=&#x27;</span>) last += s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(pre, last,  check(last));</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(pre) == <span class="number">-1</span> || <span class="built_in">check</span>(last) == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(pre) == <span class="built_in">check</span>(last)) &#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[pos] == <span class="string">&#x27;=&#x27;</span>) <span class="built_in">dfs</span>(pos + <span class="number">1</span>, s);</span><br><span class="line"><span class="keyword">if</span> (s[pos] &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; s[pos] &gt;= <span class="string">&#x27;0&#x27;</span>) <span class="built_in">dfs</span>(pos + <span class="number">1</span>, s);</span><br><span class="line"><span class="comment">// debug(s);</span></span><br><span class="line"><span class="keyword">if</span> (s[pos] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">s[pos] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(pos + <span class="number">1</span>, s);</span><br><span class="line">s[pos] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(pos + <span class="number">1</span>, s);</span><br><span class="line">s[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(pos + <span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">n = <span class="built_in">sz</span>(s);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, s);</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I">I</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46811/I">https://ac.nowcoder.com/acm/contest/46811/I</a><br>来源：牛客网</p><p>小红定义“约和运算”：对一个不小于2的整数而言，求它的所有不等于它本身的约数之和进行的运算。<br>记一个整数$n$的“约和”为S(n)。例如，$S(10)=1+2+5=8$。<br>小红给了你一个正整数x，她希望你找到一个正整数$n$满足$S(n)=x$。你能帮帮她吗？</p><blockquote><p>x - 1为素数时, 构造(x - 1) * (x - 1)</p><p>x - 3为素数时, 构造(x - 3) * 2</p><p>x为奇数时</p><p>x –</p><p>哥德巴赫猜想:任何一个大于6的偶数都可以表示成两个素数之和</p><p>小于等于6的时候特判奇数就行,大于等于6的时候直接拆成两个素数</p></blockquote><p>附: 哥德巴赫的另一个猜想</p><blockquote><p>任何一个大于9的奇数都可以表示成三个素数之和</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">st[<span class="number">1</span>] = st[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) &#123;</span><br><span class="line">st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(x &amp; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!st[x - <span class="number">1</span>]) cout &lt;&lt; (x - <span class="number">1</span>) * (x - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!st[x - <span class="number">3</span>]) cout &lt;&lt; <span class="number">2</span> * (x - <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">1</span>) cout &lt;&lt; <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) cout &lt;&lt; <span class="number">4</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">5</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">7</span>) cout &lt;&lt; <span class="number">8</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x -= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// debug(primes[0]);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; x - primes[i] &gt; <span class="number">0</span>; i ++) &#123;</span><br><span class="line"><span class="comment">// debug(x, x - primes[i]);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(x - primes[i]) &amp;&amp; (primes[i] != (x - primes[i]))) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; primes[i] * (x - primes[i]) &lt;&lt; endl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">get_primes</span>(N);</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-贪心">K 贪心</h2><blockquote><p>尽可能拿之前没拿过的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 1e9 + 7;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct Mint &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    int x;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint(long long v = 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (v &lt; 0)</span></span></span><br><span class="line"><span class="string"><span class="meta">            v = v % mod + mod;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (v &gt;= mod)</span></span></span><br><span class="line"><span class="string"><span class="meta">            v %= mod;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x = v;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint power(long long p) const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        assert(p &gt;= 0);</span></span></span><br><span class="line"><span class="string"><span class="meta">        if(p &gt;= mod) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">            p %= (mod - 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">        &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">        Mint a = *this, result = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        while (p &gt; 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">            if (p &amp; 1) result *= a;</span></span></span><br><span class="line"><span class="string"><span class="meta">            a *= a, p &gt;&gt;= 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return result;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    long long val() const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return x;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint inv() const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        assert(x != 0);</span></span></span><br><span class="line"><span class="string"><span class="meta">        return power(mod - 2);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator += (const Mint &amp;other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x += other.x;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (x &gt;= mod) x -= mod;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator -= (const Mint &amp;other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x -= other.x;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (x &lt; 0) x += mod;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator *= (const Mint &amp;other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x = (long long)(x) * other.x % mod;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator /= (const Mint &amp;other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this *= other.inv();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    bool operator == (const Mint &amp;other) const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return x == other.x;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    bool operator != (const Mint &amp;other) const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return x != other.x;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint operator - () const &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return x == 0 ? 0 : mod - x;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator ++ () &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x = x == mod - 1 ? 0 : x + 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    Mint &amp;operator--() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        x = x == 0 ? mod - 1 : x - 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return *this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend Mint operator+(const Mint &amp;a, const Mint &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return Mint(a) += b;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend Mint operator-(const Mint &amp;a, const Mint &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return Mint(a) -= b;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend Mint operator*(const Mint &amp;a, const Mint &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return Mint(a) *= b;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend Mint operator/(const Mint &amp;a, const Mint &amp;b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return Mint(a) /= b;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend std::istream &amp;operator&gt;&gt;(std::istream &amp;is, Mint &amp;a) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        long long v;</span></span></span><br><span class="line"><span class="string"><span class="meta">        is &gt;&gt; v;</span></span></span><br><span class="line"><span class="string"><span class="meta">        a = Mint(v);</span></span></span><br><span class="line"><span class="string"><span class="meta">        return is;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const Mint &amp;a) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        return os &lt;&lt; a.val();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int cnt[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1, x; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta">cnt[x + 1] --, cnt[1] ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= 200005; i ++) cnt[i] += cnt[i - 1];</span></span></span><br><span class="line"><span class="string"><span class="meta">Mint ans = 0, a1 = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= 200005; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int mi = cnt[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">if (!mi) break;</span></span></span><br><span class="line"><span class="string"><span class="meta">Mint q = (i + 1) * Mint(i).inv();</span></span></span><br><span class="line"><span class="string"><span class="meta">Mint sum = a1 * q * (1 - q.power(mi)) * (1 - q).inv();</span></span></span><br><span class="line"><span class="string"><span class="meta">ans += sum;</span></span></span><br><span class="line"><span class="string"><span class="meta">a1 = a1 * q.power(mi);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">/*</span></span></span><br><span class="line"><span class="string"><span class="meta">a1(1 - q^n)/(1 - q)</span></span></span><br><span class="line"><span class="string"><span class="meta">*/</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023牛客寒假算法训练营</title>
      <link href="/posts/40053.html"/>
      <url>/posts/40053.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://ac.nowcoder.com/acm/contest/46800#description">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ac.nowcoder.com/acm/contest/46800#description.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">2023牛客寒假算法训练营</div>            <div class="tag-link-sitename"> 题目很不错</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="K题">K题</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46800/K">https://ac.nowcoder.com/acm/contest/46800/K</a><br>来源：牛客网</p><p>你需要写出一个仅有$0$和$1$组成的长为n的字符串，要求之中恰有$m$个字符是$1$。</p><p>现在，规定对于原序列中一个长恰好为$3$的子区间（子区间是连续的），若之中$1$的个数多于$0$的个数，则这个区间是坏的。</p><p>请求出满足条件的字符串中，坏区间总数最少的字符串中有几个坏区间。</p><p>个人思路:</p><blockquote><p>多枚举一下不难发现 100100100100…111111,这样的总是<code>坏区间</code>最少的,直接算可能会算错,用一种更保守的方法实现, 每两个0抵消一个1</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> cnt_0 = n - m;</span><br><span class="line"><span class="keyword">for</span> (; cnt_0 - <span class="number">2</span> &gt;= <span class="number">0</span>; cnt_0 -= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (m) s += <span class="string">&quot;100&quot;</span>, m --;</span><br><span class="line"><span class="keyword">else</span> s += <span class="string">&quot;00&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt_0) s += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) s += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(s) - <span class="number">2</span>; i ++) &#123;</span><br><span class="line"><span class="type">int</span> cnt = (s[i] == <span class="string">&#x27;1&#x27;</span>) + (s[i + <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) + (s[i + <span class="number">2</span>] == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= <span class="number">2</span>) ans ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="M-dp">M, dp</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46800/M">https://ac.nowcoder.com/acm/contest/46800/M</a><br>来源：牛客网</p><h2 id="题目描述">题目描述</h2><p>小波奇由于冲动消费，不小心买多了章鱼仙贝，买了一共$m$份章鱼仙贝，于是她只能把这些仙贝分给$n$位朋友。</p><p><img src="https://uploadfiles.nowcoder.com/images/20221227/0_1672088451473/106822FD2EA6F5197E661BBF62DE7A28" alt="img"></p><p>小波奇日常想太多，她认为分仙贝时好感度的变化是有规律的，不过并不是给的仙贝越多，好感度上升的就越多，而是应该看小波奇给出的仙贝数与她当前手里总仙贝的比值。也就是说，若小波奇当前还剩下$x(x&gt;0)$个仙贝，并给了一位朋友$y$个仙贝（$x,y$都为整数），则这位朋友对小波奇的好感度将增加$y/x$（这个值可以为小数）。</p><p>现在，小波奇可以任意安排送仙贝的顺序和每次送仙贝的个数，但不能给同一个人送两次仙贝，允许最后手中还有剩余的仙贝，允许最终有朋友没有分到仙贝。社恐的朋友非常重要，所以请你帮助小波奇算一算，在最优送仙贝策略下，小波奇和所有人的好感度之和最大为多少（假设初始小波奇和所有人好感度都为$0$）。</p><blockquote><p>其实俺一眼没看出是个dp,被题目晃到了<img src="https://image.chiullian.cn/picture/lLLMNIF.png" alt="">, 自己想了个贪心的手法一直在那证明,我淦,一知到解法是有dp时,就清晰了,从i个人分j个($f[i][j]$),然后考虑上一层从哪里转移过来即第$i-1$个人分(1 -&gt; j)个转移过来,实现不难,也不用优化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= j; k ++)  <span class="comment">// 从k -&gt; j</span></span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][k] + <span class="number">1.0</span> * (j - k) / (<span class="number">1.0</span> * j));</span><br><span class="line">cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-鸡格线-势能线段树">G 鸡格线,势能线段树</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46800/G">https://ac.nowcoder.com/acm/contest/46800/G</a><br>来源：牛客网</p><p>你有一个长为$n$的数组$a$，你需要支持以下两种操作：</p><ul><li>1、输入$l,r,k$，对区间$[l,r]$中所有数字执行$a_i =f(a_i)$操作$k$次（式中等号表示赋值操作），之中$f(x)=round(10x)$，$round$为四舍五入函数。</li><li>2、输出当前数组所有数字的和。</li></ul><p>你需要正确处理$m$次这样的操作。</p><blockquote><p>通过枚举发现任意数字(&lt;=1e9)进行1操作不超过20次就会收敛成100和 99, 0是特例</p></blockquote><p>所以一个数字最多被修改不到20次时间复杂度就骤降了</p><p>什么是势能线段树:</p><blockquote><p>所谓势能线段树，是指在懒标记无法正常使用的情况下，暴力到叶子将线段树当成数组一样用进行修改。<br>大概就是先暴力，在暴力到一个状态的时候再用lazy标记。</p></blockquote><p>值得注意的是:</p><blockquote><p>大部分这种类型题目,经过很少次操作得到的是固定形式的时候会用到势能线段树,简单粗暴的讲就是如果一个点的值变成固定形式的时候就给这点加个tag,如果再次访问直接return掉就行了</p></blockquote><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val; <span class="comment">//</span></span><br><span class="line"><span class="type">bool</span> ok;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">u.val = l.val + r.val;</span><br><span class="line">u.ok = l.ok &amp; r.ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">tr[u].val = a[l];</span><br><span class="line">tr[u].ok = (a[l] == <span class="number">99</span> || a[l] == <span class="number">100</span> || a[l] == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123; <span class="comment">// 区间</span></span><br><span class="line"><span class="keyword">if</span> (tr[u].ok) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k &amp;&amp; !tr[u].ok; i ++) &#123;</span><br><span class="line">tr[u].val = <span class="built_in">round</span>(<span class="number">10</span> * <span class="built_in">sqrt</span>(tr[u].val));</span><br><span class="line">tr[u].ok = (tr[u].val == <span class="number">100</span> || tr[u].val == <span class="number">99</span> || tr[u].val == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line"><span class="keyword">if</span>(r &gt;= mid + <span class="number">1</span>) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> m = tr[u].l + ((tr[u].r - tr[u].l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r &lt;= m) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l &gt; m) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Node ret;</span><br><span class="line">Node ret_left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">Node ret_right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="built_in">pushup</span>(ret, ret_left, ret_right);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Segment_Tree st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="comment">// for (int i = 1; i &lt;= n; i ++) &#123;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; st.query(1, i, i).val &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">int</span> op, l, r, k;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">&#125; <span class="keyword">else</span> cout &lt;&lt; st.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n).val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="红旗杯”第十五届东北地区大学生程序设计竞赛-D-Lowbit-gym-103145-D">红旗杯”第十五届东北地区大学生程序设计竞赛 D - Lowbit (gym-103145-D)</h3><p>一个数组，两个操作</p><ul><li><p>1 L R, add lowbit(ai) each ai in the interval [L,R].</p></li><li><p>2 L R, query the sum of the numbers in the interval [L,R].</p></li></ul><p>一直x + lowbit(x), 会让这个数变成2的次方， 然后2的x次方再进行x + lowbit(x)时侯就变成的x * 2</p><p>然后变成了2的多少次方的时候, 操作1就变成了区间修改(即区间×2)</p><div class="tip warning"><p>线段树初始化都要在build里写不要写外面,除了l和r</p></div><p>详细见代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, mul; <span class="comment">// val:维护的数据</span></span><br><span class="line"><span class="type">int</span> tag;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].r - tr[u].l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(Node u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.r - u.l + <span class="number">1</span>;    <span class="comment">// sum = len * change(值)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">u.val = (l.val + r.val) % mod;</span><br><span class="line">u.tag = l.tag &amp; r.tag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!u.tag) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">l.mul = l.mul * u.mul % mod;</span><br><span class="line">r.mul = r.mul * u.mul % mod;</span><br><span class="line"></span><br><span class="line">l.val = l.val * u.mul % mod;</span><br><span class="line">r.val = r.val * u.mul % mod;</span><br><span class="line">u.mul = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// do sth</span></span><br><span class="line">tr[u].r = r, tr[u].l = l, tr[u].val = <span class="number">0</span>, tr[u].mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">tr[u].val = a[l];</span><br><span class="line">tr[u].tag = tr[u].val == <span class="built_in">lowbit</span>(tr[u].val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line"><span class="keyword">if</span> (tr[u].tag) tr[u].val = tr[u].val * <span class="number">2</span> % mod;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tr[u].val = tr[u].val + <span class="built_in">lowbit</span>(tr[u].val);</span><br><span class="line"><span class="keyword">if</span> (tr[u].val == <span class="built_in">lowbit</span>(tr[u].val)) tr[u].tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r &amp;&amp; tr[u].tag) &#123; <span class="comment">// 加速关键</span></span><br><span class="line">tr[u].mul = tr[u].mul * <span class="number">2</span> % mod;</span><br><span class="line">tr[u].val = tr[u].val * <span class="number">2</span> % mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree tr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; tr.a[i];</span><br><span class="line">tr.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">int</span> op, l, r;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) tr.<span class="built_in">modify</span>(<span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; tr.<span class="built_in">query</span>(<span class="number">1</span>, l, r).val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="鸡算几何">鸡算几何</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46800/E">https://ac.nowcoder.com/acm/contest/46800/E</a><br>来源：牛客网</p><p>鸡在玩铁丝。</p><p>具体来说，二维平面上有一根LLL型的铁丝，由$AB$和$BC$两条线段组成，鸡可以用以下三种操作玩铁丝：</p><p>1、在平面内任意地平移铁丝，即铁丝上每一个点横坐标都变化$\Delta x$、纵坐标都变化$\Delta y$；</p><p>2、以B点为轴，任意地旋转铁丝，旋转是在平面上进行的（即旋转过程中铁丝不能离开地面）；</p><p>3、鸡是三维生物！鸡将该铁丝拿起，在自己手里任意的调整铁丝的姿态后（鸡不能使铁丝发生形变）再随意放回平面上任意位置。</p><p>鸡可以任意（任意顺序、任意次数、不同的操作可以交替使用）使用上述三种操作来操作铁丝，经过一段时间的操作后，得到新铁丝的位置可以用线段$DE$和$EF$描述。注意$DE$并不保证与$AB$对应，$EF$同理，即$DEF$只描述操作后铁丝的形状。</p><p>现在，你想知道只根据$ABC$与$DEF$的信息，是否可以断言鸡一定使用过至少一次第三种操作。</p><blockquote><p>3能实现而1和2实现不了的是因为ABC进行操作3, 举个栗子:回忆一下你初中常用的带30度60度90度的那把三角尺,把它分成正面和反面,操作一和操作二只能在一个面内(记为正面),而操作三可以把池子翻个面, 当遇见等腰三角形的时候肯定是辨别不出来是正面还是反面的,所以等腰的话直接<code>NO</code>, 怎么判断正反呢, 就是用向量积</p><p>下面写出一个向量积的结论:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二维向量叉乘：(x1,y1)×(x2,y2) = x1y2-x2y1</span><br><span class="line">值的绝对值是两向量同起点，构成平行四边形的面积</span><br><span class="line">值为正，(x2,y2)在(x1,y1)逆时针方向</span><br><span class="line">值为负，(x2,y2)在(x1,y1)顺时针方向</span><br></pre></td></tr></table></figure><p>所以说确定一条共同边向量,乘另一条边的向量他俩一定同号的,不同号的话一定就是在不同方向就进行了第三次操作<code>YES</code></p></blockquote><p>见代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="type">double</span> x, y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">double</span> x = <span class="number">0</span>, <span class="type">double</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Point &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Point &amp;p) &#123;</span><br><span class="line">x += p.x, y += p.y;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Point &amp;p) &#123;</span><br><span class="line">x -= p.x, y -= p.y;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> <span class="type">double</span> &amp;v) &#123;</span><br><span class="line">x *= v, y *= v;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>-(<span class="type">const</span> Point &amp;p) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(-p.x, -p.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point lhs, <span class="type">const</span> Point &amp;rhs) &#123;</span><br><span class="line"><span class="keyword">return</span> lhs += rhs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>-(Point lhs, <span class="type">const</span> Point &amp;rhs) &#123;</span><br><span class="line"><span class="keyword">return</span> lhs -= rhs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>*(Point lhs, <span class="type">const</span> <span class="type">double</span> &amp;rhs) &#123;</span><br><span class="line"><span class="keyword">return</span> lhs *= rhs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">eq</span><span class="params">(<span class="type">double</span> A, <span class="type">double</span> B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(A - B) &lt;= eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (A &gt; B) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point a[<span class="number">3</span>], b[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++) cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++) cin &gt;&gt; b[i].x &gt;&gt; b[i].y;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">eq</span>(<span class="built_in">dist</span>(a[<span class="number">0</span>], a[<span class="number">1</span>]), <span class="built_in">dist</span>(a[<span class="number">1</span>], a[<span class="number">2</span>]))) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">eq</span>(<span class="built_in">dist</span>(a[<span class="number">0</span>], a[<span class="number">1</span>]), <span class="built_in">dist</span>(b[<span class="number">0</span>], b[<span class="number">1</span>]))) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cross</span>(a[<span class="number">0</span>] - a[<span class="number">1</span>], a[<span class="number">2</span>] - a[<span class="number">1</span>]) * <span class="built_in">cross</span>(b[<span class="number">0</span>] - b[<span class="number">1</span>], b[<span class="number">2</span>] - b[<span class="number">1</span>]) &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cross</span>(a[<span class="number">2</span>] - a[<span class="number">1</span>], a[<span class="number">0</span>] - a[<span class="number">1</span>]) * <span class="built_in">cross</span>(b[<span class="number">0</span>] - b[<span class="number">1</span>], b[<span class="number">2</span>] - b[<span class="number">1</span>]) &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="鸡玩炸蛋人">鸡玩炸蛋人</h2><p>链接：<a href="https://ac.nowcoder.com/acm/contest/46800/F">https://ac.nowcoder.com/acm/contest/46800/F</a><br>来源：牛客网</p><p>炸鸡最近在 ɔiq彐 平台上白嫖了一款游戏：《炸蛋人》。</p><p>《炸蛋人》的主角炸蛋人生活在一张$n$个结点（编号$1$到$n$）$m$条边的无向图上（图不一定联通），炸鸡可以控制炸蛋人进行两种操作：移动和放置炸蛋。具体说明如下。</p><p>移动：炸蛋人可以移动到当前所在结点通过一条边相连的相邻节点，但炸蛋人只能移动到没有炸蛋的结点。注意，尽管不能移动到有炸蛋的结点，但允许炸蛋人从一个当前有炸蛋的结点出发，移动到相邻没有炸蛋的结点。</p><p>放置炸蛋：炸蛋人在当前位置放置一枚炸蛋，炸蛋一经放置就会永久存在于图中（炸蛋全称为炸制金黄色的农家土鸡蛋，因此当然不会爆炸），每个位置可以放置多枚炸蛋。</p><p>已知炸蛋人所在的无向图初始没有炸蛋，炸蛋人出现在了地图上的$S$点，炸鸡对炸蛋人进行了一系列的操作，炸蛋人最终停留在了$T$点。现在，给出无向图最终的情况，请你求出有多少种可能的起点终点方案$(S,T)$，两种方案不同当且仅当它们的起点和终点至少有一个不同。若无合法方案输出$0$。</p><blockquote><p>拿到题之后分析, 大部分都是废话和诱导你做错的话</p><p>个人题解:</p><p>可以把图分成很多块, 但是有炸弹的一定只能都在一个块中,不然图不连通不能相互到达,然后一个块中操作就行了, 其实不难发现,S和T可以在炸弹所在的块中随便放都能找到一条或多条S-&gt;T的路,因为到一个点可以不放和放没有强迫进行操作,所以方案就是(炸弹块的大小*炸弹块的大小), 特殊的就是最终情况没有炸弹,那就是所有每个(连通块×连通块)的和.</p></blockquote><p>挺简单的并查集问题0.0, 虽然我写的很<s>臭</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line"><span class="type">int</span> p[N], sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">sz[y] += sz[x], p[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="keyword">inline</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">init</span>(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">e[a].<span class="built_in">emplace_back</span>(b);</span><br><span class="line">e[b].<span class="built_in">emplace_back</span>(a);</span><br><span class="line"><span class="built_in">merge</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i += <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; !st[<span class="built_in">find</span>(i)])</span><br><span class="line">t.<span class="built_in">emplace_back</span>(<span class="built_in">find</span>(i)), st[<span class="built_in">find</span>(i)] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sz</span>(t) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">sz</span>(t)) &#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[i] == i) res.<span class="built_in">emplace_back</span>(sz[<span class="built_in">find</span>(i)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : res) ans += (x * x);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> cout &lt;&lt; sz[t[<span class="number">0</span>]] * sz[t[<span class="number">0</span>]] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="彩蛋">彩蛋</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">// ...............................................................................................................................................................</span><br><span class="line">// ....................................................................................................................]*.........................................</span><br><span class="line">// ..........................................................................................................*]OOOOOOOOOOO]`......................................</span><br><span class="line">// .......................................................................................................,/OOOO@@OOOOOO@@@OOOOO].................................</span><br><span class="line">// ....................................................................................................*]OOOOO@@@@OOOO@@@@O@@OOOOOo`..............................</span><br><span class="line">// ..................................................................................................*/OOOOOOO@@@@@@@@@@@OOOOOOOOOOOO`............................</span><br><span class="line">// ................................................................................................,oOOOOOOOO@@@@@@@@@O@@OOO@@OOOOOOOO\...........................</span><br><span class="line">// ...............................................................................................=OOOOOOOO@@@@@@@@@@@@@@@@@@@@OOO@@@OO\..........................</span><br><span class="line">// ...............................................................................................OO@OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOo*........................</span><br><span class="line">// ...............................................................................................OO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OO`.......................</span><br><span class="line">// ...............................................................................................OO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O^.......................</span><br><span class="line">// ...............................................................................................=O@@@@@@@@@@@@@@@@@@@@@@@OO@@@@@@@@@@@@O^.......................</span><br><span class="line">// ................................................................................................@@@@@@@@@@@@@@@@@@@@@@O^,OO@@@@@@@@@@@@^.......................</span><br><span class="line">// ............................................................................]]/OOO]..   .O\..]]O@@@@@@@@@@@@@@@@@@@@OO^*/OO@@@@@@@@@@@@^.......................</span><br><span class="line">// ......................................................................]/@@@@@@@@@@@@@.   .\@@@@@@@@@@@@@O@@@@@@@@@@@O@o/@ooO@@@@@@@@@@O`.......................</span><br><span class="line">// ..................................................................,/@@@@@@@@@@@@@@@@@@`    =@@@@@@@@@@@@@@@@@@O@@@@@@@o*OooOO@O@@@@@@@/........................</span><br><span class="line">// ................................................................=@@@@@@@@@@@@@@@@@@@@@@^    =@@@@@@@@@@@@@@@@@@@@OO@@@@Oo`ooOOoOO@@@@@`........................</span><br><span class="line">// ..............................................................,@@@@@@@@@@@@@@@@@@@@@@@@@^    =@@@@@@@@@@@@@@@@@@@@@@@@OooooooooooOOOO`.........................</span><br><span class="line">// ............................................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@\.   =@@@@@@@@@@@@@@@@@@@@@@@@@Oooooooo`..............................</span><br><span class="line">// .........................................................../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\   .=@@@@@@@@@@@@@@@@@@@@@@@@@Oooooo^...............................</span><br><span class="line">// ..........................................................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\    =@@@@@@@@@@@@@@@@@@@@@@@@@Oooo^................................</span><br><span class="line">// ......................................................../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^.   \@@@@@@@@@@@@@@@@@@@@@@@@@Oo/.................................</span><br><span class="line">// ......................................................./@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^ ...@@@@@@@@@@@@@@@@@@@@@@@@@@^..................................</span><br><span class="line">// ......................................................=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@` ..,@@@@@@@@@@@@@@@@@@@@@@@@@@^.................................</span><br><span class="line">// ...................................................../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@@@\................................</span><br><span class="line">// .................................................../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@@@@@@@@`..............................</span><br><span class="line">// ................................................./@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@@@@@^.............................</span><br><span class="line">// ...............................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^...,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\............................</span><br><span class="line">// ............................................../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^...........................</span><br><span class="line">// .............................................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^..........................</span><br><span class="line">// ...........................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^.........................</span><br><span class="line">// ........................................../@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\....\/`...,\@@@@@@@@@@@@@@@@@@@@@@@@^........................</span><br><span class="line">// .........................................@@@@@@@@@@@@@@@@@@@@@@@/.=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@...]o^.../@@\/@@@@@@@@@@@@@@@@@@@@@@@^.......................</span><br><span class="line">// .......................................,@@@@@@@@@@@@@@@@@@@@@@@/..=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^/OooO.,@@@@@@^=@@@@@@@@@@@@@@@@@@@@@O.......................</span><br><span class="line">// ......................................,@@@@@@@@@@@@@@@@@@@@@@/.....=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOOoOOO@@@@@@@@\=@@@@@@@@@@@@@@@@@@@@@.......................</span><br><span class="line">// ......................................@@@@@@@@@@@@@@@@@@@@@O`......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\OOOO@@@@@@@@@@@@=@@@@@@@@@@@@@@@@@@@@.......................</span><br><span class="line">// ...................................../@@@@@@@@@@@@@@@@@@@@^.......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@,@@@@@@@@@@@@@@@@@@@^......................</span><br><span class="line">// .....................................@@@@@@@@@@@@@@@@@@@@@.......@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@\,@@@@@@@@@@@@@@@@@@^......................</span><br><span class="line">// .....................................O@@@@@@@@@@@@@@@@@@@@..../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/....=@@@@@@@@@@@@@@@\,@@@@@@@@@@@@@@@@@^......................</span><br><span class="line">// .....................................O@@@@@@@@@@@@@@@@@@@@...=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@^,@@@@@@@@@@@@@@@@^......................</span><br><span class="line">// .....................................,@@@@@@@@@@@@@@@@@@@@@O.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@^,@@@@@@@@@@@@@@@@......................</span><br><span class="line">// .......................................O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^..../@@@@@@@@@@@@@@@@@@@`,@@@@@@@@@@@@@@@^.....................</span><br><span class="line">// ........................................\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@.=@@@@@@@@@@@@@@@.....................</span><br><span class="line">// .........................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@^.\@@@@@@@@@@@@@/.....................</span><br><span class="line">// ...........................................\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/....=@@@@@@@@@@@@@@@@@@@@@@`.@@@@@@@@@@@@/......................</span><br><span class="line">// ............................................,O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@@@\.=@@@@@@@@@@@`......................</span><br><span class="line">// ..............................................,O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....,@@@@@@@@@@@@@@@@@@@@@@@@`.\@@@@@@@@@@\......................</span><br><span class="line">// ................................................*[O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@^..@@@@@@@@@@@......................</span><br><span class="line">// ....................................................\O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@@@@@@..@@@@@@@@@@@^.....................</span><br><span class="line">// .......................................................,\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^....@@@@@@@@@@@@@@@@@@@@@@@@@@*.=@@@@@@@@@@^.....................</span><br><span class="line">// ........................................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@@@^*=@@@@@@@@@/......................</span><br><span class="line">// .........................................................=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@....=@@@@@@@@@@@@@@@@@@@@@@@@@@^*=@@@@@@@/........................</span><br><span class="line">// ..........................................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOOo@@@@@@@@@@@@@@@@@@@@@@@@@@@@*=@@@@@@@.........................</span><br><span class="line">// .............................................................,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^/@@@@@@@.........................</span><br><span class="line">// ..............................................................=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^O@@@@@@@.........................</span><br><span class="line">// ..............................................................O@OOOOOOO@@@@@@@@@@@@@@@@@@@@@@O[O@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\@@@@@@@^.........................</span><br><span class="line">// ..........................................................]/OoO@OOOOOOOOOOOOOOO@@@@@@@@@@@@@O**OO@@@@@@@@@@@@@@@@@@@@@@@@@@@@O@@@@@@/..........................</span><br><span class="line">// .......................................................,@@@@oOO@OOOOOOOOOOOOOOOOOOOOOOO@@OOOO]/OO@OOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@...........................</span><br><span class="line">// ....................................................../@@@OoooOooOOOOOOOOOOOOOOOOOOOOOO@OOOOOOOOO@OO@OOO@@@@@@@@@@@@@@@@@@@@@@@@@@@............................</span><br><span class="line">// .....................................................,@@@OoOOooOOooOOOOOOOOOOOOOOOOOOOO@OO@OOOO@@OOO@OOO@OO@@@@@@@@@@@@@@@@@@@@@@/.............................</span><br><span class="line">// ...................................................../@@@oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@/[................................</span><br><span class="line">// .....................................................@@@OoOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@`....................................</span><br><span class="line">// ....................................................=@@@OOOoOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@^.....................................</span><br><span class="line">// ....................................................=@OoOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@`....................................</span><br><span class="line">// ..................................................../OoooooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@O\...................................</span><br><span class="line">// ....................................................OoOOOOooooooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@OOO...................................</span><br><span class="line">// ..................................................,oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\..................................</span><br><span class="line">// .................................................,OOOOOooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO`...............................</span><br><span class="line">// ................................................,ooOOOOOOOoOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO`.............................</span><br><span class="line">// ...............................................=OoooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@OOOOOOOOOo\............................</span><br><span class="line">// ............................................../OooooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@OOOOOOOOOOOOOO`..........................</span><br><span class="line">// ............................................./oooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.........................</span><br><span class="line">// ............................................/ooooooOOOOOOOOOOOOOOOOOOOOOOOOOOOO@OO@OOOOOOO@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^.......................</span><br><span class="line">// .........................................../oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@OO@@O@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^.......................</span><br><span class="line">// ........................................../oOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@OOOOOOOOOOO@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^.......................</span><br><span class="line">// .........................................ooooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^.......................</span><br><span class="line">// .......................................,oooOOOOOOOOOOOOOOOOOOOO@@@@@OOOOOOOOO@@@@/[.........[O@@OOOOOOOOOOO@@@@@OOOOOOOOOOOOOOOOOOOOOOO^.......................</span><br><span class="line">// ......................................,ooooooOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@O`................,OOO@@@@@@@@@@@@@@@OOOOOOOOOOOOOOOOOOOOOo.......................</span><br><span class="line">// .....................................,oooOOoooooOOOOOOOOOOOO@@@@@@@@@@@@@@@O`....................,OO@@@@@@@@@@@@OO@@OOOOOOOOOOOOOOOOOOOOo......................</span><br><span class="line">// ....................................=oooOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@O`........................,\O@@@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOO^.....................</span><br><span class="line">// ...................................=ooooOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@`............................,OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^....................</span><br><span class="line">// ..................................=ooOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@O`................................,O@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO`...................</span><br><span class="line">// .................................,ooOOOOOOOOOOOOOOOOOOOOOOOOOOO@@OO@^....................................\OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO`..................</span><br><span class="line">// .................................oooOOOOOOOOOOOOOOOOOOOOOOOOOOO@OOO`......................................,OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO..................</span><br><span class="line">// ................................=ooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^..........................................\OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\.................</span><br><span class="line">// ................................OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.............................................,OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO^................</span><br><span class="line">// ...............................=oOOOOOOOOOOOOOOOOOOOOOOOOO@@OO/................................................OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO................</span><br><span class="line">// ..............................*oOOOOOOOOOOOOOOOOOOOOOOOOOOOO@/..................................................O@OOOOOOOOOOOOOOOOOOOOOOOOOOOOO`...............</span><br><span class="line">// .............................*/OOOOOOOOOOOOOOOOOOOOOOOOOO@@@/....................................................\@@OOOOOOOOOOOOOOOOOOOOOOOOOOOO...............</span><br><span class="line">// ...........................*/OOooooooooooOOOOOOOOOOO@@@@@@@/.......................................................O@@@@@@@OOOOOOOOOOOOOOOOOOOOO^..............</span><br><span class="line">// ...........................OOOOOOOO@@@@@@@@@@@@@@@@@@@@@@@/.........................................................,O@@@@@@@@OOOOOOOOOOOOOOOOOOO^.............</span><br><span class="line">// ..........................=oooOOOOOOOOOOOOOOOOOO@@@@@@@@/.............................................................=@@@@@@@@@@@@@@@@OOOOOOOoooO`............</span><br><span class="line">// ..........................ooooooOOOOOOOOOOOO@@@@@@@@@@/................................................................,@@OOOOOOOOOOOOOOOOOOOOOOOOO`...........</span><br><span class="line">// ........................./OoOO@@@@@@@@@@@@@@@@@OOOOO`....................................................................\@@@@@@@@@@@@@@@@@@@OOOOOOOO`.........</span><br><span class="line">// ........................,\]o\OOOOOOOOOOOOOOOOOOOOO`........................................................................[@@@@@@OOOOO@@@@@@@@@@O@OO^.........</span><br><span class="line">// .......................,OOOOOOOOO@@@OOOOOOOO@@@@O*............................................................................\@@@@@@@OOOOOOOOOoooOO...........</span><br><span class="line">// ......................=OOooooooOOOOOOOOOOOOOOOO^...............................................................................=@@@OOOOOOOOOOoOooOOO\..........</span><br><span class="line">// .....................*oOOooooooOOOOooOOOOOOOOO...................................................................................OOOOOOOOOooooOOOOOOO..........</span><br><span class="line">// .....................=oo]]`[\ooOOoooOOOOOOO@O*...................................................................................OOOOOOOOOOOOOOOOOOoo^.........</span><br><span class="line">// ..................*.*=oo[[\ooOOOOOOO@@@@@@@@^....................................................................................OOOOOOOOOOOOOOOOOOOoo.........</span><br><span class="line">// ...................**ooooooOOOOOOOOOOOOOOOO/.....................................................................................=OOOOOOOOoooooooooooo^........</span><br><span class="line">// ...........*********/oooooOOOOOOOOOOOOOOOO/.......................................................................................=OOOOOOOOOOOOOOOOOOO^........</span><br><span class="line">// ********************[[\ooooOOOOOOOOOOOOOO/*************************...............................................................=OOOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// *******************\o\oo/oOOOOOOOOOOOOOOO**************...........................................................................=OOOOOOOOOOoooooOOOOO........</span><br><span class="line">// *******************oooooo\]oOOOOOOOOOOOO^***************..........................................................................=OOOOOOOOOOOOOOOOOOOO*.......</span><br><span class="line">// *******************oooOOOOOOOOOOOOOOOOO^******************........................................................................=OOOOOOOOOOOOOOOOOOOO*.......</span><br><span class="line">// ******************,OoOOOOOOOOOOOOOOOOOO^*****************.........................................................................=OOOOOOOOOOOOOOOOOOOO*.......</span><br><span class="line">// ******************=ooooooOOOOOOOOOOOOOO^********..................................................................................=OOOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// ******************oooOOoOOOOOOOOOOOOOOO...........................................................................................*OOOOOOOOOOOOOOOOOOOO*.......</span><br><span class="line">// ...............***ooOOOOOOOOOOOOOOOOOO^............................................................................................OOOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// .................=oooOOOOOOOOOOOOOOOOO.............................................................................................=OOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// .................=OOOOOOOOOOOOOOOOOOO^.............................................................................................=OOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// .................=ooooOOOOOOOOOOOOOOO*..............................................................................................OOOOOOOOOOOOOOOOOOO........</span><br><span class="line">// ................*ooooOOOOOOOOOOOOOOO^...............................................................................................=OOOOOOOOOOOOOOOOOO........</span><br><span class="line">// ****......*.....=OOoOOOOOOOOOOOOOOOO*................................................................................................OOOOOOOOOoOOOOOOOO........</span><br><span class="line">// ................ooOOOOOOOOOOOOOOOOO/.................................................................................................=OOOOOOOOOOOOOOOOO........</span><br><span class="line">// ...............*oooOOOOOOOOOOOOOOOO*..................................................................................................OOOOOOOOOOOOOOOOO........</span><br><span class="line">// ...............=oooOOOOOOOOOOOOOOO^...................................................................................................\OOOOOOOOOOOOOOOO........</span><br><span class="line">// ...............=ooooOOOOOOOOOOOOOO*...................................................................................................,OOOOOOOOOOOOOOOO........</span><br><span class="line">// ...............oooOOOOOOOOOOOOOOO^*....................................................................................................\OOOOOOOooOOOOOO........</span><br><span class="line">// ..............*oooOOOOOOOOOOOOOOO`......................................................................................................OOOOOOOOOOOOOOO........</span><br><span class="line">// ..............=ooOOOOOOOOOOOOOOOo.......................................................................................................=OOOOOOOOOOOOOO`.......</span><br><span class="line">// ..............oooooOOOOOOOOOOOOO`.......................................................................................................,OOOOOOOOOOOOOO`.......</span><br><span class="line">// .............,oooooOOOOOOOOOOOOO.........................................................................................................OOO/[*[^**=o..........</span><br><span class="line">// ...............@OO@@@@@@OOOOOOOO........................................................................................................../`O@@^***/@^.........</span><br><span class="line">// ..............=@@@@@@@@@@@[[[[[`..........................................................................................................\@@@@@@@@@@^.........</span><br><span class="line">// ............./@@@@@@@@@@@^.................................................................................................................@@@@@@@@@@@.........</span><br><span class="line">// .............@@@@@@@@@@@@.................................................................................................................=@@@@@@@@@@@^........</span><br><span class="line">// ............/@@@@@@@@@@@@.................................................................................................................=@@@@@@@@@@@@........</span><br><span class="line">// .........../@@@@@@@@@@@@@.................................................................................................................=@@@@@@@@@@@@^.......</span><br><span class="line">// ..........O@@@@@@O@@@@@@O................................................................................................................./@@@@@@@@@@@@@`......</span><br><span class="line">// ......../O@@@@@@@@@@@@@@/................................................................................................................O@@@@@@@@@@@@@@@`.....</span><br><span class="line">// ....]`/OO@@@@@@@@@@@@@@@@\..............................................................................................................=@@@@@@@@@@@@@@@@@\....</span><br><span class="line">// OOOOOOOO@@@@@@@@@@@@@@@@@@^.............................................................................................................=@@@@@@@@@@@@@@@@@@OOO\</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之摩尔投票法</title>
      <link href="/posts/3546wDa.html"/>
      <url>/posts/3546wDa.html</url>
      
        <content type="html"><![CDATA[<p><code>摩尔投票法</code>(Boyer–Moore majority vote algorithm)是一个比较冷门(useless)的算法,在算法竞赛中我们较多的用它来解决绝对众数的问题。如何找到n个数中的绝对众数，这里的绝对众数指的是这个数的数量占所有数的比例超过1/2。这个问题很直接的思路是可以直接排序做，但是时间复杂度并不优秀，并且如果要保留原序列，还需要额外的空间开销。不是一个很好的方式，这时候，我们就可以用摩尔投票的思想来解决这个问题。</p><p><img src="https://image.chiullian.cn/picture/20230116000450.png" alt=""></p><blockquote><p>摩尔投票法可以简单理解成不同元素相互抵消,每次从序列里选择两个不相同的数字抵消,最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个</p></blockquote><p>具有优秀的复杂度O(n),算法嘛在于优化</p><p>部分代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">0</span>) ans = x, cnt = <span class="number">1</span>; <span class="comment">// 如果擂台上没人,那么随便上一个</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ans == x) cnt ++; <span class="comment">// 如果擂台上有一个人且与之在一个阵营中那么擂台人数++</span></span><br><span class="line"><span class="keyword">else</span> cnt --; <span class="comment">// 如果擂台上的人与自己不在一个阵营那么那么从擂台上抵消一个</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第 86 场周赛</title>
      <link href="/posts/4119WA.html"/>
      <url>/posts/4119WA.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2794/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2794/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第86场周赛</div>            <div class="tag-link-sitename"> 氵</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="AcWing-4795-安全区域">AcWing 4795. 安全区域</h2><p>给定一个 n×n的方格棋盘和 m 个国际象棋中的车。</p><p>对于一个方格，如果该方格满足以下两个条件中的至少一个，则该方格会被车攻击到：</p><ul><li>该方格内有车。</li><li>至少有一个车与该方格位于同一行或同一列。</li></ul><p>现在，我们要将 m 个车逐个放入到棋盘中，其中第 i 个车放到棋盘的第 xi行第 yi 列的方格中。</p><p>车的编号从 1 到 m，行/列的编号从 1 到 n。</p><p>保证任意两个车不会放到同一个方格中。</p><p>对于 1≤i≤m，请你计算，将前 i 个车放入到棋盘中后，有多少个方格不会被车攻击到。</p><blockquote><p>不会被车攻击到的方格数量=(n−有车的行数)∗(n−有车的列数)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        <span class="type">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (a[x] == <span class="number">0</span>) &#123; <span class="comment">// 如果此行没有车车</span></span><br><span class="line">            r ++;</span><br><span class="line">            a[x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b[y] == <span class="number">0</span>) &#123; <span class="comment">// 如果此列没有车车</span></span><br><span class="line">            c ++;</span><br><span class="line">            b[y] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; (ll)(n - r) * (n - c) &lt;&lt; <span class="string">&#x27; &#x27;</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4796-删除序列">AcWing 4796. 删除序列</h2><p>给定一个长度为 n 的正整数序列 a1,a2,…,an。</p><p>你可以进行任意次删除操作。</p><p>每次删除操作分为两步：</p><ol><li>选择序列中的<strong>一个</strong>元素（不妨设其元素值为 x），并将这<strong>一个</strong>元素删除，这可以给你加 x 分。</li><li>将<strong>所有</strong>的<strong>元素值</strong>为 x−1 和 x+1 的元素（如果有的话）从序列中删除，这不会给你带来任何分数。</li></ol><p>请计算，通过删除操作，你可以获得的最大得分。</p><blockquote><p>记录数字出现的个数</p><p>转化成不能连续选,求最大值,一眼dp,简单状态机dp转移即可(权值是数字*个数)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mp[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x, mp[x] ++;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> f[N + <span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=N ; i ++) &#123;</span><br><span class="line">f[i][<span class="number">0</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">f[i][<span class="number">1</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + i * mp[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(f[N - <span class="number">1</span>][<span class="number">0</span>], f[N - <span class="number">1</span>][<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">// cout &lt;&lt; fixed &lt;&lt; setprecision(6);</span></span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023AcWing寒假每日一题</title>
      <link href="/posts/AC684.html"/>
      <url>/posts/AC684.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/punch_the_clock/2712/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/punch_the_clock/2712/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">2023AcWing寒假每日一题</div>            <div class="tag-link-sitename">owen0o0 </div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="2023年1月15日">2023年1月15日</h2><h3 id="4455-出行计划">4455. 出行计划</h3><p>考察知识:差分</p><blockquote><p>常识, 大家都做过核酸,假如需要24小时内有效的核酸结果证明,那么核酸结果出来<code>后</code>的有效区间[t - 24 + 1, t]</p><p>只要是这个区间之内出来结果的都是允许进的, 所有做差分,mp[t - 24 + 1]加1,mp[t + 1]减1,(ps:为啥是t + 1而不是t, 因为mp[t],时刻的核酸是合法的到t+1时刻的时候才过期),通过转换就变成了用i枚举mp下标, 仔细用脑子抽象一下就是算前缀和只要没减去1说明还在有效区间内, 详细请见代码:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x, y; i &lt; n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        mp[x + <span class="number">1</span>] --, mp[x - y + <span class="number">1</span>] ++; <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = -N + <span class="number">1</span>; i &lt;= N; i ++) mp[i] += mp[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, q; i &lt; m; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; q;</span><br><span class="line">        cout &lt;&lt; mp[q + k] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随写</title>
      <link href="/posts/65416B.html"/>
      <url>/posts/65416B.html</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>今日小雪~江苏的2023年第一场雪已经结束</p></div><blockquote><p>回归正常半个月了(22:00 - 7:00),作息阳康之后很少熬夜,对身体负责hhhh</p><p>主要是练科目三(0.0)教练叫8点前到, 不得不早睡早起~</p><p>随手,拍下路上的路景, 美丽冻人!</p></blockquote><div class="video"><video controls preload><source src='https://image.chiullian.cn/picture/D6DACFF68F21489ED675F50BE49CB60D.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><h3 id="栖凤园">栖凤园</h3><p><img src="https://image.chiullian.cn/picture/AFWAWF13.jpg" alt=""></p><p><img src="https://image.chiullian.cn/picture/B03BDFD15D0D5DAB66DF2A4B3670BC2C.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 生活琐碎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第 83 场周赛</title>
      <link href="/posts/QRQWR.html"/>
      <url>/posts/QRQWR.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/competition/problem_list/2714/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/competition/problem_list/2714/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第83场周赛</div>            <div class="tag-link-sitename"> 我是fw</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="AcWing-4785-奇偶">AcWing 4785. 奇偶</h2><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">set&lt;<span class="type">char</span>&gt; S;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : s) S.<span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sz</span>(S) &amp; <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;odd&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;even&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4786-闯关">AcWing 4786. 闯关</h2><blockquote><p>小贪心水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, b</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= m; i ++) cin &gt;&gt; x,  b.<span class="built_in">emplace_back</span>(a[x]);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">ans += <span class="built_in">accumulate</span>(<span class="built_in">all</span>(a), <span class="number">0</span>) - <span class="built_in">accumulate</span>(<span class="built_in">all</span>(b), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(b), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="type">int</span> t = ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : b) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans &gt; x) x = ans;</span><br><span class="line">ans += x;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4787-构造序列">AcWing 4787. 构造序列</h2><blockquote><p>水构造,我们先按照每两个之间是权值是构造出序列然后,新增一个m - (n &gt;&gt; 1) 和 (m - (n &gt;&gt; 1)) * 2, 有个小技巧就是先新增, 在新增的后面进行奇偶枚举,避免冲突</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> minn = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (m &lt; minn) <span class="keyword">return</span> <span class="built_in">void</span>(<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>));</span><br><span class="line">m -= (minn - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; m &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; m * <span class="number">2</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = m * <span class="number">2</span> + <span class="number">1</span>, j = <span class="number">1</span>; j &lt; minn; i += <span class="number">2</span>, j ++) </span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) cout &lt;&lt; <span class="number">99999989</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>阳完脑子都傻了, 唉~</p><p>新年愿望让自己变机灵点~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第80场周赛</title>
      <link href="/posts/65Wddd5.html"/>
      <url>/posts/65Wddd5.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/competition/problem_list/2664/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/competition/problem_list/2664/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第80场周赛</div>            <div class="tag-link-sitename"> 学到了记忆化dfs</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="AcWing-4725-末尾字母">AcWing 4725. 末尾字母</h2><p>给定一个由大小写字母、空格和问号组成的字符串。</p><p>请你判断字符串中的最后一个<strong>字母</strong>是否是元音字母。</p><p>我们认为元音字母共有 66 个，分别为：$A$、$E$、$I$、$O$、$U$、$Y$（当然还有它们的小写）。</p><h4 id="输入格式">输入格式</h4><p>一个由大小写字母、空格和问号组成的字符串。</p><p>保证问号在字符串中恰好出现一次，且一定出现在最后。</p><p>字符串中至少包含一个字母。</p><h4 id="输出格式">输出格式</h4><p>如果字符串中的最后一个<strong>字母</strong>是元音字母，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><p>注意，我们问的是最后一个字母，而不是最后一个字符，空格和问号不算作字母。</p><h4 id="数据范围">数据范围</h4><p>所有测试点满足，输入字符串的长度范围 [2,100][2,100]。</p><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isalpha</span>(s.<span class="built_in">back</span>())) &#123;</span><br><span class="line">s.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">s[<span class="built_in">sz</span>(s) - <span class="number">1</span>] = <span class="built_in">toupper</span>(s[<span class="built_in">sz</span>(s) - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">back</span>() == <span class="string">&#x27;A&#x27;</span> || s.<span class="built_in">back</span>() == <span class="string">&#x27;E&#x27;</span> || s.<span class="built_in">back</span>() == <span class="string">&#x27;I&#x27;</span> || s.<span class="built_in">back</span>() == <span class="string">&#x27;O&#x27;</span> || s.<span class="built_in">back</span>() == <span class="string">&#x27;U&#x27;</span> || s.<span class="built_in">back</span>() == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4726-寻找数字">AcWing 4726. 寻找数字</h2><p>给定一个正整数 $n$，请你找到一个正整数 $x$，要求：</p><ol><li>$x≥n$</li><li>$x$ 的各个数位均不包含 $4$ 和 $7$ 以外的数字，且 $x$ 中包含的 $4$ 的数量与 $7$ 的数量恰好相等。</li><li>满足前两个条件的前提下，$x$ 应尽可能小。</li></ol><h4 id="输入格式-2">输入格式</h4><p>一个正整数 $n$。</p><h4 id="输出格式-2">输出格式</h4><p>一个正整数，表示 $x$。</p><blockquote><p>二进制暴力枚举所有情况即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string s = <span class="built_in">to_string</span>(n);</span><br><span class="line">string res = <span class="string">&quot;999999999999&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sz</span>(s) &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> len = (<span class="built_in">sz</span>(s) + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++) ans = ans + <span class="string">&quot;4&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++) ans = ans + <span class="string">&quot;7&quot;</span>;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">sz</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; m; i ++) &#123;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) ans = ans + <span class="string">&quot;4&quot;</span>, cnt ++;</span><br><span class="line"><span class="keyword">else</span> ans = ans + <span class="string">&quot;7&quot;</span>, cnt --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cnt &amp;&amp; ans &gt;= s) res = <span class="built_in">min</span>(res, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res == <span class="string">&quot;999999999999&quot;</span>) &#123;</span><br><span class="line"><span class="type">int</span> len = (<span class="built_in">sz</span>(s) + <span class="number">2</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++) ans = ans + <span class="string">&quot;4&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++) ans = ans + <span class="string">&quot;7&quot;</span>;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4727-摆放棋子">AcWing 4727. 摆放棋子</h2><p>给定 $n1$ 个<strong>完全相同</strong>的黑色棋子和 $n2$ 个<strong>完全相同</strong>的白色棋子。</p><p>请你将所有棋子摆成一排。</p><p>在所有棋子都摆放好后，需满足：</p><ol><li>不得有<strong>超过</strong> $k1$ （即大于 $k1$）个黑色棋子连续相邻的排在一起。</li><li>不得有<strong>超过</strong> $k2$（即大于 $k2$）个白色棋子连续相邻的排在一起。</li></ol><p>请问一共有多少种不同的摆放方法。</p><p>由于结果可能很大，你只需要输出对 $1e8$ 取模后的结果。</p><h4 id="输入格式-3">输入格式</h4><p>共一行，包含 $4$ 个整数 $n1,n2,k1,k2$。</p><h4 id="输出格式-3">输出格式</h4><p>输出满足要求的摆放方法数量对 $10^8$ 取模后的结果。</p><h4 id="数据范围-2">数据范围</h4><p>前 $4$ 个测试点满足 $1≤n1,n2≤10$。<br>所有测试点满足 $1≤n1,n2≤10$，$1≤k1,k2≤10$。</p><blockquote><p>dfs记忆化,记录这一步走黑的还是白的以及黑白各连续的个数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">long</span> <span class="type">long</span> v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = v % mod + mod;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= mod)</span><br><span class="line">            v %= mod;</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(p &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= mod) &#123;</span><br><span class="line">            p %= (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Mint a = *<span class="keyword">this</span>, result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &amp; <span class="number">1</span>) result *= a;</span><br><span class="line">            a *= a, p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> += (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x += other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= mod) x -= mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> -= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x -= other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> *= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x = (<span class="type">long</span> <span class="type">long</span>)(x) * other.x % mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> /= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= other.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x != other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span> - () <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span> ? <span class="number">0</span> : mod - x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> ++ () &#123;</span><br><span class="line">        x = x == mod - <span class="number">1</span> ? <span class="number">0</span> : x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>--() &#123;</span><br><span class="line">        x = x == <span class="number">0</span> ? mod - <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) /= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, kn, km;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; kn &gt;&gt; km;</span><br><span class="line"><span class="type">static</span> Mint f[<span class="number">105</span>][<span class="number">105</span>][<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="comment">// 黑棋, 白棋, 黑棋相邻的个数, 白棋相邻的个数</span></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> kx, <span class="type">int</span> ky) -&gt; <span class="type">int</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x &amp;&amp; !y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (~f[x][y][kx][ky].<span class="built_in">val</span>()) <span class="keyword">return</span> f[x][y][kx][ky].<span class="built_in">val</span>();</span><br><span class="line">Mint res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &amp;&amp; kx + <span class="number">1</span> &lt;= kn) res += <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, kx + <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 走黑</span></span><br><span class="line"><span class="keyword">if</span> (y &amp;&amp; ky + <span class="number">1</span> &lt;= km) res += <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, <span class="number">0</span>, ky + <span class="number">1</span>); <span class="comment">// 走白</span></span><br><span class="line">f[x][y][kx][ky] = res;</span><br><span class="line"><span class="keyword">return</span> res.<span class="built_in">val</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">dfs</span>(n, m, <span class="number">0</span>, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南宁周赛-八-2022年下(最终篇)</title>
      <link href="/posts/68415W.html"/>
      <url>/posts/68415W.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://oj.gxu.edu.cn/contest/518">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/oj.gxu.edu.cn/contest/518.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">南宁周赛四链接</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>描述</p><h2 id="小民摘菜">小民摘菜</h2><p>小民被他的朋友邀请到菜园里摘菜，但是他的朋友设了一些规则想阻碍小民采摘的速度。菜园是一个n×m个格子的矩阵，小民只能向右和向下, 起点是左上角, 每个格子都种着一株菜，每株菜都有相应的营养价值。想带走这些菜必须要按以下的规则来采摘：</p><ol><li><p>小民到了某个菜，这个菜比之前拿的所有的菜的营养价值都高的话，则小民可以将这株菜摘走。</p></li><li><p>小民到了某个菜，可以选择不摘。小民到了n<em>×</em>m*后，若采摘的数目恰好是k株，那小民可以带这些菜回家，否则小民只能俩手空空的回家了。</p></li></ol><p>请你帮小民计算，他有多少种能采摘到k<em>k</em>株菜的行动方案？</p><p>输入</p><p>第一行3个整数,n,m,k，含义见题目描述。<br>接下来n行，每行有m个整数Ci用来描述菜园每个格子中菜的营养价值。</p><p>数据范围<br>$1 \le n,m \le50$<br>$1 \le k \le12$<br>$0 \le Ci \le 12$</p><p>输出</p><p>输出一个整数，表示正好取k株菜的行动方案数。<br>该数字可能很大，输出它对1000000007取模的结果。</p><p>输入样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 2</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><p>输出样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>输入样例 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3 2</span><br><span class="line">1 2 3</span><br><span class="line">2 1 3</span><br></pre></td></tr></table></figure><p>输出样例 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><blockquote><p>背包模型dp,还有一些细节要处理,初始化:第一个选0个且价值为0是一个合法方案, 以及选第一个是合法方案</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">    cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">long</span> <span class="type">long</span> v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = v % mod + mod;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= mod)</span><br><span class="line">            v %= mod;</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(p &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= mod) &#123;</span><br><span class="line">            p %= (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Mint a = *<span class="keyword">this</span>, result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &amp; <span class="number">1</span>) result *= a;</span><br><span class="line">            a *= a, p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> += (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x += other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= mod) x -= mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> -= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x -= other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> *= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x = (<span class="type">long</span> <span class="type">long</span>)(x) * other.x % mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> /= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= other.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x != other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span> - () <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span> ? <span class="number">0</span> : mod - x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> ++ () &#123;</span><br><span class="line">        x = x == mod - <span class="number">1</span> ? <span class="number">0</span> : x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>--() &#123;</span><br><span class="line">        x = x == <span class="number">0</span> ? mod - <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) /= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Mint f[<span class="number">55</span>][<span class="number">55</span>][<span class="number">15</span>][<span class="number">15</span>]; <span class="comment">// x, y, k, val</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">            cin &gt;&gt; a[i][j], a[i][j] ++;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][a[<span class="number">1</span>][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= n; x ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= m; y ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= k; z ++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> o = <span class="number">0</span>; o &lt; <span class="number">14</span>; o ++) &#123;</span><br><span class="line">                    f[x][y][z][o] += f[x - <span class="number">1</span>][y][z][o]; <span class="comment">// 不拿</span></span><br><span class="line">                    f[x][y][z][o] += f[x][y - <span class="number">1</span>][z][o];</span><br><span class="line">                    <span class="keyword">if</span> (z - <span class="number">1</span> &lt; <span class="number">0</span> ||a[x][y] != o) <span class="keyword">continue</span>; </span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; o; t ++) &#123; <span class="comment">// 拿</span></span><br><span class="line">                        f[x][y][z][o] += f[x - <span class="number">1</span>][y][z - <span class="number">1</span>][t];</span><br><span class="line">                        f[x][y][z][o] += f[x][y - <span class="number">1</span>][z - <span class="number">1</span>][t];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mint ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i ++) ans += f[n][m][k][i];</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">val</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第 78 场周赛</title>
      <link href="/posts/96542.html"/>
      <url>/posts/96542.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2622/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2622/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第78场周赛</div>            <div class="tag-link-sitename"> 我是fw</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="商品种类">商品种类</h2><p>货架中摆放着 n 件商品，每件商品都有两个属性：名称和产地。</p><p>当且仅当两件商品的名称和产地都相同时，两件商品才视为同一种商品。</p><p>请你统计，货架中一共有多少种不同的商品。</p><blockquote><p>氵,哈希一下即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">map&lt;PII, <span class="type">int</span>&gt; mp;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i ++) &#123;</span><br><span class="line">string s, p;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; p;</span><br><span class="line">mp[&#123;s, p&#125;] ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; mp.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><p>给定一个由小写字母构成的字符串 $s$。</p><p>如果字符串中存在<strong>两个</strong>字母相同且相邻，则称它们为相同连续字母对。</p><p>我们不希望 $s$ 中存在相同连续字母对。</p><p>所以，每当在 $s$ 中发现一个相同连续字母对时，就应当将这对字母从 $s$ 中删除，如果删除某一对后，出现了新的相同连续字母对，则新的对也应当被删除。</p><p>总之，最终得到的字符串中不能存在相同连续字母对。</p><p>输出最终得到的字符串。</p><p>可以证明，不论按何种顺序删除相同连续字母对，最终得到的字符串都是一样的。</p><p>s长度小于1e5</p><blockquote><p>类似用一个栈去维护答案串,如果进入的与栈顶相同,那么就消除</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s, ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> st[N];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (tt &gt;= <span class="number">1</span> &amp;&amp; st[tt] == s[i]) tt --;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tt == <span class="number">0</span> || (tt &gt;= <span class="number">1</span> &amp;&amp; st[tt] != s[i])) st[++ tt] = s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tt; i ++) cout &lt;&lt; st[i];</span><br><span class="line"><span class="comment">// cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4721-排队">AcWing 4721. 排队</h2><blockquote><p>这题能学到很多东西,二分单调栈,不一样树状数组+离散化, 线段树</p></blockquote><p>$n$ 个小朋友排成一排，从左到右依次编号为 $1∼n$。</p><p>第 i 个小朋友的身高为 $hi$。</p><p>虽然队伍已经排好，但是小朋友们对此并不完全满意。</p><p>对于一个小朋友来说，如果存在其他小朋友身高比他更矮，却站在他右侧的情况，该小朋友就会感到不满。</p><p>每个小朋友的不满程度都可以量化计算，具体来说，对于第 i 个小朋友：</p><ul><li>如果存在比他更矮且在他右侧的小朋友，那么他的不满值等于其中最靠右的那个小朋友与他之间的小朋友数量。</li><li>如果不存在比他更矮且在他右侧的小朋友，那么他的不满值为 −1。</li></ul><p>请你计算并输出每个小朋友的不满值。</p><p>注意，第 1 个小朋友和第 2 个小朋友之间的小朋友数量为 0，第 1 个小朋友和第 4 个小朋友之间的小朋友数量为 2。</p><p>数据范围1e5, 采取O(nlogn)及以下的算法</p><h3 id="解法1">解法1,</h3><blockquote><p>枚举当前到第几个,然后,判断后面比自己矮的下标最大的,</p><p>10 8 5 3 2</p><p>可以发现在自己前面必自己大的数都没有意义因为总能到后面下标大的点</p><p>所以就变成的单调的栈, 二分比自己小的最远的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">h</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;x : h) cin &gt;&gt; x;</span><br><span class="line">    f[n - <span class="number">1</span>] = h[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) f[i] = <span class="built_in">min</span>(f[i + <span class="number">1</span>], h[i]);</span><br><span class="line">    <span class="comment">//3 3 3 3 45 45 二分小于h[i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (f[mid] &lt; h[i]) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(<span class="number">-1</span>, r - i - <span class="number">1</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法2">解法2</h3><blockquote><p>线段树写法, 每次枚举到a[i] 就把a[i]更新为INF这样就不会影响后面查询比当前矮的, 然后利用线段树查询最靠右边的比自己矮的,主要是写线段树的查询操做, 因为线段树是拆分区间的查询,所以查询的时候先查右边的,这样查到&lt;当前的第一个就是最靠右的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 线段树</span></span></span><br><span class="line"><span class="string"><span class="meta">struct Segment_Tree &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    struct Node &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        int l, r;</span></span></span><br><span class="line"><span class="string"><span class="meta">        int val; //</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125; tr[N &lt;&lt; 2];</span></span></span><br><span class="line"><span class="string"><span class="meta">    int a[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">    void pushup(Node &amp;u, Node &amp;l, Node &amp;r) &#123; //</span></span></span><br><span class="line"><span class="string"><span class="meta">        // do sth</span></span></span><br><span class="line"><span class="string"><span class="meta">        u.val = min(l.val, r.val);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    void inline pushup(int u) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        pushup(tr[u], tr[u &lt;&lt; 1], tr[u &lt;&lt; 1 | 1]);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    void build(int u, int l, int r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        tr[u].r = r, tr[u].l = l;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if(l == r) return tr[u].val = a[l], void();</span></span></span><br><span class="line"><span class="string"><span class="meta">        int mid = (l + r) &gt;&gt; 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        build(u &lt;&lt; 1, l, mid);</span></span></span><br><span class="line"><span class="string"><span class="meta">        build(u &lt;&lt; 1 | 1, mid + 1, r);</span></span></span><br><span class="line"><span class="string"><span class="meta">        pushup(u);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    </span></span></span><br><span class="line"><span class="string"><span class="meta">    void modify(int u, int x, int v) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (tr[u].l == x &amp;&amp; tr[u].r == x) </span></span></span><br><span class="line"><span class="string"><span class="meta">            return tr[u].val = tr[u].val + v, void();</span></span></span><br><span class="line"><span class="string"><span class="meta">        int mid = (tr[u].l + tr[u].r) &gt;&gt; 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (x &lt;= mid) modify(u &lt;&lt; 1, x, v);</span></span></span><br><span class="line"><span class="string"><span class="meta">        else modify(u &lt;&lt; 1 | 1, x, v);</span></span></span><br><span class="line"><span class="string"><span class="meta">        pushup(u);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    </span></span></span><br><span class="line"><span class="string"><span class="meta">    Node query(int u, int l, int r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) return tr[u];</span></span></span><br><span class="line"><span class="string"><span class="meta">        int m = tr[u].l + ((tr[u].r - tr[u].l) &gt;&gt; 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">        if(r &lt;= m) return query(u &lt;&lt; 1, l, r);</span></span></span><br><span class="line"><span class="string"><span class="meta">        else if(l &gt; m) return query(u &lt;&lt; 1 | 1, l, r);</span></span></span><br><span class="line"><span class="string"><span class="meta">        else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">            Node ret;</span></span></span><br><span class="line"><span class="string"><span class="meta">            Node ret_left = query(u &lt;&lt; 1, l, r);</span></span></span><br><span class="line"><span class="string"><span class="meta">            Node ret_right = query(u &lt;&lt; 1 | 1, l, r);</span></span></span><br><span class="line"><span class="string"><span class="meta">            pushup(ret, ret_left, ret_right);</span></span></span><br><span class="line"><span class="string"><span class="meta">            return ret;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    // 查询</span></span></span><br><span class="line"><span class="string"><span class="meta">    int ask(int u, int l, int r, int mubiao) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (l == r) return l;</span></span></span><br><span class="line"><span class="string"><span class="meta">        int mid = l + r &gt;&gt; 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (tr[u &lt;&lt; 1 | 1].val &lt; mubiao) return ask(u &lt;&lt; 1 | 1,  mid + 1,  r, mubiao);</span></span></span><br><span class="line"><span class="string"><span class="meta">        else return ask(u &lt;&lt; 1, l, mid, mubiao);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Segment_Tree st;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    int n; cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">    vector&lt;int&gt; h(n), f(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">    vector&lt;int&gt; ans(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">    </span></span></span><br><span class="line"><span class="string"><span class="meta">    st.build(1, 1, n);</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 1; i &lt;= n; i ++) &#123;// 询问小于h[i] 最右边那个</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (st.query(1, 1, n).val &gt; st.a[i]) cout &lt;&lt; -1 &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">        else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">            int t = st.ask(1, 1, n, st.a[i]); </span></span></span><br><span class="line"><span class="string"><span class="meta">            cout &lt;&lt; max(-1, t - i - 1) &lt;&lt; &quot;</span> <span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">        st.modify(1, i, INF);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">    cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">    int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">    // cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">    return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="解法三">解法三</h3><blockquote><p>666</p><p>用树状数组, 记录比他小的下标最大的那一个, 树状数组记录身高数组下标,二树状数组的下标就代表值, 树状数组不像传统的求和而是求最大下标,所以,每次查询就是小于当前身高下标最大的那一个</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; alls;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct BIT &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    int tree[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">    void add(int x, int v) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        for (; x &lt;= N; x += (x &amp; (-x)))</span></span></span><br><span class="line"><span class="string"><span class="meta">            tree[x] = max(v, tree[x]);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    int query(int x, int res = -1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        for (; x; x -= (x &amp; (-x)))</span></span></span><br><span class="line"><span class="string"><span class="meta">            res = max(res, tree[x]);</span></span></span><br><span class="line"><span class="string"><span class="meta">        return res;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;tr;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int get(const int &amp;x) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return lower_bound(all(alls), x) - alls.begin() + 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    int n; cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">    vector&lt;int&gt; h(n), f(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int &amp;x : h) cin &gt;&gt; x, alls.emplace_back(x);</span></span></span><br><span class="line"><span class="string"><span class="meta">    sort(all(alls));</span></span></span><br><span class="line"><span class="string"><span class="meta">    alls.erase(unique(all(alls)), alls.end());</span></span></span><br><span class="line"><span class="string"><span class="meta">    vector&lt;int&gt; ans(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = n - 1; i &gt;= 0; i --) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        int t = get(h[i]);</span></span></span><br><span class="line"><span class="string"><span class="meta">        // 查询比他小的小标最大的,</span></span></span><br><span class="line"><span class="string"><span class="meta">        int x = tr.query(t - 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">        if (x &lt; i) ans[i] = -1; // 没有比他小的</span></span></span><br><span class="line"><span class="string"><span class="meta">        else ans[i] = x - i - 1; // </span></span></span><br><span class="line"><span class="string"><span class="meta">        tr.add(t, i);</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 0; i &lt; n; i ++) cout &lt;&lt; ans[i] &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">    cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">    int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">    // cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">    return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第77场周赛</title>
      <link href="/posts/654684.html"/>
      <url>/posts/654684.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2605/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2605/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第77场周赛</div>            <div class="tag-link-sitename"> 有点困难T_T</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="AcWing-4716-进球">AcWing 4716. 进球</h2><p>两支足球队之间展开了一场足球赛。</p><p>整场比赛双方一共打进了 $n$ 个进球，进球多的一方将收获最终的胜利。</p><p>请你根据进球纪录，判断哪支球队最终获胜。</p><p>保证不存在平局。</p><p><strong>数据范围</strong></p><p>前 $5$ 个测试点满足 $1≤n≤51≤n≤5$。<br>所有测试点满足 $1≤n≤100$。</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">ABC</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABC</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">A</span><br><span class="line">ABA</span><br><span class="line">ABA</span><br><span class="line">A</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure><blockquote><p><code>氵</code>题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i +=<span class="number">1</span>) &#123;</span><br><span class="line">string x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">mp[x] ++;</span><br><span class="line">&#125; </span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : mp) &#123;</span><br><span class="line">a.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(y, x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(a), [](pair&lt;<span class="type">int</span>, string&gt; x, pair&lt;<span class="type">int</span>, string&gt; y) &#123;</span><br><span class="line"><span class="keyword">return</span> x.fi &gt; y.fi; </span><br><span class="line">&#125;);</span><br><span class="line">cout &lt;&lt; a[<span class="number">0</span>].se &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4717-环形队伍">AcWing 4717. 环形队伍</h2><p>n 个小朋友<strong>围成一圈</strong>，按顺时针顺序依次编号为 1∼n。</p><p>有 7 种颜色的帽子，每种颜色的帽子的数量都足够多。</p><p>7 种颜色不妨表示为 <code>R</code>、<code>O</code>、<code>Y</code>、<code>G</code>、<code>B</code>、<code>I</code>、<code>V</code>。</p><p>现在，要给每个小朋友都发一个帽子，要求：</p><ul><li>每种颜色的帽子都至少有一个小朋友戴。</li><li>任意四个<strong>相邻</strong>小朋友的帽子颜色都各不相同。</li></ul><p>请你提供一种分发帽子的方案。</p><p><strong>输入格式</strong></p><p>共一行，包含一个整数 n。</p><p><strong>输出格式</strong></p><p>输出一行长度为 n 的由代表颜色的字符组成的字符串，其中的第 i 个字符表示第 i 个小朋友分到的帽子的颜色。</p><p>如果方案不唯一，输出任意合理方案均可。</p><p><strong>数据范围</strong></p><p>所有测试点满足 $7≤n≤100$。</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROYGRBIV</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROYGBIVGBIVYG</span><br></pre></td></tr></table></figure><blockquote><p>先按照<code>R</code>、<code>O</code>、<code>Y</code>、<code>G</code>、<code>B</code>、<code>I</code>、<code>V</code>的顺序全部列出来, 然后看后面四个是否合法,不合法就换成他前面的那个数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string s = <span class="string">&quot;ROYGBIV&quot;</span> ,ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">ans += s[i % <span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">4</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j ++) </span><br><span class="line"><span class="keyword">if</span> (ans[(i + j) % n] == ans[i]) ans[i] = ans[i - <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4718-摆放棋子">AcWing 4718. 摆放棋子</h2><p>给定一个 $n×m$ 的国际象棋棋盘（即一个 n×m 的方格矩阵）。</p><p>我们知道传统国际象棋中，主教（象）的行走规则是只能斜走，格数不限，但不可转向。</p><p>现在，我们对主教进行了修改，不妨称加强后的主教为大主教。</p><p>大主教仍然只能斜走，格数不限，但是当其走到棋盘边缘的方格时，它可以发生反射并继续移动，<strong>注意，如果没有走到棋盘边缘，则不能自行改变移动方向。</strong></p><p>更具体地说，当它到达棋盘边（但并非角）上的方格时，它可以将移动方向改变 90 度并继续移动，当它到达棋盘角上的方格时，它可以将移动方向改变 180 度并继续移动。</p><p><img src="https://cdn.acwing.com/media/article/image/2022/10/18/19_058248884e-1.png" alt="1.png"></p><p>请你计算，棋盘中共有多少种不同的移动轨迹。</p><p><strong>输入格式</strong></p><p>共一行，包含两个整数 $n,m$。</p><p><strong>输出格式</strong></p><p>一个整数，表示棋盘中移动轨迹的数量。</p><p><strong>数据范围</strong></p><p>前 $6$ 个测试点满足 $2≤n,m≤4$。<br>所有测试点满足 $2≤n,m≤10^6$。</p><p><strong>输入样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>输入样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure><p><strong>输出样例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><p>一个重要的需要证明, 在边界上当一个点从一个右上(右下等)走就一定会从对立的方向回来,还有一点就是,一个轨迹的碰到的端点都是唯一的,即每一个四周的点的都唯一属于一个轨迹,不属于两个.</p><p>所以采用并查集, 现将周围的一圈的所有的点看成$(n + m) * 2 - 4$个集合.然后枚举枚举最上面和最下面那两行能到的左右端的点的坐标然后合并能到的左右两段的点.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span> (y == m) <span class="keyword">return</span> m + x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x == n) <span class="keyword">return</span> n + m - <span class="number">1</span> + m - y;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">1</span>) <span class="keyword">return</span> n + m - <span class="number">1</span> + n + m - x - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * (n + m) - <span class="number">4</span>; i += <span class="number">1</span>) p[i] = i;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; find = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; merge = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">void</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))<span class="keyword">return</span>;</span><br><span class="line">p[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="comment">// 往左</span></span><br><span class="line"><span class="keyword">if</span> (i &lt;= n) <span class="built_in">merge</span>(<span class="built_in">get</span>(<span class="number">1</span>, i), <span class="built_in">get</span>(i, <span class="number">1</span>)), <span class="built_in">merge</span>(<span class="built_in">get</span>(n, i), <span class="built_in">get</span>(n - i + <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">merge</span>(<span class="built_in">get</span>(<span class="number">1</span>, i), <span class="built_in">get</span>(n, i - n + <span class="number">1</span>)), <span class="built_in">merge</span>(<span class="built_in">get</span>(n, i), <span class="built_in">get</span>(<span class="number">1</span>, i - n + <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 往右</span></span><br><span class="line"><span class="keyword">if</span> (n + i - <span class="number">1</span> &gt;= m) <span class="built_in">merge</span>(<span class="built_in">get</span>(<span class="number">1</span>, i), <span class="built_in">get</span>(m - i + <span class="number">1</span>, m)), <span class="built_in">merge</span>(<span class="built_in">get</span>(n, i), <span class="built_in">get</span>(n - (m - i + <span class="number">1</span>) + <span class="number">1</span>, m));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">merge</span>(<span class="built_in">get</span>(<span class="number">1</span>, i), <span class="built_in">get</span>(n, i + n - <span class="number">1</span>)), <span class="built_in">merge</span>(<span class="built_in">get</span>(n, i), <span class="built_in">get</span>(<span class="number">1</span>, i + n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * (n + m) - <span class="number">4</span>; i ++) </span><br><span class="line"><span class="keyword">if</span> (p[i] == i) ans ++;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>补AcWing周赛题</title>
      <link href="/posts/20193.html"/>
      <url>/posts/20193.html</url>
      
        <content type="html"><![CDATA[<h1>第 72 场周赛,T3最小移动距离</h1><p><a href="https://www.acwing.com/problem/content/4629/">题目链接</a></p><p>考察知识点:</p><blockquote><p>基环树, 并查集, 思维, 图论, 找环, 数学</p></blockquote><p>平面上有 n 个点，编号为 1∼n。</p><p>对于每个点 i（1≤i≤n），都存在一条从点 i 到点 $ai（1≤ai≤n，ai 可以等于 i）$的有向边。</p><p>所有边的长度均为 1。</p><p>请你判断是否存在一个最小移动距离 t（t≥1），使得：</p><p>我们规定，如果从点 u 出发，移动 t 单位长度距离后，到达点 v，就称点 v 是点 u 的目标点。注意，一个点的目标点也可能是它自己。<br>对于图中的每个点 x，如果点 y 是点 x 的目标点，则点 x 也必须是点 y 的目标点。<br>如果存在这样的 t，请你输出 t 的最小可能值，否则请你输出 -1。</p><p>输入格式<br>第一行包含一个整数 n。</p><p>第二行包含 n 个整数 a1,a2,…,an。</p><p>输出格式<br>如果存在满足条件的 t（t≥1），则输出一个正整数，表示 t 的最小可能值。</p><p>否则输出 -1。</p><p>数据范围<br>前 3 个测试点满足 $1≤n≤4$。<br>所有测试点满足 $1≤n≤100，1≤ai≤n$。</p><blockquote><p>判断这些点是否都能组成一些的环，如果是就输出这些环的长度的最小公倍数, 要想互相抵达,连通图, 所以每个点的入度肯定是1, 即:是求所有连通块(每个连通块是强连通图)内点数个数的最小公倍数, 可以用并查集去维护是否是强连通,也可以dfs找环(从一个点能否再次走到这个点)</p></blockquote><p><strong>并查集版本:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, res = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">din</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> p[N], siz[N];</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; find = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> merge = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line"><span class="type">int</span> fa = <span class="built_in">find</span>(x), fb = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (fa == fb) <span class="keyword">return</span>;</span><br><span class="line">siz[fb] += siz[fa], p[fa] = fb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> same = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i] = i, siz[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">din[x] ++;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">same</span>(i, x)) <span class="built_in">merge</span>(i, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">if</span> (din[i] != <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">void</span>(<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">if</span> (p[i] == i) res = res * (siz[i] &amp; <span class="number">1</span> ? siz[i] : siz[i] &gt;&gt; <span class="number">1</span>) / __gcd(res, siz[i] &amp; <span class="number">1</span> ? siz[i] : siz[i] &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>dfs版本:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">din</span><span class="params">(n + <span class="number">1</span>)</span>, ans</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i ++) cin &gt;&gt; x, e[i].<span class="built_in">emplace_back</span>(x), din[i] ++, din[x] ++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">if</span> (din[i] != <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">void</span>(<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>));</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> cnt) &#123;</span><br><span class="line">st[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (st[v]) <span class="keyword">return</span> <span class="built_in">void</span>(ans.<span class="built_in">emplace_back</span>(cnt &amp; <span class="number">1</span> ? cnt : cnt / <span class="number">2</span>));</span><br><span class="line"><span class="built_in">dfs</span>(v, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">if</span> (!st[i]) <span class="built_in">dfs</span>(i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = ans.<span class="built_in">back</span>();</span><br><span class="line">ans.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : ans) res = res * x / __gcd(res, x);</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第76场周赛</title>
      <link href="/posts/63567.html"/>
      <url>/posts/63567.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/introduction/2589/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/introduction/2589/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第76场周赛</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1>反转字符串</h1><p>给定两个由小写字母构成的字符串 s 和 t，请你判断 s 的反转字符串是不是 t。</p><h4 id="输入格式">输入格式</h4><p>第一行包含字符串 s。</p><p>第二行包含字符串 t。</p><h4 id="输出格式">输出格式</h4><p>如果 s 的反转字符串是 t 则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h4 id="数据范围">数据范围</h4><p>所有测试点满足 $1≤|s|,|t|≤100$。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code</span><br><span class="line">edoc</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h4 id="输入样例2：">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abb</span><br><span class="line">aba</span><br></pre></td></tr></table></figure><h4 id="输出样例2：">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="输入样例3：">输入样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code</span><br><span class="line">code</span><br></pre></td></tr></table></figure><h4 id="输出样例3：">输出样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><blockquote><p>大水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s, p;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; p;</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">all</span>(s));</span><br><span class="line"><span class="keyword">if</span> (s == p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>数对</h1><p>给定一个长度为 $N$ 的字符串 $S$，字符串中的字符下标从左到右依次为 $1∼N$。</p><p>请你计算共有多少个数对 $(i,j)$能够同时满足以下条件：</p><ol><li>$1≤i,j≤N$</li><li>$S[i]=S[j]$</li></ol><p>注意，(2,1) 和 (1,2) 视为两个不同的数对。</p><h4 id="输入格式-2">输入格式</h4><p>共一行，一个字符串 SS。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示满足条件的数对数量。</p><h4 id="数据范围-2">数据范围</h4><p>前三个测试点满足 $1≤N≤10$。<br>所有测试点满足 $1≤N≤10^5$，字符串中只包含小写字母和数字。</p><h4 id="输入样例1：-2">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">great10</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-2">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-2">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-2">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><blockquote><p>只需要枚举字母出现的次数然后相乘即可,</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line">mp[s[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : mp) &#123;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">1</span>)ans += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans += y * y;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>构造数组</h1><p>请你构造一个长度为 $n$ 的<strong>正整数</strong>数组 $a1,a2,…,an$。</p><p>我们会给出一个长度为 $n−1$ 的由 <code>&lt;</code>、<code>&gt;</code>、<code>=</code> 组成的字符串 $s1s2…sn−1$ 用于约束你的构造：</p><ul><li>如果 $si$ 为 <code>&lt;</code>，则表示你构造的数组需满足 $ai&lt;ai+1$。</li><li>如果 $si$ 为 <code>&gt;</code>，则表示你构造的数组需满足 $ai&gt;ai+1$。</li><li>如果 $si$ 为 <code>=</code>，则表示你构造的数组需满足 $ai=ai+1$。</li></ul><p>你构造的正整数数组需满足上述约束的同时，保证 $a1+a2+…+an$ 的值尽可能小。</p><p>请你输出满足条件的正整数数组。</p><h4 id="输入格式-3">输入格式</h4><p>第一行包含整数 $n$。</p><p>第二行包含字符串$s1s2…sn−1$。</p><h4 id="输出格式-3">输出格式</h4><p>共一行，输出 $a1,a2,…,an$。</p><h4 id="数据范围-3">数据范围</h4><p>前 3 个测试点满足 $2≤n≤6$。<br>所有测试点满足 $2≤n≤1000$。</p><h4 id="输入样例1：-3">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">&gt;&lt;&gt;&lt;</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-3">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 1 2 1 2</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-3">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">=&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-3">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 2 3 4</span><br></pre></td></tr></table></figure><blockquote><p>我是zz,枚举每一位的然后看每一位的左右限制,那个大用哪个,因为要满足两边,</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] == <span class="string">&#x27;&gt;&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (s[j] == <span class="string">&#x27;&lt;&#x27;</span>) l ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] == <span class="string">&#x27;&lt;&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (s[j] == <span class="string">&#x27;&gt;&#x27;</span>) r ++;</span><br><span class="line"><span class="comment">// debug(s[j], r, i);</span></span><br><span class="line">&#125;</span><br><span class="line">ans[i] = <span class="built_in">max</span>(l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南宁周赛-四-2022年下</title>
      <link href="/posts/26481.html"/>
      <url>/posts/26481.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://oj.gxu.edu.cn/contest/493">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/oj.gxu.edu.cn/contest/493.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">南宁周赛四链接</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>第一次$Rank1$, 也可能是最后一次了, ┭┮﹏┭┮</p><p><img src="https://image.chiullian.cn/picture/20221104215806.png" alt=""></p><h1>小民的净化校园行动</h1><p><strong>描述：</strong></p><p>小民总能够听到他人的不文明用语, 所以小民想让你开发一个程序, 希望你可以把原话中不文明用语全部剔除掉.</p><p>要求必须从前往后删除不文明用语，如果删除过程中出现不文明用语，就继续删除。</p><p><strong>输入</strong></p><p>第一行一个字符串$str1$，代表小民给你的话语<br>第二行一个字符串$str2$，代表要在$str1$中剔除的脏话<br>$1 \le len1, len2 \le 10^3$</p><p><strong>输出</strong></p><p>输出一个字符串, 表示剔除脏话后的文明用语.</p><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lwjdazhensuai</span><br><span class="line">suai</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lwjdazhen</span><br></pre></td></tr></table></figure><blockquote><p>用STL的string模拟即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">string p;</span><br><span class="line">cin &gt;&gt; p;</span><br><span class="line"><span class="keyword">while</span> (s.<span class="built_in">find</span>(p) != string::npos) &#123;</span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(p), <span class="built_in">sz</span>(p));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>小民收到的神秘来信</h1><p><strong>描述</strong></p><p>小民最近收到一封奇怪的信, 信中大意是说, 信中内容有一些数字, 如果小民能够找出所有的数字并将它们全部加起来, 将能够得到和这些数字之和等同的财富.由于小民数学不行, 所以他希望你能够帮助他求出他能通过这封信得到多少财富.</p><p><strong>输入</strong></p><p>一个字符串.表示信中的内容.<br>$1 \le len \le 10^6$是字符串的长度</p><p><strong>输出</strong></p><p>一个数字， 表示小民能够得到的财富.</p><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfsd231aa2</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><blockquote><p>枚举即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;1&#x27;</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) ans += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>逆序对</h1><p><strong>描述</strong></p><p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。比如一个序列为4 5 1 3 2， 那么这个序列的逆序数为7，逆序对分别为(4,1), (4, 3), (4,2), (5,1), (5,3), (5,2),(3,2)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">排列：每个数字只出现一次，且从1~n，顺序任意。</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><p>第一行有一个整数$n$ $(1 \le n \le 100000)$表示序列的长度。</p><p>第二行给出n<em>n</em>个整数$a[i](1 \le a[i] \le n)$，且输入的$a[i]$不重复。</p><p><strong>输出</strong></p><p>输出一个整数表示逆序对数量。</p><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4 5 1 3 2</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><blockquote><p>这题太板子了, 就是就逆序对, 我写的是树状数组+离散化版本O(nlogn), query()查寻前面比自己小的数有几个,枚举的数量-比自己小的数的个数就是逆序对的个数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rall(x) (x).rbegin(), (x).rend()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N], n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x &lt;= n; x += (x &amp; -x)) tr[x] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> res = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x; x -= (x &amp; -x)) res += tr[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(alls), val) - alls.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a[N], ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(alls));</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(alls)), alls.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">get_id</span>(a[i]);</span><br><span class="line"><span class="comment">// debug(t);</span></span><br><span class="line"><span class="built_in">add</span>(t, <span class="number">1</span>);</span><br><span class="line">ans += i - <span class="built_in">query</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ______ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ______;</span></span><br><span class="line"><span class="keyword">while</span> (______ --) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h1>切割方块</h1><p><strong>描述</strong></p><p>小民喜欢玩方块。妈妈给他买了一个2n×2n的正方形。他在方块里标记了一个格子，现在他正在解决下面的问题。问题是画一条虚线，沿着方格线，将正方形切成相等的两部分（只要能完全重合即可，方向可以任意旋转）。切割线不应与标记的单元有任何共同点，产生的两个部分应旋转相等。小民想确定是否有可能以所需的方式切割正方形，给定正方形的边长和标记单元格的坐标。请你帮助他。</p><p><strong>输入</strong></p><p>第一行包含三个以空格分隔的整数2n,x和y($2\le 2n \le 100$,$1 \le x , y \le 2n$)，表示正方形的边长和标记单元格的坐标。保证2n是偶数。</p><p><strong>输出</strong></p><p>如果正方形可以切割，则输出 YES，否则输出 NO</p><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 1</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><blockquote><p>因为切割完的两部分要完全重合, 所以必须要经过中间的点,所以只需要看x,y是中间4个即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, x, y;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span>((x == n / <span class="number">2</span> || x == n / <span class="number">2</span> + <span class="number">1</span>) &amp;&amp; (y == n / <span class="number">2</span> || y == n / <span class="number">2</span> + <span class="number">1</span>)) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>小民的美丽数</h1><p><strong>描述</strong></p><p>小民最近迷上了这样一种数, 他称之为美丽数, 所谓美丽数, 其实是指一个整数n, 如果这个数字在任意b<em>b</em> ($2 ≤ b ≤ n - 2$)进制下对应的字符串都是个回文, 那么它就是一个美丽数,现在小民现在有t个数,想让你帮他一一判断是否是美丽数</p><p><strong>输入</strong></p><p>第一行, 一个整数t<br>接下来t行, 每行输入一个数字n<br>$1 \le t \le 10 ^ 6$<br>$4 \le n \le l0^4$</p><p><strong>输出</strong></p><p>输出$t$行<br>如果是美丽数则输出$Yes$,否则输出$No$</p><p>输入样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>输出样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><blockquote><p>枚举可以发现都不行!!!</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>小民和志愿活动</h1><p><strong>描述</strong></p><p>最近小民正在为他的志愿分发愁, 天无绝人之路, 学院楼开始招收清扫志愿者.然而小民太过于懒惰, 于是他向他的好朋友hzc借来了 n个扫地机器人, 为了简化问题, 小民将它们从1到n编号.第i个机器人的耗电量为c_i, 需要t_i单位时间运行, hzc告诉小民, 运行k个编号连续的机器人的总开销是 max© + k * sum(t), 其中max©是这k个机器人最大耗电量,sum(t)是运行这k个机器人的总运行时长.由于小民求分心急, 但又不想花太多力气, 他希望你在不超过总开销的情况下, 所能运行最多的机器人个数是多少?</p><p><strong>输入:</strong></p><p>第一行输入 n和m, 分别代表n个机器人和小民的所能承受的总开销m第二行n个数字, 代表1到n个机器人的耗电量.第三行n个数字, 代表1到n个机器人的运行时长</p><p>$1 \le n \le 500000$</p><p>$1 \le m \le 1e15$</p><p>$1 \le ci \le 30000$</p><p>$1 \le ti \le 30000$</p><p><strong>输出</strong></p><p>一个数字, 即小民能够运行的最多的机器人数量</p><p><strong>输入样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 434 </span><br><span class="line">38 97 42 37 85 </span><br><span class="line">51 58 63 54 59</span><br></pre></td></tr></table></figure><p><strong>输出样例 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>二分枚举连续最机器人的数量,</p><p>他是具有两段性的, 如果短的不行那么长的一定不行,</p><p>再用ST表存最大值已达到快速查询区间max值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Log[N], f[N][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 查询</span></span><br><span class="line"><span class="type">int</span> k = Log[r - l + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(f[l][k], f[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">t</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; t[i], sum[i] = sum[i - <span class="number">1</span>] + t[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i ++ )  Log[i] = Log[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) f[i][<span class="number">0</span>] = c[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= Log[n]; j ++ ) </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++ ) </span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> check = [&amp;] (<span class="type">int</span> mid) &#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = mid; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">query</span>(i - mid + <span class="number">1</span>, i) + mid * (sum[i] - sum[i - mid]);</span><br><span class="line"><span class="keyword">if</span> (t &lt;= m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = INF;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列-双指针写法">单调队列+双指针写法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">t</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; t[i], sum[i] = sum[i - <span class="number">1</span>] + t[i];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> q[N], tt = <span class="number">-1</span>, hh = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt &amp;&amp; c[j] &gt;= c[q[hh]] &amp;&amp; j &lt;= n) hh ++;</span><br><span class="line">q[++ tt] = j;</span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt &amp;&amp; (c[q[hh]] + (sum[j] - sum[i - <span class="number">1</span>]) * (j - i + <span class="number">1</span>)) &gt; m &amp;&amp; i &lt;= j)</span><br><span class="line"><span class="keyword">if</span> ((i ++) == q[hh]) hh ++;</span><br><span class="line">res = <span class="built_in">max</span>(res, j - i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础课回忆计划(一)</title>
      <link href="/posts/24500.html"/>
      <url>/posts/24500.html</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>比赛打久了,准备考研的过程发现早已忘记那些算法的原理(只会拿着板子去解决问题,<s>也不太会</s>), 所以出一个算法回忆系列,重温一下所有不算太简单算法的原理</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/introduction/11/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/introduction/11/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing算法基础课链接</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="二分图">二分图</h2><p>什么是二分图:</p><blockquote><p>二分图是能把所有的点分成两个集合U, V.且所有的边(连线)只能存在于集合之间, 不能存在集合之内</p></blockquote><p>重要结论(充要条件):</p><blockquote><p>存在奇数环的图一定不是二分图</p></blockquote><p>含有奇数环的图不是二分图, 无论怎样划分集合，在同一集合内的点有边相连:</p><p><img src="https://image.chiullian.cn/picture/20221103134737.png" alt=""></p><p>下面是一个正确二分图:</p><p><img src="https://image.chiullian.cn/picture/MIOQGFG.png" alt=""></p><p>采取方法:</p><blockquote><p><code>染色法</code>判定是否存在奇数环</p></blockquote><p><img src="https://image.chiullian.cn/picture/20221103135012.png" alt=""></p><p>随便从一个点往下染色如果根定了图就定了, 如果能一直1212121这样间隔的染色就说明不含奇数环, 如果出现冲突就含有技术环, 不是二分图</p><blockquote><p>存图可以用链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>, M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以像我简单点用vector来存图(<s>好写</s>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line">vector&lt;PII&gt; e[N];</span><br></pre></td></tr></table></figure></blockquote><p><strong>代码实现和解释:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">col</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, b; i &lt;= m; i += <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">e[a].<span class="built_in">emplace_back</span>(b);</span><br><span class="line">e[b].<span class="built_in">emplace_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;] (<span class="type">int</span> u, <span class="type">int</span> c) &#123; <span class="comment">// c为0时未染色,1时染黑色,2时染白色</span></span><br><span class="line">col[u] = c; <span class="comment">// 给这点上色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!col[v]) &#123; <span class="comment">//相邻的点没有颜色,则递归处理这个相邻点</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">dfs</span>(v, <span class="number">3</span> - c)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 当前的色为1那么下一个就是3-1, 是2那么下一个颜色就是3 - 2, ~~太妙了~~</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col[v] == c) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 相邻的点有颜色了, 而且跟自己颜色一样就冲突了, 直接返回false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (!col[i]) <span class="comment">// 可能不是连通图, 要多次dfs</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">1</span>)) <span class="comment">// 随机染根节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>), <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>), <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图的最大匹配">二分图的最大匹配</h2><blockquote><p>最大匹配：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。</p><p>完美匹配：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。</p></blockquote><p><img src="https://image.chiullian.cn/picture/20221112121416.png" alt=""></p><p>如图,我们令左边的集合是男生,右边的集合是女生,所以问题变成了假如你来牵红线你最多能成全多少对情侣</p><p><strong>算法抽象后的核心思想:</strong></p><div class="tip "><p>枚举每个男生A2, 然后看这个男生喜欢那些女生B2,如果这个女生没有配对好,那么这个男生就和这个女生配对.如果这个女生配对过了,那么就去看已经跟这个女生B2配对过的那个男生A1是否有除了这个女生B2的其她人选B3,如果有那么让那个男生A1去配对另一个女生B3,则这个男生A2与这个女生B2; (字母是为了辨别不同人物,没有意义)</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n1, n2, m;      <span class="comment">// 有 n1 个男生和 n2 个女生 (n1 ≤ 500, n2 ≤ 500)。</span></span><br><span class="line"><span class="comment">// 他们之间可以匹配的关系有 m 个 (m ≤ 1e5)。</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];   <span class="comment">// g[a] 为一个动态数组vector，储存了男生 a 可以匹配的所有女生。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> match[N]; <span class="comment">//  match[a] = b: 女生 a 目前匹配了男生 b</span></span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">// st[a] = true 说明女生 a 目前被一个男生预定了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 为单身狗 x 找一个对象， (或) x的女朋友被别人预定，给x换一个对象</span></span><br><span class="line"><span class="comment">// 如果成功，返回true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j : g[x]) &#123; <span class="comment">// j 是可以与男生 x 匹配的女生之一</span></span><br><span class="line"><span class="keyword">if</span> (st[j]) <span class="keyword">continue</span>; <span class="comment">// 女生 j 目前被一个男生预定了，跳过它</span></span><br><span class="line">st[j] = <span class="literal">true</span>; <span class="comment">// 将女生 j 预定给男生 x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果女生 j 没有对象， 或者</span></span><br><span class="line"><span class="comment">// 女生 j 在前几轮深搜中已预定有对象，但我们成功给她的对象换了个新对象</span></span><br><span class="line"><span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j])) &#123;</span><br><span class="line">match[j] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">g[a].<span class="built_in">push_back</span>(b); <span class="comment">// 读取一条数据，男生 a 可以匹配女生 b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123; <span class="comment">// 尝试为每个男生做一轮深搜找对象（要求成功后总匹配数增加1）。</span></span><br><span class="line"><span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(i)) res++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点:st[]的作用:<br>首先我们 find(x) 遍历属于h[x]的单链表相当于遍历他所有喜欢的女生<br>  而如果某个女生j没有被他预定过的话<br>  就标记这个女生j被他预定,即st[j]=true<br>这时如果女j还没有匹配过,即match[j]==0的时候,那这个预定就成真了,得到match[j]=x;<br>  而如果女j之前就被男k匹配过了,那我们就find(k),也就是<br>  find(match[j])(因为原本match[j]==k)<br>然后在find(k)的过程中,因为st[j]=true,这时候男k就不能再选则女j了,因为女j已经被预定了,<br>所以男k就只能在他喜欢的女生里面选择其他人来匹配。 当然，如果find(k)返回false的话,<br><a href="https://blog.csdn.net/WJPnb1/article/details/126332263">引用来自</a></p><h2 id="并查集合集">并查集合集</h2><h3 id="先附上并查集的板子">先附上并查集的板子</h3><p><strong>一般并查集,维护了基本信息</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line"><span class="type">int</span> p[N], sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">sz[y] += sz[x], p[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="keyword">inline</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br></pre></td></tr></table></figure><h3 id="带边权并查集">带边权并查集</h3><p><strong>主要维护到祖宗节点的距离</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DSU &#123; <span class="comment">// 同一个集合中到祖宗的距离分为%2==0,%2==1两种情况</span></span><br><span class="line"><span class="type">int</span> p[N], sz[N], d[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[x] != x) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">d[x] += d[p[x]]; <span class="comment">// d维护到祖宗节点的距离</span></span><br><span class="line">p[x] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="comment">// y当祖宗</span></span><br><span class="line"><span class="type">int</span> px = <span class="built_in">find</span>(x), py = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (px == py) <span class="keyword">return</span>;</span><br><span class="line">sz[py] += sz[px], p[px] = py;</span><br><span class="line">        <span class="comment">// update *</span></span><br><span class="line">d[px] = (d[y] + <span class="number">1</span> - d[x]) % <span class="number">2</span>; <span class="comment">// x的父亲(px)当py的儿子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="keyword">inline</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br></pre></td></tr></table></figure><h3 id="扩展域并查集">扩展域并查集</h3><blockquote><p>拓展域并查集主要解决一种多个有相互关系的并查集，放在一起考虑的问题。</p></blockquote><h3 id="食物链"><a href="http://poj.org/problem?id=1182">食物链</a></h3><p>此题存在三种关系：A吃B，B吃C，C吃A</p><p>那么我们就需要三个并查集，也就是原<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&amp;spm=1001.2101.3001.7020">数组</a>扩展3倍。</p><p><img src="https://image.chiullian.cn/picture/20221122130427.png" alt=""></p><blockquote><p>x  x的同类域<br>x + n  x的同类域<br>x + n + n  x的天敌域</p></blockquote><p><strong>错误情况</strong></p><blockquote><p>如果x,y是同类,但是x的捕食域有y,那么错误<br>如果x,y是同类,但是x的天敌域有y,那么错误<br>如果x是y的天敌,但是x的同类域中有y,那么错误<br>如果x是y的天敌,但是x的天敌域中有y,那么错误</p></blockquote><p><strong>正确情况</strong></p><blockquote><p>如果x与y是同类, 那么x,y自身属于同一集合，x和y的食物属于同一集合，x和y的天敌自然也属于同一集合</p><p>如果x吃y, 带入实例,则A的食物是B，B的天敌是A，A的天敌（即为C）是B的食物</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line"><span class="type">int</span> p[N], sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">p[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="keyword">inline</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x x的同类域</span></span><br><span class="line"><span class="comment">// x + n x的同类域</span></span><br><span class="line"><span class="comment">// x + n + n 天敌域</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">init</span>(n * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line"><span class="type">int</span> D, x, y;</span><br><span class="line">cin &gt;&gt; D &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x &gt; n || y &gt; n) &#123;</span><br><span class="line">ans ++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (D == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">same</span>(x, y + n) || <span class="built_in">same</span>(x, y + n + n)) ans ++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="built_in">merge</span>(x + n, y + n);</span><br><span class="line"><span class="built_in">merge</span>(x + n + n, y + n + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">same</span>(x, y) || <span class="built_in">same</span>(x, y + n)) ans ++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">merge</span>(x, y + n + n);</span><br><span class="line"><span class="built_in">merge</span>(x + n, y);</span><br><span class="line">                <span class="built_in">merge</span>(x + n + n, y + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="疯狂动物城"><a href="https://ac.nowcoder.com/acm/contest/16172/A">疯狂动物城</a></h3><p>关系:A吃B，B吃C，C吃D，D吃A</p><p>A与C既非同类，也不是吃与被吃的关系</p><p><img src="https://image.chiullian.cn/picture/20221122132118.png" alt=""></p><blockquote><p>如果X吃Y,代入实例：A吃B，则A的食物是B，B的天敌是A，A的天敌（此题中即为D）与B无直接关系，与A无直接关系的（此题中即为C）是B的食物</p></blockquote><blockquote><p>如果X与Y无关系,代入实例：A与C，则A与C无直接关系，C与A无直接关系，A的食物（B）为C的天敌，A的天敌D为C的食物</p></blockquote><p><a href="https://blog.csdn.net/qq_51776588/article/details/117732078">转自</a></p><h3 id="带权并查集">带权并查集</h3><p><strong>食物链</strong></p><p>关系传递的本质实际上是向量的运算。</p><blockquote><p>把点到祖宗节点的距离总结成和 %3 == 2和%3 == 1和 %3 == 0的情况</p><p>余1:可以吃根节点</p><p>余2:可以被根节点吃</p><p>余0:同类</p></blockquote><p><strong>判断 x 和 y 是否是同类</strong></p><blockquote><p>首先判断 x 和 y 是否都在同一个集合内</p><p>如果在一个集合内,那么到根节点的距离%3相同就是同一类即(d[x] % M == d[y] % M)</p><p>如果不在一个集合内,那么就合并两个集合如下图, 那么只需要计算 d[p2] 的路径</p><blockquote><p>计算 d[y] 的路径在下次 “路径压缩” 的时候会被自动计算</p></blockquote><p>因为是同类所以 d[x] % M == (d[y] + d[p2]) % M, (余数相同是同类)</p><p>则可以求而出 d[p2] = ((d[x] - d[y]) + M) % M</p></blockquote><p>图片来自(@<a href="https://www.acwing.com/solution/content/6109/">转自</a>)</p><p>合并前:</p><img src="https://image.chiullian.cn/picture/20221122133621.png" style="zoom: 50%;" /><p>合并后:</p><img src="https://image.chiullian.cn/picture/2388_6bfb93e003-iShot-----2019-11-10-17.06.31.jpg" style="zoom:50%;" /><p><strong>x 吃 y 的情况</strong></p><blockquote><p>如果x吃y,和上面一样,先判断是否在一个集合里面</p><p>0</p><p>1</p><p>2</p><p>0</p><p>1 d[x]</p><p>2 d[y]</p><p>余2的可以吃余1的</p><p>余1的可以吃余0的</p><p>余0的可以吃余2的</p><p>如果在一个集合里面,如果d[x] % M == (d[y] + 1) % M;说明是x吃y是正确的</p><p>如果不在一个集合里面,</p><p>(d[x] - d[y] - d[p2] - 1) % M == 0;</p><p>那么 d[p2] = ((d[x] - d[y] - 1) % M + M) % M;</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N], d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[x] != x) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">d[x] += d[p[x]];</span><br><span class="line">p[x] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) p[i] = i, d[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line"><span class="type">int</span> D, x, y;</span><br><span class="line">cin &gt;&gt; D &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x &gt; n || y &gt; n) &#123;</span><br><span class="line">ans ++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (D == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (fx == fy &amp;&amp; (d[x] - d[y]) % <span class="number">3</span> != <span class="number">0</span>) ans ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">p[fx] = fy;</span><br><span class="line">d[fx] = d[y] - d[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fx == fy &amp;&amp; ((d[x] - d[y] - <span class="number">1</span>) % <span class="number">3</span> + <span class="number">3</span>) % <span class="number">3</span> != <span class="number">0</span>) ans ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">p[fx] = fy;</span><br><span class="line">d[fx] = - d[x] + <span class="number">1</span> + d[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在实验室的日常</title>
      <link href="/posts/23683.html"/>
      <url>/posts/23683.html</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>持续更新~~哈哈哈哈哈~</p></div><blockquote><p>2022 年 11 月 1 日 晚， 震惊！某不知名4男子胆大包天竟然在工作室里围起来桌子吃饭！</p></blockquote><p><img src="https://image.chiullian.cn/picture/ASVASVAN.webp" alt=""></p><blockquote><p>2022 年 11 月 3 日, 小草神没歪! 芜湖~</p></blockquote><p><img src="https://image.chiullian.cn/picture/20221104220959.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 生活琐碎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第73场周赛</title>
      <link href="/posts/8788.html"/>
      <url>/posts/8788.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/competition/problem_list/2449/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/competition/problem_list/2449/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第73场周赛</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1>AcWing 4704. 数对</h1><p>给定一个长度为 $n$ 的数组 $a1,a2,…,an$ 以及一个整数 $d$。</p><p>请你找出共有多少个数对 $(i,j)$ 能够同时满足以下条件：</p><ol><li>$1≤i,j≤n$</li><li>$i≠j$</li><li>$|ai−aj|≤d$</li></ol><p>注意，$(2,1)$ 和 $(1,2)$ 视为两个不同的数对。</p><h4 id="输入格式">输入格式</h4><p>第一行包含两个整数 $n,d$。</p><p>第二行包含 $n$ 个整数 $a1,a2,…,an$。</p><h4 id="输出格式">输出格式</h4><p>一个整数，表示满足条件的数对数量。</p><h4 id="数据范围">数据范围</h4><p>前三个测试点满足 $1≤n,d≤10$。<br>所有测试点满足 $1≤n≤1000$，$1≤d≤10^9$，$1≤a_i≤109$。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br><span class="line">10 20 50 60 65</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="输入样例2：">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 1</span><br><span class="line">55 30 29 31 55</span><br></pre></td></tr></table></figure><h4 id="输出样例2：">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><blockquote><p>枚举即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, d;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(w[i] - w[j]) &lt;= d)</span><br><span class="line">                res += <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>AcWing 4705. 矩阵</h1><p>给定 $n 个 2×2$ 的整数矩阵。</p><p>我们规定，如果一个矩阵经顺时针旋转 $90,180,270,360$ 度后，可以变为另一个矩阵，则两矩阵视为相同。</p><p><strong>注意：矩阵只能旋转，不能翻转。</strong></p><p>例如，以下四个矩阵视为同一种矩阵：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12     31     43     24</span><br><span class="line">34     42     21     13</span><br></pre></td></tr></table></figure><p>请你计算给定矩阵中，一共有多少种不同的矩阵。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含整数 $n$，表示给定矩阵数量。</p><p>接下来，描述所有给定矩阵，每个矩阵的描述占两行，每行包含两个整数，表示具体矩阵。</p><p>相邻矩阵之间用单行 <code>**</code> 隔开。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示矩阵的总种类数量。</p><h4 id="数据范围-2">数据范围</h4><p>前三个测试点满足 $1≤n≤4$。<br>所有测试点满足 $1≤n≤1000$，矩阵内元素取值范围 [1,6][1,6]。</p><h4 id="输入样例1：-2">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">31</span><br><span class="line">23</span><br><span class="line">**</span><br><span class="line">31</span><br><span class="line">23</span><br><span class="line">**</span><br><span class="line">13</span><br><span class="line">32</span><br><span class="line">**</span><br><span class="line">32</span><br><span class="line">13</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-2">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-2">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">51</span><br><span class="line">26</span><br><span class="line">**</span><br><span class="line">54</span><br><span class="line">35</span><br><span class="line">**</span><br><span class="line">25</span><br><span class="line">61</span><br><span class="line">**</span><br><span class="line">45</span><br><span class="line">53</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-2">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>哈希记录一个矩阵能转到那些, 标记为true, 如果当前的之前出现过ans 就不++, 否则 ++</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, b; i &lt;= n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> a1 = a / <span class="number">10</span>, a2 = a % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b1 = b / <span class="number">10</span>, b2 = b % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> t = a * <span class="number">100</span> + b2 * <span class="number">10</span> + b1;</span><br><span class="line">        <span class="keyword">if</span> (mp[t]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans ++;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; a1 &lt;&lt; &#x27; &#x27; &lt;&lt; a2 &lt;&lt; &#x27; &#x27; &lt;&lt; b1 &lt;&lt; &#x27; &#x27; &lt;&lt; b2 &lt;&lt; endl;</span></span><br><span class="line">        mp[a2 * <span class="number">1000</span> + b2 * <span class="number">100</span> + b1 * <span class="number">10</span> + a1] = t;</span><br><span class="line">        mp[b2 * <span class="number">1000</span> + b1 * <span class="number">100</span> + a1 * <span class="number">10</span> + a2] = t;</span><br><span class="line">        mp[b1 * <span class="number">1000</span> + a1 * <span class="number">100</span> + a2 * <span class="number">10</span> + b2] = t;</span><br><span class="line">        mp[t] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>AcWing 4706. 最短路程</h1><p>给定一个 $n$ 个节点的树。</p><p>节点编号为 $1∼n$。</p><p>树中所有边均为双向边，且长度均已知。</p><p>你需要从 $1$ 号点出发，<strong>沿着一条路径</strong>遍历树中所有点，路径中可以包含重复的点和边。</p><p>要求，你的行程总长度应尽可能短。</p><p>请你计算，你所需的行程总长度的最小可能值。</p><p>注意，你可以在任意点结束你的行程。</p><h4 id="输入格式-3">输入格式</h4><p>第一行包含整数 $n$。</p><p>接下来 $n−1$ 行，每行包含三个整数 $x,y,w$，表示点 $x$ 和点 $y$ 之间存在一条双向边，长度为 $w$。</p><h4 id="输出格式-3">输出格式</h4><p>一个整数，表示行程总长度的最小可能值。</p><h4 id="数据范围-3">数据范围</h4><p>前 4 个测试点满足 $1≤n≤5$。<br>所有测试点满足 $1≤n≤10^5，1≤x,y≤n，0≤w≤2×10^4$。</p><h4 id="输入样例1：-3">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-3">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-3">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">1 3 3</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-3">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><blockquote><p>枚举几个就可以发现树上从根节点往下走有一条链是只用走一遍,剩下的都要走两遍, 要想让总体的值最小,座椅最后走的那一条链一定要最大, 所以转化成树上求权值最大的链.dfs即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>, max_jie = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">vector&lt;vector&lt;PII&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, b, c; i &lt; n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">e[a].<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(b, c));</span><br><span class="line">e[b].<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(a, c));</span><br><span class="line">ans += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> ww) &#123;</span><br><span class="line">max_jie += ww;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sz</span>(e[u]) == <span class="number">1</span> &amp;&amp; e[u][<span class="number">0</span>].fi == fa) res = <span class="built_in">max</span>(res, max_jie); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) <span class="keyword">if</span> (v != fa) <span class="built_in">dfs</span>(v, u, w);</span><br><span class="line">max_jie -= ww;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (ans - res) * <span class="number">2</span> + res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第75场周赛</title>
      <link href="/posts/15796.html"/>
      <url>/posts/15796.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2521/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2521/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第74场周赛</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1>局部和</h1><p>给定一个长度为 $n−1$的整数数组 $d1,d2,…,dn−1$。</p><p><strong>注意：数组的长度是 n−1，不是 n。</strong></p><p>给定两个整数 $a,b（1≤a&lt;b≤n）$，请你计算 $da+d_{a+1}+…+d_{b−1}$ 的和。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5 6</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输入样例2：">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5 6</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h4 id="输出样例2：">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><blockquote><p>水~</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; x[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt; b; i ++) &#123;</span><br><span class="line">ans += x[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B.排队</h1><p>nn 个小朋友在玩游戏，编号依次为 $1∼n$。</p><p>每个小朋友都有一个身份，为 <code>rat</code>（老鼠）、<code>woman</code>（女人）、<code>child</code>（孩子）、<code>man</code>（男人）、<code>captain</code>（舰长） 之一。</p><p>已知，这几种身份的优先级是有区别的：</p><ul><li><code>rat</code> 为第一优先级。</li><li><code>woman</code> 和 <code>child</code> 为第二优先级。</li><li><code>man</code> 为第三优先级。</li><li><code>captain</code> 为第四优先级。</li></ul><p>现在，要给小朋友们排队，排队的规则为：</p><ul><li>对于不同优先级的小朋友，优先级越靠前（越小）则在队伍中的位置越靠前。</li><li>对于同一优先级的小朋友，编号越小则在队伍中的位置越靠前。</li></ul><p>请你确定小朋友们的具体排队顺序。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，其中第 i 行用来描述编号为 i 的小朋友，首先包含一个字符串，表示小朋友的名字，然后包含一个字符串，表示他的身份。</p><p>每个小朋友的名字都是一个长度范围在 [1,10][1,10] 的由英文字母构成的字符串，其中首字母大写，其余小写。</p><p>小朋友的名字两两不同。</p><p>表示身份的字符串一定是 <code>rat</code>、<code>woman</code>、<code>child</code>、<code>man</code>、<code>captain</code> 之一。</p><p>保证身份为 <code>captain</code> 的小朋友有且仅有一个。</p><h4 id="输出格式">输出格式</h4><p>共 n 行，其中第 i 行输出排在队伍中第 i 位的小朋友的名字。</p><h4 id="数据范围">数据范围</h4><p>前 $4$ 个测试点满足 $1≤n≤10$。<br>所有测试点满足 $1≤n≤100$。</p><h4 id="输入样例：">输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">Jack captain</span><br><span class="line">Alice woman</span><br><span class="line">Charlie man</span><br><span class="line">Teddy rat</span><br><span class="line">Bob child</span><br><span class="line">Julia woman</span><br></pre></td></tr></table></figure><h4 id="输出样例：">输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Teddy</span><br><span class="line">Alice</span><br><span class="line">Bob</span><br><span class="line">Julia</span><br><span class="line">Charlie</span><br><span class="line">Jack</span><br></pre></td></tr></table></figure><blockquote><p>手写cmp按照题目给定的规则排序即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">map&lt;string, int&gt; mp;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct t &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int idx;</span></span></span><br><span class="line"><span class="string"><span class="meta">string name;</span></span></span><br><span class="line"><span class="string"><span class="meta">int pri;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">bool cmp(t x, t y) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x.pri != y.pri) return x.pri &lt; y.pri;</span></span></span><br><span class="line"><span class="string"><span class="meta">else return x.idx &lt; y.idx;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">mp[&quot;</span>rat<span class="string">&quot;] = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">mp[&quot;</span>woman<span class="string">&quot;] = mp[&quot;</span>child<span class="string">&quot;] = 2;</span></span></span><br><span class="line"><span class="string"><span class="meta">mp[&quot;</span>man<span class="string">&quot;] = 3;</span></span></span><br><span class="line"><span class="string"><span class="meta">mp[&quot;</span>captain<span class="string">&quot;] = 4;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;t&gt; a(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; a[i].name;</span></span></span><br><span class="line"><span class="string"><span class="meta">a[i].idx = i;</span></span></span><br><span class="line"><span class="string"><span class="meta">string s;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; s;</span></span></span><br><span class="line"><span class="string"><span class="meta">a[i].pri = mp[s];</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">sort(all(a), cmp);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) cout &lt;&lt; a[i].name &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h1>C.变换树根</h1><p>给定一个 n 个节点的树，节点编号为 1∼n。</p><p>树的根节点编号 r1 已知，每个节点（r1 除外）的父节点编号 pi 已知。</p><p>现在，我们要重新指定树的根节点，更具体地说，我们要将树的根节点从 r1 变换为 r2。</p><p>请你计算并输出，变换树根后，每个节点（r2 除外）的父节点编号。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含三个整数 n,r1,r2，分别表示节点数量、原根节点编号、新根节点编号。</p><p>第二行包含 n−1 个整数，表示每个节点（r1 除外）的父节点编号 pi。</p><p>输入保证，编号越小的节点，其父节点编号越先给出。</p><h4 id="输出格式-2">输出格式</h4><p>在一行中输出 n−1 个整数，表示变换树根后，每个节点（r2 除外）的父节点编号。</p><p>输出应保证，编号越小的节点，其父节点编号越先输出。</p><h4 id="数据范围-2">数据范围</h4><p>前 55 个测试点满足 $2≤n≤10$。<br>所有测试点满足 $2≤n≤50000$，$1≤r1≠r2≤n$，$1≤pi≤n$。</p><h4 id="输入样例1：-2">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-2">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-2">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2 4</span><br><span class="line">6 1 2 4 2</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-2">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 4 1 4 2</span><br></pre></td></tr></table></figure><blockquote><p>枚举一个样例就可以发现, 换根之后改变父子关系的只有$r1 - r2$路径上的这些点,其他的点都没有改变, 所以记录r1-r2链上节点即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 1e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; e[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">int fa[N];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n, r1, r2;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; r1 &gt;&gt; r2;</span></span></span><br><span class="line"><span class="string"><span class="meta">int root = r1;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (i == r1) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; fa[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">int ne = r2;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (ne != 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans.emplace_back(ne);</span></span></span><br><span class="line"><span class="string"><span class="meta">ne = fa[ne];</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">fa[ans[0]] = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">reverse(all(ans));</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; sz(ans) - 1; i ++) fa[ans[i]] = ans[i + 1];  </span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (i == r2) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; fa[i] &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Good !</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南宁周赛-三-2022年下</title>
      <link href="/posts/15667.html"/>
      <url>/posts/15667.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://oj.gxu.edu.cn/contest/477/problems">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/oj.gxu.edu.cn/contest/477/problems.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">南宁周赛四链接</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><blockquote><p>难度:★★☆☆☆</p></blockquote><h3 id="个数">个数</h3><p>有$n$个人,喜爱的数分别为$1~n$, 当两个人的喜爱的数之和为$m$时, 他们会成为朋友, 现给定$n和m$ 请你求出共有多少对朋友关系.</p><p><strong>输入样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 4</span><br><span class="line">20 16</span><br><span class="line">30 30</span><br><span class="line">100 56</span><br><span class="line">100 57</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1                                                                     </span><br><span class="line">7</span><br><span class="line">14</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td></tr></table></figure><blockquote><p>m / 2 - (m % 2 == 0)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">1</span>) cout &lt;&lt; m / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; m / <span class="number">2</span> - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Water">Water</h3><p><strong>描述</strong></p><p>有 N 个容量无穷大的水壶，它们从 $1\sim N$ 编号，初始时 i 号水壶中装有 A_i单位的水。</p><p>你可以进行不超过 $K$ 次操作，每次操作需要选择一个满足 $1 \leq x \leq N-1$ 的编号 $x$，然后把 $x$ 号水壶中的水全部倒入 $x + 1$ 号水壶中。</p><p>最后你可以任意选择恰好一个水壶，并喝掉水壶中所有的水。现在请你求出，你最多能喝到多少单位的水。</p><p><strong>输入样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">5</span><br><span class="line">890 965 256 419 296 987 45 676 976 742</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3813</span><br></pre></td></tr></table></figure><blockquote><p>就是求数组中连续k个数之和的最大值, 记录前缀和$s[i] - s[i - k - 1]$ 就是中间k个数的和</p></blockquote><h3 id="取走k数">取走k数</h3><p><strong>描述</strong></p><p>小明有一个大小为$n$的数组,给定$k$ 他执行下列操作$m$次</p><p>找到当前数组中第$k$小的数, 拿走这个数(之后的操作中就没有这个数了), 请你求出最终所有拿出的数之和</p><p>比如$n=6$,数组为$3,3,2,2,1,1$, $k$为2, $m$为3, 则第一次取出$1$, 此时数组为$3,3,2,2,1$, 第二次取出$2$, 此时数组为$3,3,2,1$, 第三次取出$2$, 最终和为1+2+2=5</p><blockquote><p>排个序取第k个往后m个数的和即可</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, k, ans = <span class="number">0</span>, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">a</span><span class="params">(n)</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">sort(all(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &lt; k + m - <span class="number">1</span>; i ++) &#123;</span><br><span class="line"><span class="comment">// debug(a[i]);</span></span><br><span class="line">ans += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否存在-2">是否存在(2)</h3><p>给定正整数$a,b,c$ 请问是否存在一个正整数$d$, 使得 $a^d$%$b^c$=$0$, 若存在输出&quot;1&quot;, 否则输出&quot;0&quot;;</p><p>$1&lt;=a,b,c&lt;2^{31}$</p><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">210 14 1 </span><br><span class="line">262 131 1000099 </span><br><span class="line">1834181566 1834181566 1000099 </span><br><span class="line">14001386 1 262 </span><br><span class="line">1834181566 131 1 </span><br><span class="line">131012969 7000693 131012969 </span><br><span class="line">14001386 131 262025938 </span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><blockquote><p>枚举b的因子在a的因子集合是否存在,如果不存在一个或多个那就不可能能整除</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="type">int</span> n = a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; yz;</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">s.<span class="built_in">insert</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">1</span>) s.<span class="built_in">insert</span>(n);</span><br><span class="line">n = b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i ++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">count</span>(i) == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span> &amp;&amp; s.<span class="built_in">count</span>(n) == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">void</span>(cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl);</span><br><span class="line">cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Signed">Signed</h3><p>给定 N<em>N</em> 个整数 a_{1\sim N}<em>a</em>1∼<em>N</em>， 你的任务是把他们变成同一个整数y<em>y</em>。</p><p>你把 $a_i$ 变成 $y$ 的代价是 $count(a_i \bigoplus y)(\bigoplus表示异或)。$</p><p>$count(x)$ 定义如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        cn += x &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求能够达成最小代价的<em>y</em>的个数。 比如当n=4,a=1, 2, 5, 8 时,$y$取1或0时均能得到最小代价5</p><p>$ 1 \le N \le 100000$</p><p>$ 0 \le A_i \lt 2^{31}$</p><p>输入样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10                                                                                                           </span><br><span class="line">218 925 750 921 1858 1502 591 1812 1026 2034 </span><br></pre></td></tr></table></figure><p>输出样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>输入样例 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10                                                                                                           </span><br><span class="line">41793321 608011953 307429089 897707567 787897789 1786874564 451791243 221251150 488971733 1600170888 </span><br></pre></td></tr></table></figure><p>输出样例 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">128</span><br></pre></td></tr></table></figure><blockquote><p>对每一个 a 做二进制的分解，并统计每一位的 1 的个数（或者 0 的个数） 若第 i 位 1 的个数大于 0 的个数，那么答案的当前位取 1 更优 若第 i 位 1 的个数小于 0 的个数，那么答案的当前位取 0 更优</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> idx[<span class="number">65</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> x = a[i], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">35</span>; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;&gt; j &amp; <span class="number">1</span>) idx[j] ++;</span><br><span class="line"><span class="keyword">else</span> idx[j] --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (idx[i] == <span class="number">0</span>) ans &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Repeat">Repeat</h3><p>今天小 s 在学数学，恰好学到了斐波那契数列，题目要求他输出第 <em>N</em> 个斐波那契数，可是小明想偷懒，不想写高精度加法，他想知道第 N* 个斐波那契数模 <em>K</em> 的值。</p><p>一共 2 行输入。</p><p>第一行整数 <em>N</em>。</p><p>第二行整数 <em>K</em>。</p><p>$2 \leq K \leq 100$</p><p>$1 \leq N \leq 10^{18}$</p><blockquote><p>无脑!~~~ 这里直接用斐波那契数列的板子<strong>快速倍增法</strong>log(n)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mod;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">cal</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">PII t = <span class="built_in">cal</span>(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> f1 = (t.fi * t.fi + t.se * t.se) % mod;</span><br><span class="line"><span class="type">int</span> f2 = (t.fi * (<span class="number">2</span> * t.se - t.fi) % mod + mod) % mod;</span><br><span class="line"><span class="keyword">if</span> (!(x &amp; <span class="number">1</span>)) <span class="keyword">return</span> <span class="built_in">make_pair</span>(f2, f1);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(f1, (f1 + f2) % mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; mod;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">cal</span>(n).fi &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Large">Large</h3><p><strong>Lzh</strong>大师是树上 Dynamic Programming 的高手，他给小 s 出了道简单的树上问题。</p><p>一个有根树，有 <em>N</em> 个节点，根的节点编号是 1 。</p><p>每一个节点<em>i</em> 都有一个数值 $A_i$ 。</p><p>每个节点只能向以他为根的子树里的节点跳跃。</p><p>从 i 号节点跳到<em>j</em> 号节点的代价是$2^{ dep[j] - dep[i] - 1} * A_j$* 。</p><p>每次跳跃的代价相加。</p><p>问从根节点到叶子节点的最小代价是多少。 （任何叶子节点都是可以的）。</p><p><strong>输入</strong></p><p>三行输入。</p><p>第一行一个整数 $N$，表示有 <em>N</em> 个节点构成一棵树。</p><p>第二行 $N - 1$个整数，第 $i$个整数 $p_i$ 表示第 $i + 1$号节点的父亲是$p_i$。</p><p>第三行 $N$个整数，第 <em>i</em> 个整数 $A_i$ 表示第 <em>i</em> 号节点的数值是$A_i$ 。</p><p>$1 \leq N \leq$</p><p>$1 \leq p_i \leq N$</p><p>$0 \leq A_i \leq 1000$</p><p><strong>输出</strong></p><p>一行一个整数，表示从根节点到叶子节点的最小代价。</p><p>输入样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 1 1 1 1 2 3 </span><br><span class="line">771 50 149 860 207 257 397 262 </span><br></pre></td></tr></table></figure><p>输出样例 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">207</span><br></pre></td></tr></table></figure><blockquote><p>树上dp</p><p>从根节点往上跳的</p><p>如果 $A[i]$不是 0 ，那么 号节点只能向下跳有限次。 往下多跳一格, 代价就乘2, 发现代价增长极快,而${A_i}$最大为1000, 那么我们在每一个点只 需要枚举跳几次即可, 特别注意当 为0时, 无论从哪个点跳过来, 代价都是0.</p><blockquote><p>极端情况, 都在一条链上最多跳不能超过 64次 $2 ^{64}$ 太大了而且$A_{i}$才1000所以设置一个限制往上跳最多30+层就不跳了</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, w[N], depth[N], fa[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> f[N], ans = INF, Ini[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">depth[u] = depth[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> v : e[u]) <span class="built_in">dfs</span> (v, u);</span><br><span class="line"><span class="keyword">if</span> (e[u].<span class="built_in">empty</span>()) f[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = p, time = <span class="number">0</span>; j != <span class="number">0</span> &amp;&amp; time &lt; <span class="number">35</span>; j = fa[j], time ++) &#123;</span><br><span class="line">f[j] = <span class="built_in">min</span> (f[j], f[u] + Ini[depth[u] - depth[j] - <span class="number">1</span>] * w[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (w[u] == <span class="number">0</span>) f[<span class="number">1</span>] = <span class="built_in">min</span>(f[u], f[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) f[i] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) cin &gt;&gt; fa[i], e[fa[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; w[i];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// for (int i = 1; i &lt;= n; i ++) debug(f[i]);</span></span><br><span class="line">cout &lt;&lt; f[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">Ini[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i ++ ) Ini[i] = Ini[i - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>要背的考研数学公式</title>
      <link href="/posts/58717.html"/>
      <url>/posts/58717.html</url>
      
        <content type="html"><![CDATA[<div class="tip "><p>置顶</p></div><h2 id="常见不定积分">常见不定积分</h2><p><img src="https://image.chiullian.cn/picture/MommyTalk1669015166445.jpg" alt=""></p><h2 id="常见Taylor">常见Taylor</h2><p><img src="https://image.chiullian.cn/picture/Math.jpg" alt=""></p><h3 id="特别的积分">特别的积分</h3><blockquote><p>(1)  $\int \sin ^{2} x d x=\frac{1}{2}(x-\sin x \cos x)+C ; \int \cos ^{2} x d x=\frac{1}{2}(x+\sin x \cos x)+C$<br>(2)  $\int x \sin x d x=\sin x-x \cos x+C ; \int x \cos x d x=\cos x+x \sin x+C$<br>(3)  $\int \frac{1}{1 \pm \sin x} d x=\tan x \mp \sec x+C$<br>(4)  $\int \frac{1}{1 \pm \cos x} d x=-\cot x \pm \csc x+C$<br>(5)  $\int \tan ^{2} x d x=-x+\tan x+C ;  \int \cot ^{2} x d x=-x-\cot x+C$<br>(6)  $\int \arcsin x d x=x \arcsin x+\sqrt{1-x^{2}}+C ;  \int \arccos x d x=x \arccos x-\sqrt{1-x^{2}}+C$<br>(7)  $\int \arctan x d x=x \arctan x-\frac{1}{2} \ln \left(1+x^{2}\right)+C$<br>(8)  $\int \ln x d x=x \ln x-x+C$<br>(9)  $\int x e^{x} d x=(x-1) e^{x}+C$<br>(10)  $\int \frac{1}{1+e^{x}} d x=x-\ln \left(1+e^{x}\right)+C$<br>(11)  $\int x \ln x d x=\frac{x^{2}}{4}(2 \ln x-1)+C$<br>(12)  $\int \frac{x}{a+b x} d x=\frac{1}{b^{2}}(b x-a \ln |a+b x|)+C$<br>(13)  $\int \frac{1}{a+b x} d x=\frac{1}{b} \ln |a+b x|+C$</p></blockquote><!-- (1)  $\int x^{n} d x=\frac{x^{n+1}}{n+1}+C(n \neq-1)$(2)  $\int \frac{1}{x} d x=\ln |x|+C$(3)  $\int a^{x} d x=\frac{a^{x}}{\ln a}+C$(4)  $\int \ln x d x=x \ln x-x+C$(5)  $\int \sin x d x=-\cos x+C ; \quad \int \cos d x=\sin x+C$(6)  $\int \sec ^{2} x d x=\tan x+C ; \quad \int \csc ^{2} x d x=-\cot x+C$(7)  $\int \sec x \tan x d x=\sec x+C ; \quad \int \csc x \cot x d x=-\csc x+C$(8)  $\int \tan x d x=-\ln |\cos x|+C ; \quad \int \cot x d x=\ln |\sin x|+C$(9)  $\int \sec x d x=\ln |\sec x+\tan x|+C ; \quad \int \csc x d x=\ln |\csc x-\cot x|+C$(10)  $\int \frac{1}{\sqrt{1-x^{2}}} d x=\arcsin x+C$(11)  $\int \frac{1}{1+x^{2}} d x=\arctan x+C$(12)  $\int \arcsin x d x=x \arcsin x+\sqrt{1-x^{2}}+C ; \quad \int \arccos x d x=x \arccos x-\sqrt{1-x^{2}}+C$(13)  $\int \arctan x d x=x \arctan x-\frac{1}{2} \ln \left(1+x^{2}\right)+C$ --><h2 id="倍角公式">倍角公式</h2><blockquote><p>$\sin 2 \alpha=2  \sin \alpha \cos \alpha, \quad \cos 2 \alpha=\cos ^{2} \alpha-\sin ^{2} \alpha=1-2 \sin ^{2} \alpha=2 \cos ^{2} \alpha-1 ,\\  \sin 3 \alpha= -4 \sin ^{3} \alpha+3 \sin \alpha, \quad \cos 3 \alpha=4 \cos ^{3} \alpha-3 \cos \alpha ,  \tan 2 \alpha=\frac{2 \tan \alpha}{1-\tan ^{2} \alpha}, \quad \cot 2 \alpha=\frac{\cot ^{2} \alpha-1}{2 \cot \alpha} .$</p></blockquote><h2 id="常用等价">常用等价:</h2><blockquote><p>$\begin{array}{l}<br>\mathrm{a}^{\mathrm{x}}-1 \sim \mathrm{x} \ln \mathrm{a} \\<br>\arcsin (\mathrm{a}) \mathrm{x} \sim \sin (\mathrm{a}) \mathrm{x} \sim(\mathrm{a}) \mathrm{x} \\<br>\arctan (\mathrm{a}) \mathrm{x} \sim \tan (\mathrm{a}) \mathrm{x} \sim(\mathrm{a}) \mathrm{x} \\<br>\ln (1+\mathrm{x}) \sim \mathrm{x} \\<br>\sqrt{1+\mathrm{x}}-\sqrt{1-\mathrm{x}} \sim \mathrm{x} \\<br>(1+\mathrm{ax})^{\mathrm{b}}-1 \sim \mathrm{abx} \\<br>\sqrt[\mathrm{b}]{1+\mathrm{ax}}-1 \sim \frac{\mathrm{a}}{\mathrm{b}} \mathrm{x} \\<br>1-\cos \mathrm{x} \sim \frac{\mathrm{x}^{2}}{2} \\<br>\mathrm{x}-\ln (1+\mathrm{x}) \sim \frac{\mathrm{x}^{2}}{2} \\<br>\tan \mathrm{x}-\sin \mathrm{x} \sim \frac{\mathrm{x}^{3}}{2} \\<br>\tan \mathrm{x}-\mathrm{x} \sim \frac{\mathrm{x}^{3}}{3} \\<br>\mathrm{x}-\arctan \mathrm{x} \sim \frac{\mathrm{x}^{3}}{3} \\<br>\mathrm{x}-\sin \mathrm{x} \sim \frac{\mathrm{x}^{3}}{6} \\<br>\arcsin \mathrm{x}-\mathrm{x} \sim \frac{\mathrm{x}^{3}}{6}<br>\end{array}$</p></blockquote><h2 id="重要极限">重要极限</h2><blockquote><p>$\lim _{x \rightarrow 0} \frac{\sin x}{x}=1 \quad \lim _{x \rightarrow \infty}\left(1+\frac{1}{x}\right)^{x}=e \quad \lim _{n \rightarrow \infty} \sqrt[n]{n}=1 \quad \lim _{x \rightarrow 0^{+}} x^{x}=1 \quad \lim _{x \rightarrow 0^{+}} x \ln ^{p} x=0$</p><p>​</p></blockquote><h2 id="常见求导">常见求导</h2><blockquote><p>$\begin{array}{l}<br>c^{\prime}=0 \quad \text { ( } c \text { 为任意 常 数 ) }\\<br>\left(x^{\alpha}\right)^{\prime}=\alpha x^{\alpha-1} \text {. }\\<br>\left(a^{x}\right)^{\prime}=a^{x} \ln a . \\ \left(\mathrm{e}^{x}\right)^{\prime}=\mathrm{e}^{x} .\\<br>\left(\log _{a} x\right)^{\prime}=\frac{1}{x \ln a} . \\(\ln x)^{\prime}=\frac{1}{x} .\\<br>(\sin x)^{\prime}=\cos x . \\<br>(\tan x)^{\prime}=\sec ^{2} x \\<br>(\sec x)^{\prime}=\sec x \tan x \cdot \\ (\csc x)^{\prime}=-\csc x \cot x\\<br>\end{array}\begin{array}{l}<br>(\arcsin x)^{\prime}=\frac{1}{\sqrt{1-x^{2}}}, \\<br>(\arccos x)^{\prime}=\frac{-1}{\sqrt{1-x^{2}}} \\<br>(\arctan x)^{\prime}=\frac{1}{1+x^{2}} \\<br>(\operatorname{arccot} x)^{\prime}=\frac{-1}{1+x^{2}}<br>\end{array} \\(\cot x)^{\prime}=-\csc ^{2} x .$</p></blockquote><h2 id="特殊求导">特殊求导</h2><blockquote><p>$\begin{array}{l}<br>(\ln |x|)^{\prime}=\frac{1}{x} \quad \ln |x| \text { 求导可视绝对值而不见 } \\<br>\left(e^{x}+e^{-x}\right)^{\prime \prime}=e^{x}+e^{-x} \\<br>{\left[\ln \left(x+\sqrt{a^{2}+x^{2}}\right)\right]^{\prime}=\frac{1}{\sqrt{a^{2}+x^{2}}} \quad\left(\ln \left(x+\sqrt{1+x^{2}}\right) \text { 为奇函数 }\right)}<br>\end{array}$</p></blockquote><h2 id="变限积分求导">变限积分求导</h2><blockquote><p>$y=\int_{\psi(x)}^{\varphi(x)} f(t) d t, \frac{d y}{d x}=f[\varphi(x)] \varphi^{\prime}(x)-f[\psi(x)] \psi^{\prime}(x)$</p></blockquote><h2 id="一元函数的极值与最值">一元函数的极值与最值</h2><blockquote><p>驻点:  $f^{\prime}\left(x_{0}\right)=0$</p><p>极值点:  $f^{\prime}\left(x_{0}\right)=0  或  f^{\prime}\left(x_{0}\right)$不存在</p><p>拐点: 函数的凹凸性改变即  $f^{\prime \prime}\left(x_{0}\right)$改变符号</p></blockquote><h2 id="渐近线">渐近线</h2><blockquote><p>垂直渐近线:  $x=a \Leftrightarrow \lim _{x \rightarrow a} f(x)=\infty \$<br>水平斩近线:  $y=b \Leftrightarrow \lim _{x \rightarrow \infty} f(x)=b$</p><p>斜渐近线:  $y=k x+b \Leftrightarrow k=\lim _{x \rightarrow \infty} \frac{f(x)}{x}, b=\lim _{x \rightarrow \infty}[f(x)-k x]$</p></blockquote><h2 id="半角公式">半角公式</h2><blockquote><p>$\begin{array}{l}<br>\sin ^{2} \frac{\alpha}{2}=\frac{1}{2}(1-\cos \alpha), \quad \cos ^{2} \frac{\alpha}{2}=\frac{1}{2}(1+\cos \alpha), \text { (降幂公式) } \\<br>\sin \frac{\alpha}{2}=\pm \sqrt{\frac{1-\cos \alpha}{2}}, \quad \cos \frac{\alpha}{2}=\pm \sqrt{\frac{1+\cos \alpha}{2}}, \\<br>\tan \frac{\alpha}{2}=\frac{1-\cos \alpha}{\sin \alpha}=\frac{\sin \alpha}{1+\cos \alpha}=\pm \sqrt{\frac{1-\cos \alpha}{1+\cos \alpha}},<br>\end{array}$</p></blockquote><h2 id="一些常见数列前n项的和">一些常见数列前n项的和.</h2><blockquote><p>$(1)  \sum_{k=1}^{n} k=1+2+3+\cdots+n=\frac{n(n+1)}{2} .\$<br>$(2)  \sum_{k=1}^{n} k^{2}=1^{2}+2^{2}+3^{2}+\cdots+n^{2}=\frac{n(n+1)(2 n+1)}{6} .\$<br>$(3)  \sum_{k=1}^{n} \frac{1}{k(k+1)}=\frac{1}{1 \times 2}+\frac{1}{2 \times 3}+\frac{1}{3 \times 4}+\cdots+\frac{1}{n(n+1)}=\frac{n}{n+1} .$</p></blockquote><h2 id="求导技巧">求导技巧</h2><blockquote><p>$(u v w)^{\prime}=u^{\prime} v w+u v^{\prime} w+u v w^{\prime}$, 每个都挨一拳<br>${(\ln |x|})^{\prime}=\frac{1}{x}$,    视绝对值而不见</p></blockquote><h2 id="子孙三代的关系-积分与原函数与导数">子孙三代的关系(积分与原函数与导数)</h2><div class="tip "><p>$\begin{array}{l}<br>\int_{0}^{x} f(x) d x \longleftarrow \quad f(x) \longrightarrow \quad f^{\prime}(x) \<br>\quad \quad \quad \text { 偶数 } \longleftarrow \text { 奇数 } \longrightarrow \text { 偶数 } \<br>\quad \quad \quad \text { 奇数 } \stackrel{\text { (1) }}{\longleftarrow} \text { 偶数 } \longrightarrow \text { 奇数 } \<br>\quad \quad \quad \text { 周期 } \stackrel{\text { (2) }}{\longleftarrow} \text { 周期 } \longrightarrow \text { 周期 }  \<br>\end{array}$</p></div><h2 id="定积分与不定积分">定积分与不定积分</h2><h3 id="原函数（不定积分）的存在定理">原函数（不定积分）的存在定理:</h3><p>条件强</p><blockquote><ul><li><mark class="hl-label red">连续函数</mark>  必有原函数</li><li>部分震荡间断点也有原函数</li></ul><p>不存在定理：</p><ul><li>除了部分震荡间断点剩下各种间断点的都没有原函数。</li></ul></blockquote><h3 id="定积分的存在定理的充分条件">定积分的存在定理的充分条件:</h3><p>条件弱</p><blockquote><ul><li>$f(x)$在$[a , b]$上 <mark class="hl-label red">连续</mark> , 则$\int_{a}^{b} f(x)dx$存在;</li><li>$f(x)$在$[a , b]$上 <mark class="hl-label red">单调</mark> , 则$\int_{a}^{b}f(x)dx$存在;</li><li>$f(x)$在$[a , b]$上 <mark class="hl-label red">有界</mark> , 且<mark class="hl-label red">只有有限个间断点</mark> , 则$\int_{a}^{b} f(x)dx$存在</li></ul></blockquote><h3 id="定积分的存在定理的必要条件">定积分的存在定理的必要条件:</h3><blockquote><p>定积分的存在定理的必要条件:</p><ul><li>若$\int_{a}^{b} f(x)dx$存在, 则$f(x)$在$[a, b]$上必有界;</li></ul></blockquote><h3 id="定积分不存的特殊的">定积分不存的特殊的:</h3><blockquote><ul><li><mark class="hl-label red">无界震荡的间断点定积分不存在</mark> </li><li><mark class="hl-label red">有界震荡的间断点定积分存在</mark> </li></ul></blockquote><h2 id="附其他知识✨✨✨✨-高中要遗忘的🤡">附其他知识✨✨✨✨(高中要遗忘的🤡</h2><blockquote><p>1.辅助角公式是李善兰先生提出的一种高等三角函数公式，公式的主要作用是将多个三角函数的和化成单个函数，以此来求解有关最值问题。使用代数式表达为：</p></blockquote><p>$a \sin x+b \cos x=\sqrt{a^{2}+b^{2}} \sin \left(x+\arctan \frac{b}{a}\right)$</p><blockquote><p>2.点到直线的距离,设直线 L 的方程为Ax+By+C=0，点 P 的坐标为（x0,y0），则点 P 到直线 L 的距离为：</p></blockquote><p>$\frac{\left|A x_{0}+B y_{0}+C\right|}{\sqrt{A^{2}+B^{2}}}$</p>]]></content>
      
      
      <categories>
          
          <category> 考研模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于函数极限和导数</title>
      <link href="/posts/64501.html"/>
      <url>/posts/64501.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数极限的性质">函数极限的性质</h2><div class="tip cogs"><p>函数极限的性质</p></div><p>如果函数极限存在,那么极限唯一。</p><p>函数极限存在的充要条件:</p><p>$\lim <em>{x \rightarrow x</em>{0}} f(x)=A \Leftrightarrow f(x)=A+\alpha(x), \lim <em>{x \rightarrow x</em>{0}} \alpha(x)=0$</p><p>$\lim <em>{x \rightarrow x</em>{3}} f(x)=A \Leftrightarrow \lim <em>{x \rightarrow x</em>{0}^{-}} f(x)=A \text {, 且 } \lim <em>{x \rightarrow x</em>{0}^{+}} f(x)=A$</p><p>无穷小的运算规则:</p><ol><li>有限个无穷小的和是无穷小</li><li>有界函数与无穷小的乘积是无穷小</li><li>有限个无穷小的乘积是无穷小</li></ol><mark class="hl-label red">0是最高阶的无穷小</mark> <h2 id="函数的连续与间断">函数的连续与间断</h2><p><strong>函数可导的充要条件</strong>：函数在该点连续且左导数、右导数都存在并相等。</p><div class="tip success"><p>函数可导则函数连续；</p></div><div class="tip success"><p>函数连续不一定可导；</p></div><div class="tip success"><p>不连续的函数一定不可导；</p></div><mark class="hl-label red">折点都不可导</mark> <h4 id="怎么验证连续性和可导性">怎么验证连续性和可导性?</h4><ol><li><p><strong>验证连续性</strong>: 假如极限值(左极限=右极限)=函数值，那函数在这一点就是连续的；假如极限值≠函数值，那函数在这一点就是不连续的</p></li><li><p><strong>验证可导性</strong>:根据定义</p><ul><li>证明$\lim <em>{x \rightarrow x</em>{0}}\left(\frac{f(x)-f\left(x_{0}\right)}{x-x_{0}}\right) \text { 存在 }$</li><li>证明$\lim <em>{\Delta x \rightarrow 0} \frac{f\left(x</em>{0}+\Delta x\right)-f\left(x_{0}\right)}{\Delta x}$ 存在</li><li>左导数 = 右导数, 且这个点有定义</li><li>分段点只能导数定义来求</li></ul></li></ol><div class="tip info faa-ring"><p>求导数时, 当函数不具备&quot;导数存在的条件是, 往往只能用<code>函数的定义</code>求&quot;</p></div><div class="tip red"><p>一阶导函数连续，原函数一定可导</p></div><blockquote><p>$f(x)$在$x=0$连续 $\Leftrightarrow f(0)=  \lim _{x \rightarrow {0}} f(x)$; 互为充要条件</p></blockquote><h2 id="一些注意">一些注意</h2><blockquote><p>极限存在的充分必要条件是左右极限都存在,且相等</p></blockquote><div class="note pink flat"><p>$\text { 若 } f(x) \text { 在 } x=0 \text { 处连续, 且 } \lim _{x \rightarrow 0} \frac{f(x)}{x}=A \text {, 则 (1) } f(0)=0 \text {; (2) } f^{\prime}(0)=A \text {. }$</p></div><blockquote><p>$【注】要能区分这样几个符号:$<br>$(1)  \mathrm{d} x^{2}=(\mathrm{d} x)^{2}, \mathrm{~d} x^{n}=(\mathrm{d} x)^{n} , 这 叫 “微分的幂”;$<br>$(2)  \mathrm{d}\left(x^{2}\right)=2 x \mathrm{~d} x, \mathrm{~d}\left(x^{n}\right)=n x^{n-1} \mathrm{~d} x , 这叫 “幂的微分”;$<br>$(3)  \mathrm{d}^{2} x=0 , 这是因为  \frac{\mathrm{d}^{2} x}{\mathrm{~d} x^{2}}=(x)^{\prime \prime}=0 , 千是  \mathrm{d}^{2} x=0 .$</p></blockquote><blockquote><p>二阶可导, 一阶处处连续且可导</p></blockquote><h2 id="新增重要数列极限">新增重要数列极限</h2><blockquote><p>对于n项数列和的极限步骤:</p><ol><li>先提$\frac{1}{n}$</li><li>若能凑成$f(\frac{1}{n})$ 则用定积分定义</li><li>若不能则考虑夹逼定理</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 考研模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 极限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人的算法竞赛模板</title>
      <link href="/posts/3171.html"/>
      <url>/posts/3171.html</url>
      
        <content type="html"><![CDATA[<h3 id="模板-部分">模板(部分)</h3><h4 id="快读快写">快读快写</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    T f = <span class="number">1</span>; x = <span class="number">0</span>; <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... other&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; x, other&amp;... y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(y...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>); </span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x, <span class="type">char</span> ch)</span> </span>&#123; </span><br><span class="line"><span class="built_in">print</span>(x), <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本模板">基本模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug(x...) cerr &lt;&lt; (#x) &lt;&lt;&quot; -&gt; &quot;, err(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树状数组">树状数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += (x &amp; (-x)))</span><br><span class="line">            tree[x] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> res = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x; x -= (x &amp; (-x)))</span><br><span class="line">            res = (res + tree[x]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr;</span><br></pre></td></tr></table></figure><h4 id="秦九韶算法">秦九韶算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(string s, <span class="type">int</span> b)</span> </span>&#123; <span class="comment">// 讲b进制转化成10进制</span></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isdigit</span>(i)) res = res * b +i - <span class="string">&#x27;A&#x27;</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">else</span> res = res * b + i - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合数高精度">组合数高精度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        res += n / p;</span><br><span class="line">        n /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="comment">// 计算超大整数,返回一个vector数组</span></span><br><span class="line">    <span class="built_in">get_primes</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> p = primes[i];</span><br><span class="line">        sum[i] = <span class="built_in">get</span>(a, p) - <span class="built_in">get</span>(a - b, p) - <span class="built_in">get</span>(b, p);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum[i]; j ++ ) &#123;</span><br><span class="line">            res = <span class="built_in">mul</span>(res, primes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合数取余">组合数取余</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> combination &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Q = <span class="number">1e7</span> + <span class="number">9</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> fact[Q], infact[Q];</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qmi</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        a %= mod;</span><br><span class="line">        <span class="keyword">while</span> (k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">            a = a * a % mod;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) fact[i] = fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        infact[Q] = <span class="built_in">qmi</span>(fact[Q], mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = Q; i &gt;= <span class="number">1</span>; i--) infact[i - <span class="number">1</span>] = infact[i] * i % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fact[<span class="number">0</span>]) <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span> || n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fact[n] * infact[m] % mod * infact[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ctl</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(<span class="number">2</span> * n, n) - <span class="built_in">C</span>(<span class="number">2</span> * n, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合数Lucas定理">组合数Lucas定理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; i ++, j -- ) &#123;</span><br><span class="line">        res = res * j % p;</span><br><span class="line">        res = res * <span class="built_in">qmi</span>(i, p - <span class="number">2</span>, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123; <span class="comment">// 求lucas(a,b) % p</span></span><br><span class="line">    <span class="keyword">if</span>(a &lt; p &amp;&amp; b &lt; p ) <span class="keyword">return</span> <span class="built_in">c</span>(a, b, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">c</span>(a % p, b % p, p) * <span class="built_in">lucas</span>(a / p, b / p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数位dp">数位dp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> f[N][N][<span class="number">2</span>], a[N];;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> last, <span class="type">int</span> lead, <span class="type">int</span> limit, <span class="type">int</span> yi)</span></span>&#123;</span><br><span class="line"><span class="comment">// yi是判断数位有无1, 没有的话可以删去这一维度;</span></span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> yi;</span><br><span class="line">    <span class="keyword">if</span>(!lead &amp;&amp; !limit &amp;&amp; f[pos][last][yi] != <span class="number">-1</span>) <span class="keyword">return</span> f[pos][last][yi];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= up; i ++ )&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/*不符合*/</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(lead) <span class="comment">//有前导零  ,  1为有前导零</span></span><br><span class="line"><span class="keyword">if</span> (!i) res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, <span class="number">1</span>, limit &amp;&amp; i == up, yi);</span><br><span class="line"><span class="keyword">else</span> res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, <span class="number">0</span>, limit &amp;&amp; i == up, yi || (i == <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, <span class="number">0</span>, limit &amp;&amp; i == up, yi || (i == <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead) f[pos][last][yi] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) a[ ++ len] = n % <span class="number">10</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接矩阵dijkstra">邻接矩阵dijkstra</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆优化dijkstra">堆优化dijkstra</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, h[N], w[N], e[N], ne[N], idx, dist[N];      </span><br><span class="line"><span class="type">bool</span> st[N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i]) &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="并查集">并查集</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line"><span class="type">int</span> f[N], sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">sz[y] += sz[x], f[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="keyword">inline</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="keyword">inline</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125; p;</span><br></pre></td></tr></table></figure><h4 id="欧拉筛">欧拉筛</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], phi[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ol</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">      primes[cnt ++] = i;</span><br><span class="line">      phi[i] = i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++) &#123;</span><br><span class="line">      st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        phi[primes[j] * i] = primes[j] * phi[i];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      phi[primes[j] * i] = (primes[j] - <span class="number">1</span>) * phi[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展欧几里得算法">扩展欧几里得算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求x, y，使得ax + by = gcd(a, b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a / b) * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="裴波那切数列-logn-无敌">裴波那切数列(logn)无敌</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PII <span class="title">cal</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">PII t = <span class="built_in">cal</span>(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> f1 = (t.fi * t.fi + t.se * t.se) % mod;</span><br><span class="line"><span class="type">int</span> f2 = (t.fi * (<span class="number">2</span> * t.se - t.fi) % mod + mod) % mod;</span><br><span class="line"><span class="keyword">if</span> (!(x &amp; <span class="number">1</span>)) <span class="keyword">return</span> <span class="built_in">make_pair</span>(f2, f1);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(f1, (f1 + f2) % mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高斯消元">高斯消元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="type">double</span> a[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123; <span class="comment">// 返回1是有无穷解,2是无解,0是唯一解</span></span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> t = r;<span class="comment">// 先找到当前这一列，绝对值最大的一个数字所在的行号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c])) &#123;</span><br><span class="line">                t = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt; n + <span class="number">1</span>; i ++ ) <span class="built_in">swap</span>(a[t][i], a[r][i]);<span class="comment">//把当前这一行，换到最上面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];<span class="comment">//把这一行第一个数弄成1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++ ) &#123; <span class="comment">// 把当前列下面的所有数，全部消成 0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; eps) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; j -- ) &#123;</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        r ++ ;<span class="comment">//换下一行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][n]) &gt; eps) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) &#123;<span class="comment">// 回溯</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++ ) &#123;</span><br><span class="line">            a[i][n] -= a[j][n] * a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a[i][n] 就是xi的解</span></span><br></pre></td></tr></table></figure><h4 id="高精度加法">高精度加法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高精度除法">高精度除法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高精度减法">高精度减法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="高精度乘法-高精-高精">高精度乘法(高精*高精)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">C</span><span class="params">(A.size() + B.size(), <span class="number">0</span>)</span></span>; <span class="comment">// 初始化为 0，且999*99最多 5 位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; B.<span class="built_in">size</span>(); j++)</span><br><span class="line">            C[i + j] += A[i] * B[j];</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; C.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// i = C.size() - 1时 t 一定小于 10</span></span><br><span class="line">        t += C[i];</span><br><span class="line">        C[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>(); <span class="comment">// 必须要去前导 0，因为最高位很可能是 0</span></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高精度乘法-高精-int">高精度乘法(高精*int)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高精万能-±">高精万能 ±*/%</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>, base=<span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> aux[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ints</span>&#123;</span><br><span class="line">    <span class="type">int</span> s[N],l;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;l=<span class="number">0</span>;<span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s[l]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l - <span class="number">1</span>; i; i --) <span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> i,x=<span class="number">0</span>,k=<span class="number">1</span>,L=<span class="number">0</span>,fl,o;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span>(;c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>;c=<span class="built_in">getchar</span>());</span><br><span class="line">        <span class="keyword">for</span>(;c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>;c=<span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(L<span class="number">-1</span>)&amp;&amp;!aux[L])L--;</span><br><span class="line">        aux[++L]=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">init</span>();l=L/<span class="number">8</span>+((o=L%<span class="number">8</span>)&gt;<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= o; i ++) x = x*<span class="number">10</span> + aux[i];</span><br><span class="line">        <span class="keyword">if</span> (o) &#123; s[l] = x;&#125; fl =! o ? l + <span class="number">1</span> : l;</span><br><span class="line">        <span class="keyword">for</span>(i=o+<span class="number">1</span>,x=<span class="number">0</span>;i&lt;=L;i++,k++)&#123;</span><br><span class="line">            x=x*<span class="number">10</span>+aux[i];</span><br><span class="line">            <span class="keyword">if</span> (!(k^<span class="number">8</span>))s[--fl]=x,x=k=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!l)l=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">toint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ll x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)x=x*base+s[i];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>=(<span class="type">int</span> b)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">do</span> s[++l]=b%base,b/=base;<span class="keyword">while</span>(b&gt;<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>=(ll b)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">do</span> s[++l]=b%base,b/=base;<span class="keyword">while</span>(b&gt;<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+(<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">        ints c=*<span class="keyword">this</span>;ll x=b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l&amp;&amp;x;i++)x=x+c.s[i],c.s[i]=x%base,x/=base;</span><br><span class="line">        <span class="keyword">if</span>(x)c.s[++c.l]=x;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+(<span class="type">const</span> ll &amp;b)&#123;</span><br><span class="line">        ints c=*<span class="keyword">this</span>;ll x=b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l&amp;&amp;x;i++)x=x+c.s[i],c.s[i]=x%base,x/=base;</span><br><span class="line">        <span class="keyword">if</span>(x)c.s[++c.l]=x;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+(ints &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.l&lt;<span class="number">3</span>)<span class="keyword">return</span> *<span class="keyword">this</span>+b.<span class="built_in">toint</span>();</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;<span class="type">int</span> k=l&lt;b.l?b.l:l;c.<span class="built_in">init</span>(),c.l=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)x=x+s[i]+b.s[i],c.s[i]=x%base,x/=base;</span><br><span class="line">        <span class="keyword">if</span>(x)c.s[++c.l]=x;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-(<span class="type">const</span> ints &amp;b)&#123;</span><br><span class="line">        ints c,d=*<span class="keyword">this</span>;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((x=d.s[i])&lt;b.s[i])d.s[i+<span class="number">1</span>]--,x+=base;</span><br><span class="line">            c.s[i]=x-b.s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        c.l=l;</span><br><span class="line">        <span class="keyword">for</span>(;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-(<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>-(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-(<span class="type">const</span> ll&amp;b)&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>-(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i++)x=x+<span class="number">1ll</span>*s[i]*b,c.s[i]=x%base,x/=base;</span><br><span class="line">        <span class="keyword">for</span>(c.l=l;x;x/=base)c.s[++c.l]=x%base;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*(ints&amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.l&lt;<span class="number">2</span>)<span class="keyword">return</span> *<span class="keyword">this</span>*b.<span class="built_in">toint</span>();</span><br><span class="line">        ints c;ll x;<span class="type">int</span> i,j,k;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= l; i ++)&#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= b.l; j ++) &#123;</span><br><span class="line">            x=x+<span class="number">1ll</span>*s[i]*b.s[j]+c.s[k=i+j<span class="number">-1</span>],c.s[k]=x%base,x/=base;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x)c.s[i+b.l]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (c.l = l + b.l;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*(<span class="type">const</span> ll &amp;b)&#123;</span><br><span class="line">        ints c;</span><br><span class="line">        <span class="keyword">if</span>(b&gt;<span class="number">2e9</span>)&#123;c=b;<span class="keyword">return</span> *<span class="keyword">this</span>*c;&#125;</span><br><span class="line">        ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i++)x=x+b*s[i],c.s[i]=x%base,x/=base;</span><br><span class="line">        <span class="keyword">for</span>(c.l=l;x;x/=base)c.s[++c.l]=x%base;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/(<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)c.s[i]=(x*base+s[i])/b,x=(x*base+s[i])%b;</span><br><span class="line">        <span class="keyword">for</span>(c.l=l;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/(<span class="type">const</span> ll&amp;b)&#123;</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)c.s[i]=(x*base+s[i])/b,x=(x*base+s[i])%b;</span><br><span class="line">        <span class="keyword">for</span>(c.l=l;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/(ints&amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.l&lt;<span class="number">2</span>)<span class="keyword">return</span> *<span class="keyword">this</span>/b.<span class="built_in">toint</span>();</span><br><span class="line">        ints c,d;<span class="type">int</span> i,j,le,r,mid,k;c.<span class="built_in">init</span>();d.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(i=l;i;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=++d.l;j&gt;<span class="number">1</span>;j--)d.s[j]=d.s[j<span class="number">-1</span>];</span><br><span class="line">            d.s[<span class="number">1</span>]=s[i];</span><br><span class="line">            <span class="keyword">if</span>(d&lt;b)<span class="keyword">continue</span>;</span><br><span class="line">            le=k=<span class="number">0</span>;r=base<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(le&lt;=r)&#123;</span><br><span class="line">                mid=(le+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(b*mid&lt;=d)le=mid+<span class="number">1</span>,k=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.s[i]=k,d=d-b*k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(c.l=l;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%(<span class="type">const</span> <span class="type">int</span> &amp;b)&#123;</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)x=(x*base+s[i])%b;</span><br><span class="line">        <span class="keyword">return</span> c=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%(<span class="type">const</span> ll&amp;b)&#123;</span><br><span class="line">        ints c;ll x=<span class="number">0</span>;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)x=(x*base+s[i])%b;</span><br><span class="line">        <span class="keyword">return</span> c=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%(ints&amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b.l&lt;<span class="number">2</span>)<span class="keyword">return</span> *<span class="keyword">this</span>%b.<span class="built_in">toint</span>();</span><br><span class="line">        ints c;<span class="type">int</span> i,j,le,r,mid,k;c.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(i=l;i;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=++c.l;j&gt;<span class="number">1</span>;j--)c.s[j]=c.s[j<span class="number">-1</span>];</span><br><span class="line">            c.s[<span class="number">1</span>]=s[i];</span><br><span class="line">            <span class="keyword">if</span>(c&lt;b)<span class="keyword">continue</span>;</span><br><span class="line">            le=k=<span class="number">0</span>,r=base<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(le&lt;=r)&#123;</span><br><span class="line">                mid=(le+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(b*mid&lt;=c)le=mid+<span class="number">1</span>,k=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c=c-b*k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;!c.s[c.l]&amp;&amp;c.l&gt;<span class="number">1</span>;c.l--);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+=(ints&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+=(ll&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>+=(<span class="type">int</span> &amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>+b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-=(ints&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>-b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-=(ll&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>-b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>-=(<span class="type">int</span> &amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>-b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*=(ints&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>*b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*=(ll&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>*b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>*=(<span class="type">int</span> &amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>*b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/=(ints&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>/b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/=(ll&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>/b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>/=(<span class="type">int</span> &amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>/b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%=(ints&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>%b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%=(ll&amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>%b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> ints <span class="keyword">operator</span>%=(<span class="type">int</span> &amp;b)&#123;<span class="keyword">return</span> *<span class="keyword">this</span>=*<span class="keyword">this</span>%b;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)<span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)<span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> s[i]&lt;b.s[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> l&gt;b.l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)</span><br><span class="line">            <span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> s[i]&gt;b.s[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> l&gt;b.l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)<span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> s[i]&gt;b.s[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)<span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> ints&amp;b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l^b.l)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i;i--)<span class="keyword">if</span>(s[i]^b.s[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&lt;(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="built_in">this</span>&lt;=(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&gt;(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&gt;=(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>==(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(ll b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>!=(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&lt;(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="built_in">this</span>&lt;=(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&gt;(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>&gt;=(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>==(c=b);&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">int</span> b)<span class="type">const</span>&#123;ints c;<span class="keyword">return</span> *<span class="keyword">this</span>!=(c=b);&#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="克鲁斯卡尔算法">克鲁斯卡尔算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最近公共祖先-LCA">最近公共祖先 (LCA)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx, dist[N], fa[N][<span class="number">20</span>], depth[N];</span><br><span class="line"><span class="type">int</span> n, m, root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    depth[<span class="number">0</span>] = <span class="number">0</span>, depth[u] = <span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(depth[j]) <span class="keyword">continue</span>;</span><br><span class="line">            depth[j] = depth[t] + <span class="number">1</span>;</span><br><span class="line">            fa[j][<span class="number">0</span>] = t;</span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">19</span>; k ++ )</span><br><span class="line">                fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a] &lt; depth[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">19</span>; k &gt;= <span class="number">0</span>; k -- )</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][k]] &gt;= depth[b])</span><br><span class="line">            a = fa[a][k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(b == a) <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">19</span>; k &gt;= <span class="number">0</span>; k -- )</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])</span><br><span class="line">            a = fa[a][k], b = fa[b][k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">DIS</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = <span class="built_in">lca</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> dist[a] + dist[b] - <span class="number">2</span> * dist[fa];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123; <span class="comment">// a到b距离c最近的点</span></span><br><span class="line">    <span class="type">int</span> L1 = <span class="built_in">lca</span>(a, b), L2 = <span class="built_in">lca</span>(a, c), L3 = <span class="built_in">lca</span>(b, c);</span><br><span class="line">    <span class="type">int</span> L4 = <span class="built_in">lca</span>(L2, c), L5 = <span class="built_in">lca</span>(L3, c), L6 = <span class="built_in">lca</span>(L1, c);</span><br><span class="line">    <span class="keyword">if</span>(depth[L1] &gt;= depth[c]) <span class="keyword">return</span> L1;</span><br><span class="line">    <span class="type">int</span> res[<span class="number">5</span>];</span><br><span class="line">    res[<span class="number">0</span>] = depth[a] + depth[c] - <span class="number">2</span> * depth[L2];</span><br><span class="line">    res[<span class="number">1</span>] = depth[b] + depth[c] - <span class="number">2</span> * depth[L3];</span><br><span class="line">    res[<span class="number">2</span>] = depth[L2] + depth[c] - <span class="number">2</span> * depth[L4];</span><br><span class="line">    <span class="keyword">if</span> (depth[L2] &lt; depth[L1]) res[<span class="number">2</span>] = <span class="number">1E9</span>;</span><br><span class="line">    res[<span class="number">3</span>] = depth[L3] + depth[c] - <span class="number">2</span> * depth[L5];</span><br><span class="line">    <span class="keyword">if</span> (depth[L3] &lt; depth[L1]) res[<span class="number">3</span>] = <span class="number">1E9</span>;</span><br><span class="line">    res[<span class="number">4</span>] = depth[L1] + depth[c] - <span class="number">2</span> * depth[L6];</span><br><span class="line">    <span class="type">int</span> tmp[] = &#123;a, b, L2, L3, L1&#125;;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1E9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; <span class="number">5</span>; pos++)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, res[pos]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; <span class="number">5</span>; pos++)</span><br><span class="line">        <span class="keyword">if</span> (res[pos] == ans) <span class="keyword">return</span> tmp[pos];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="离散化">离散化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getid</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>(), val) - alls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="马拉车算法">马拉车算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[N]; <span class="comment">// 老串(题目要求的)</span></span><br><span class="line"><span class="type">char</span> str[N]; <span class="comment">// 马拉车串</span></span><br><span class="line"><span class="type">int</span>  p[N], n; <span class="comment">//p[i] 表示以 i 为中心的最长回文的半径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    str[k ++ ] = <span class="string">&#x27;@&#x27;</span>, str[k ++ ] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        str[k ++ ] = s[i];</span><br><span class="line">        str[k ++ ] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str[k ++ ] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">    <span class="comment">// 上面是对马拉车进行进行字符串改造</span></span><br><span class="line">    n = k;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>, id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; mx) p[i] = <span class="built_in">min</span>(p[id * <span class="number">2</span> - i], mx - i);<span class="comment">// 只能算在mx范围内的</span></span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i - p[i]] == str[i + p[i]]) p[i] ++;<span class="comment">//想两边拓展</span></span><br><span class="line">        <span class="keyword">if</span>(p[i] + i &gt; mx) &#123; <span class="comment">//更新mx</span></span><br><span class="line">            mx = p[i] + i;</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="矩阵模板">矩阵模板 * +</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> v[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> Q = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">Matrix</span>() &#123;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span> * (<span class="type">const</span> Matrix &amp;Ma) <span class="type">const</span> &#123;</span><br><span class="line">Matrix res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; i += <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; Q; j += <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; Q; k += <span class="number">1</span>)</span><br><span class="line">res.v[i][j] = (res.v[i][j] + v[i][k] * Ma.v[k][j]) % mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;Ma) <span class="type">const</span> &#123;</span><br><span class="line">Matrix res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; i += <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; Q; j += <span class="number">1</span>)</span><br><span class="line">res.v[i][j] = (v[i][j] + Ma.v[i][j]) % mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="取模板子">取模板子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">long</span> <span class="type">long</span> v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = v % mod + mod;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= mod)</span><br><span class="line">            v %= mod;</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(p &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= mod) &#123;</span><br><span class="line">            p %= (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Mint a = *<span class="keyword">this</span>, result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &amp; <span class="number">1</span>) result *= a;</span><br><span class="line">            a *= a, p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> += (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x += other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= mod) x -= mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> -= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x -= other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> *= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x = (<span class="type">long</span> <span class="type">long</span>)(x) * other.x % mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> /= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= other.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x != other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span> - () <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span> ? <span class="number">0</span> : mod - x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> ++ () &#123;</span><br><span class="line">        x = x == mod - <span class="number">1</span> ? <span class="number">0</span> : x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>--() &#123;</span><br><span class="line">        x = x == <span class="number">0</span> ? mod - <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) /= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组合数取模板子">组合数取模板子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">long</span> <span class="type">long</span> v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = v % mod + mod;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= mod)</span><br><span class="line">            v %= mod;</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(p &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= mod) &#123;</span><br><span class="line">            p %= (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Mint a = *<span class="keyword">this</span>, result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &amp; <span class="number">1</span>) result *= a;</span><br><span class="line">            a *= a, p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> += (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x += other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= mod) x -= mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> -= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x -= other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> *= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x = (<span class="type">long</span> <span class="type">long</span>)(x) * other.x % mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> /= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= other.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x != other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span> - () <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span> ? <span class="number">0</span> : mod - x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> ++ () &#123;</span><br><span class="line">        x = x == mod - <span class="number">1</span> ? <span class="number">0</span> : x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>--() &#123;</span><br><span class="line">        x = x == <span class="number">0</span> ? mod - <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) /= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> combination &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Q = <span class="number">1e7</span> + <span class="number">9</span>;</span><br><span class="line">    Mint fact[Q], infact[Q];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) fact[i] = fact[i - <span class="number">1</span>] * i;</span><br><span class="line">        infact[Q] = fact[Q].<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = Q; i &gt;= <span class="number">1</span>; i--) infact[i - <span class="number">1</span>] = infact[i] * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fact[<span class="number">0</span>] == <span class="number">0</span>) <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span> || n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> fact[n] * infact[m] * infact[n - m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">ctl</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(<span class="number">2</span> * n, n) - <span class="built_in">C</span>(<span class="number">2</span> * n, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> combination;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线性筛素数">线性筛素数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速幂">快速幂</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % p, t = m;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * t % p;</span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间合并">区间合并</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span> </span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125; <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线段树区间修改版">线段树区间修改版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, add = <span class="number">0</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].r - tr[u].l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(Node u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.r - u.l + <span class="number">1</span>;    <span class="comment">// sum = len * change(值)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (!u.add) <span class="keyword">return</span>;</span><br><span class="line">l.add += u.add, r.add += u.add;</span><br><span class="line">l.val += (<span class="type">long</span> <span class="type">long</span>) <span class="built_in">len</span>(l) * u.add;</span><br><span class="line">r.val += (<span class="type">long</span> <span class="type">long</span>) <span class="built_in">len</span>(r) * u.add;</span><br><span class="line">u.add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// do sth</span></span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">tr[u].add += c;</span><br><span class="line">tr[u].val += <span class="built_in">len</span>(u) * c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br></pre></td></tr></table></figure><h4 id="线段树区间最大子段和">线段树区间最大子段和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> w[N]; <span class="comment">// 目标数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum, lmax, rmax, tmax;</span><br><span class="line">&#125; tr[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line">    u.sum = l.sum + r.sum;</span><br><span class="line">    u.lmax = <span class="built_in">max</span>(l.lmax, l.sum + r.lmax);</span><br><span class="line">    u.rmax = <span class="built_in">max</span>(r.rmax, r.sum + l.rmax);</span><br><span class="line">    u.tmax = <span class="built_in">max</span>(<span class="built_in">max</span>(l.tmax, r.tmax), l.rmax + r.lmax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u] = &#123;l, r, w[l], w[l], w[l], w[l]&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[u] = &#123;l, r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// 修改第x个位置的数变成v</span></span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == x &amp;&amp;  tr[u].r == x) &#123;</span><br><span class="line">        tr[u] = &#123;x, x, v, v, v, v&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 查询最大区间[l, r]连续子段和</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            Node res;</span><br><span class="line">            <span class="built_in">pushup</span>(res, left, right);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线段树单点修改版">线段树单点修改版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x) </span><br><span class="line"><span class="keyword">return</span> tr[u].val = tr[u].val + v, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">        <span class="type">int</span> m = tr[u].l + ((tr[u].r - tr[u].l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(r &lt;= m) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l &gt; m) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node ret;</span><br><span class="line">            Node ret_left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            Node ret_right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="built_in">pushup</span>(ret, ret_left, ret_right);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Segment_Tree st;</span><br></pre></td></tr></table></figure><h4 id="线段树区间修改查区间GCD">线段树区间修改查区间GCD</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="type">int</span> sum, d;</span><br><span class="line">    &#125; tr[N * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line">        u.sum = l.sum + r.sum;</span><br><span class="line">        u.d = <span class="built_in">gcd</span>(l.d, r.d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="type">int</span> b = w[r] - w[r - <span class="number">1</span>];</span><br><span class="line">            tr[u] = &#123;l, r, b, b&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tr[u].l = l, tr[u].r = r;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">            <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x) &#123;</span><br><span class="line">            <span class="type">int</span> d = tr[u].sum + v;</span><br><span class="line">            tr[u] = &#123;x, x, d, d&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r), right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">                Node res;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">pushup</span>(res, left, right), res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Gcd_query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        Node left = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, l);</span><br><span class="line">        Node right = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(l + <span class="number">1</span> &lt;= r) right = <span class="built_in">query</span>(<span class="number">1</span>, l + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">gcd</span>(left.sum, right.d));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">easy_modify</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123; <span class="comment">//区间的值加上d</span></span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, l, d);</span><br><span class="line">        <span class="keyword">if</span>(r + <span class="number">1</span> &lt;= n) <span class="built_in">modify</span>(<span class="number">1</span>, r + <span class="number">1</span>, -d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree;</span><br></pre></td></tr></table></figure><h4 id="线段树区间乘区间加查区间和">线段树区间乘区间加查区间和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="type">int</span> sum, add, mul;</span><br><span class="line">    &#125; tr[N * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">        u.sum = l.sum + r.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tr[u] = &#123;l, r, w[l], <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(Node &amp;t, <span class="type">int</span> add, <span class="type">int</span> mul)</span> </span>&#123;</span><br><span class="line">        t.sum = (t.sum * mul + (t.r - t.l + <span class="number">1</span>) * add);</span><br><span class="line">        t.mul = t.mul * mul;</span><br><span class="line">        t.add = (t.add * mul + add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">eval</span>(tr[u &lt;&lt; <span class="number">1</span>], tr[u].add, tr[u].mul);</span><br><span class="line">        <span class="built_in">eval</span>(tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tr[u].add, tr[u].mul);</span><br><span class="line">        tr[u].add = <span class="number">0</span>;</span><br><span class="line">        tr[u].mul = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> add, <span class="type">int</span> mul)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只是算乘法令 add = 0, 只是算加法 mul = 1 即可</span></span><br><span class="line">        <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="built_in">eval</span>(tr[u], add, mul);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(u);</span><br><span class="line">            <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, add, mul);</span><br><span class="line">            <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, add, mul);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 区间和</span></span><br><span class="line">        <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) res = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) res = ( res + <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree;</span><br></pre></td></tr></table></figure><h4 id="龟乘法-防爆">龟乘法(防爆)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">slow_mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(y) &#123;</span><br><span class="line"><span class="keyword">if</span>(y &amp; <span class="number">1</span>)</span><br><span class="line">ans = (ans + x) % mod;</span><br><span class="line">x = (x + x) % mod;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SPFA算法">SPFA算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j]) &#123;   <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ST表">ST表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> Log[N], f[N][<span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i ++ ) &#123;</span><br><span class="line">Log[i] = Log[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) f[i][<span class="number">0</span>] = s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= Log[n]; j ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++ ) &#123;</span><br><span class="line">f[i][j] = <span class="built_in">gcd</span>(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 查询</span></span><br><span class="line"><span class="type">int</span> k = Log[r - l + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(f[l][k], f[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tarjan有向图缩点">Tarjan有向图缩点</h4><blockquote><p>有向图可连通的块缩成一个点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> stk[N], top;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], timestamp;</span><br><span class="line"><span class="type">int</span> id[N], scc_cnt;<span class="comment">// id[i]表示i点属于的连通分支</span></span><br><span class="line"><span class="type">bool</span> in_stk[N]; <span class="comment">// scc_cnt连通分量的个数 Bcc[i]表示连通分量i所含的节点</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; Bcc[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++ timestamp;</span><br><span class="line">    stk[++ top] = u, in_stk[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[j]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (in_stk[j]) &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">        <span class="type">int</span> now;</span><br><span class="line">        ++ scc_cnt;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            now = stk[top --];</span><br><span class="line">            in_stk[now] = <span class="literal">false</span>;</span><br><span class="line">            id[now] = scc_cnt;</span><br><span class="line">            Bcc[scc_cnt].<span class="built_in">push_back</span>(now);</span><br><span class="line">        &#125; <span class="keyword">while</span>(now != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan_init</span><span class="params">(<span class="type">int</span> Q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</span><br><span class="line">    <span class="built_in">memset</span>(in_stk, <span class="literal">false</span>, <span class="keyword">sizeof</span> in_stk);</span><br><span class="line">    top = timestamp = scc_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tarjin求割点">Tarjin求割点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], timestamp;</span><br><span class="line"><span class="type">int</span> Siz[N], ans[N], root;</span><br><span class="line"><span class="type">bool</span> ok[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++ timestamp;</span><br><span class="line">Siz[u] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (!dfn[j]) &#123;</span><br><span class="line"><span class="built_in">tarjan</span>(j);</span><br><span class="line">low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">Siz[u] += Siz[j];</span><br><span class="line"><span class="keyword">if</span> (low[j] &gt;= dfn[u]) &#123;</span><br><span class="line">cnt ++;</span><br><span class="line">sum += Siz[j];</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">1</span> || u != root) ok[u] = <span class="literal">true</span>; <span class="comment">// 判断这个点是否为割点</span></span><br><span class="line">ans[u] += (n - Siz[j]) * (Siz[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ok[u]) ans[u] += (n - sum - <span class="number">1</span>) * (sum + <span class="number">1</span>) + n - <span class="number">1</span>; <span class="comment">// 是割点</span></span><br><span class="line"><span class="keyword">else</span> ans[u] = (n - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Tarjin-无向图缩点">Tarjin 无向图缩点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>, M = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dfn[N], low[N], timestamp;</span><br><span class="line"><span class="type">int</span> stk[N], top;</span><br><span class="line"><span class="type">int</span> id[N], dcc_cnt;</span><br><span class="line"><span class="type">bool</span> is_bridge[M];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> from)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++ timestamp;</span><br><span class="line">    stk[ ++ top] = u;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[j]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j, i);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[j]);</span><br><span class="line">            <span class="keyword">if</span> (dfn[u] &lt; low[j])</span><br><span class="line">                is_bridge[i] = is_bridge[i ^ <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != (from ^ <span class="number">1</span>))</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">        ++ dcc_cnt;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            y = stk[top -- ];</span><br><span class="line">            id[y] = dcc_cnt;</span><br><span class="line">        &#125; <span class="keyword">while</span> (y != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string数字串取模">string数字串取模</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">smod</span><span class="params">(string s, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//假设字符串s符合条件，代表一个整数(正数或者负数)</span></span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">    start = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = start; i &lt; len; i++) &#123;</span><br><span class="line">    num = (num * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>) % m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树上路径交">树上路径交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int query(int x, int y, int xx, int yy) &#123;</span><br><span class="line">    int t[4] = &#123;lca(x, xx), lca(x, yy), lca(y, xx), lca(y, yy)&#125;;</span><br><span class="line">    sort(t, t + 4);</span><br><span class="line">    int r = lca(x, y), rr = lca(xx, yy);</span><br><span class="line">    if (depth[t[0]] &lt; min(depth[r], depth[rr]) || depth[t[2]] &lt; max(depth[r], depth[rr]))</span><br><span class="line">        return 0;</span><br><span class="line">    int tt = lca(t[2], t[3]);</span><br><span class="line">    int ret = 1 + depth[t[2]] + depth[t[3]] - depth[tt] * 2;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二分图匹配">二分图匹配</h4><ul><li>最小覆盖数 = 最大匹配数</li><li>最大独立集 = 顶点数 - 二分图匹配数</li><li>DAG 最小路径覆盖数 = 结点数 - 拆点后二分图最大匹配数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxMatch</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; G[maxn];</span><br><span class="line">    <span class="type">int</span> vis[maxn], left[maxn], clk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) G[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(left, <span class="number">-1</span>, <span class="keyword">sizeof</span> left);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: G[u])</span><br><span class="line">            <span class="keyword">if</span> (vis[v] != clk) &#123;</span><br><span class="line">                vis[v] = clk;</span><br><span class="line">                <span class="keyword">if</span> (left[v] == <span class="number">-1</span> || <span class="built_in">dfs</span>(left[v])) &#123;</span><br><span class="line">                    left[v] = u;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">match</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (clk = <span class="number">0</span>; clk &lt;= n; ++clk)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(clk)) ++ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; MM;</span><br></pre></td></tr></table></figure><h4 id="欧拉路径">欧拉路径</h4><blockquote><p>欧拉通路与欧拉回路<br>欧拉通路： 对于图G来说，如果存在一条通路包含G中所有的边，则该通路成为欧拉通路，也称欧拉路径。<br>欧拉回路： 如果欧拉路径是一条回路，那么称其为欧拉回路。<br>欧拉图 ： 含有欧拉回路的图是欧拉图。</p><p>对无向图G和有向图H：<br>图G存在欧拉路径与欧拉回路的充要条件分别是：<br>欧拉路径： 图中所有奇度点的数量为0或2。<br>欧拉回路： 图中所有点的度数都是偶数。</p></blockquote><h4 id="拓扑排序">拓扑排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">toporder</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; orders;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!deg[i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            orders.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: G[u])</span><br><span class="line">            <span class="keyword">if</span> (!--deg[v]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                orders.<span class="built_in">push_back</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差分约束">差分约束</h4><p>一个系统 $n$ 个变量和 $m$ 个约束条件组成，每个约束条件形如 $x_j-x_i \le b_k$。可以发现每个约束条件都形如最短路中的三角不等式 $d_u-d_v \le w_{u,v}$。因此连一条边 $(i,j,b_k)$ 建图。</p><p>若要使得所有量两两的值最接近，源点到各点的距离初始成 $0$，跑最远路。</p><p>若要使得某一变量与其他变量的差尽可能大，则源点到各点距离初始化成 $\infty$，跑最短路。</p><h4 id="AC自动机">AC自动机</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, M = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mp</span><span class="params">(<span class="type">char</span> ch)</span> </span>&#123; <span class="keyword">return</span> ch - <span class="string">&#x27;a&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ACA</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch[N][M], danger[N], fail[N];</span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sz = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ch[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(danger, <span class="number">0</span>, <span class="keyword">sizeof</span> danger);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string &amp;s, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(); <span class="type">int</span> u = <span class="number">0</span>, c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            c = <span class="built_in">mp</span>(s[i]);</span><br><span class="line">            <span class="keyword">if</span> (!ch[u][c]) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(ch[sz], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[sz]);</span><br><span class="line">                danger[sz] = <span class="number">0</span>; ch[u][c] = sz++;</span><br><span class="line">            &#125;</span><br><span class="line">            u = ch[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        danger[u] |= <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>, u; c &lt; M; c++) &#123;</span><br><span class="line">            u = ch[<span class="number">0</span>][c];</span><br><span class="line">            <span class="keyword">if</span> (u) &#123; Q.<span class="built_in">push</span>(u); fail[u] = <span class="number">0</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> r = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            danger[r] |= danger[fail[r]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>, u; c &lt; M; c++) &#123;</span><br><span class="line">                u = ch[r][c];</span><br><span class="line">                <span class="keyword">if</span> (!u) &#123;</span><br><span class="line">                    ch[r][c] = ch[fail[r]][c];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                fail[u] = ch[fail[r]][c];</span><br><span class="line">                Q.<span class="built_in">push</span>(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ac;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    ac.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        ac.<span class="built_in">insert</span>(s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ac.<span class="built_in">build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>; n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        u = ac.ch[u][<span class="built_in">mp</span>(s[i])];</span><br><span class="line">        <span class="keyword">if</span> (ac.danger[u]) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日期">日期</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Routines for performing computations on dates.  In these routines,</span></span><br><span class="line"><span class="comment">// months are exprsesed as integers from 1 to 12, days are expressed</span></span><br><span class="line"><span class="comment">// as integers from 1 to 31, and years are expressed as 4-digit</span></span><br><span class="line"><span class="comment">// integers.</span></span><br><span class="line"></span><br><span class="line">string dayOfWeek[] = &#123;<span class="string">&quot;Mo&quot;</span>, <span class="string">&quot;Tu&quot;</span>, <span class="string">&quot;We&quot;</span>, <span class="string">&quot;Th&quot;</span>, <span class="string">&quot;Fr&quot;</span>, <span class="string">&quot;Sa&quot;</span>, <span class="string">&quot;Su&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// converts Gregorian date to integer (Julian day number)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DateToInt</span> <span class="params">(<span class="type">int</span> m, <span class="type">int</span> d, <span class="type">int</span> y)</span></span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">    <span class="number">1461</span> * (y + <span class="number">4800</span> + (m - <span class="number">14</span>) / <span class="number">12</span>) / <span class="number">4</span> +</span><br><span class="line">    <span class="number">367</span> * (m - <span class="number">2</span> - (m - <span class="number">14</span>) / <span class="number">12</span> * <span class="number">12</span>) / <span class="number">12</span> - </span><br><span class="line">    <span class="number">3</span> * ((y + <span class="number">4900</span> + (m - <span class="number">14</span>) / <span class="number">12</span>) / <span class="number">100</span>) / <span class="number">4</span> + </span><br><span class="line">    d - <span class="number">32075</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// converts integer (Julian day number) to Gregorian date: month/day/year</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IntToDate</span> <span class="params">(<span class="type">int</span> jd, <span class="type">int</span> &amp;m, <span class="type">int</span> &amp;d, <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> x, n, i, j;</span><br><span class="line"></span><br><span class="line">  x = jd + <span class="number">68569</span>;</span><br><span class="line">  n = <span class="number">4</span> * x / <span class="number">146097</span>;</span><br><span class="line">  x -= (<span class="number">146097</span> * n + <span class="number">3</span>) / <span class="number">4</span>;</span><br><span class="line">  i = (<span class="number">4000</span> * (x + <span class="number">1</span>)) / <span class="number">1461001</span>;</span><br><span class="line">  x -= <span class="number">1461</span> * i / <span class="number">4</span> - <span class="number">31</span>;</span><br><span class="line">  j = <span class="number">80</span> * x / <span class="number">2447</span>;</span><br><span class="line">  d = x - <span class="number">2447</span> * j / <span class="number">80</span>;</span><br><span class="line">  x = j / <span class="number">11</span>;</span><br><span class="line">  m = j + <span class="number">2</span> - <span class="number">12</span> * x;</span><br><span class="line">  y = <span class="number">100</span> * (n - <span class="number">49</span>) + i + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// converts integer (Julian day number) to day of week</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">IntToDay</span> <span class="params">(<span class="type">int</span> jd)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dayOfWeek[jd % <span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中国剩余定理">中国剩余定理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="keyword">inline</span> <span class="title">mod</span><span class="params">(LL a, LL b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((a % b) + b) % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    LL a1, m1;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a1, &amp;m1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        LL a2, m2, k1, k2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a2, &amp;m2);</span><br><span class="line">        LL d = <span class="built_in">exgcd</span>(a1, -a2, k1, k2);</span><br><span class="line">        <span class="keyword">if</span>((m2 - m1) % d)&#123; <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        k1 = <span class="built_in">mod</span>(k1 * (m2 - m1) / d, <span class="built_in">abs</span>(a2 / d));</span><br><span class="line">        m1 = k1 * a1 + m1;</span><br><span class="line">        a1 = <span class="built_in">abs</span>(a1 / d * a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, m1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="斯特林数">斯特林数</h4><p><strong>第一类斯特灵数</strong></p><ul><li>绝对值是 $n$ 个元素划分为 $k$ 个环排列的方案数。</li><li>$s(n,k)=s(n-1,k-1)+(n-1)s(n-1,k)$</li></ul><p><strong>第二类斯特灵数</strong></p><ul><li>$n$ 个元素划分为 $k$ 个等价类的方案数</li><li>$S(n, k)=S(n-1,k-1)+kS(n-1, k)$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i ++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i + <span class="number">1</span>; j ++) S[i][j] = (S[i - <span class="number">1</span>][j - <span class="number">1</span>] + j * S[i - <span class="number">1</span>][j]) % MOD;</span><br></pre></td></tr></table></figure><h4 id="求逆元">求逆元</h4><blockquote><p>如果取模的数不是质数只能用扩展欧几里得算法求逆元</p><p>如果取模的是质数逆元直接是 qmi(x, mod - 1)</p></blockquote><p><strong>拓展欧几里得求逆元</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ex_gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;  <span class="comment">// 函数返回gcd(a, b)</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">ex_gcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a / b) * x;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, x, y;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;  <span class="comment">// 求a关于模b的逆元</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">ex_gcd</span>(a, b, x, y) == <span class="number">1</span> ? (x % b + b) % b : <span class="number">-1</span>) &lt;&lt; endl;  <span class="comment">// -1表示逆元不存在</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速幂求逆元</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a, ll b, ll mod)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll mod)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qmi</span>(a, mod - <span class="number">2</span>, mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第74场周赛</title>
      <link href="/posts/63717.html"/>
      <url>/posts/63717.html</url>
      
        <content type="html"><![CDATA[<p>题目链接:</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2476/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2476/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第74场周赛</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p><a href="https://www.acwing.com/activity/content/2476/">AcWing第74场周赛</a></p><blockquote><p>难度: ★★☆☆☆</p></blockquote><h3 id="AcWing-4707-最小身高差">AcWing 4707. 最小身高差</h3><p>$n$ 个小朋友围成一圈，按顺时针顺序依次编号为 $1∼n$，其中第 ii 个小朋友的身高为 $a_i$。</p><p>请你找到两个<strong>相邻</strong>的小朋友，要求他们之间的身高差尽可能小。</p><p>请你输出身高差的最小可能值。</p><p>注意：</p><ol><li>小朋友 $i$ 和小朋友 $j$ 的身高差为 $|ai−aj|$，也就是说身高差一定不为负。</li><li>由于小朋友是围成一圈，所以 $1$ 号小朋友和 $n$ 号小朋友也是相邻的。</li></ol><p><strong>输入格式</strong></p><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,…,a_n$。</p><p><strong>输出格式</strong></p><p>一个整数，表示身高差的最小可能值。</p><p><strong>数据范围</strong></p><p>前 $5$ 个测试点满足 $2≤n≤6$。<br>所有测试点满足 $2≤n≤100 ，1≤a_i≤1000$</p><p><strong>输入样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 12 13 15 10</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><p>模拟即可,大水</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[n] = a[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">abs</span>(a[i] - a[i + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-4708-立方体">AcWing 4708. 立方体</h3><p>给定一个 $k×n×m$ 的长方体，即它共有 $k$ 层，每层都由 $n×m$ 个 $1×1×1$ 的小立方体组成。</p><p>层从高到低依次编号为 $1∼k$，每一层的行从上到下依次编号为 $1∼n$，每一层的列从左到右依次编号为 $1∼m$。</p><p>第 $i$ 层第 $j$ 行第 $q$ 列的小立方体表示为 $(i,j,q)$。</p><p>每个小立方体，要么是空的（用 <code>.</code> 表示），要么包含障碍物（用 <code>#</code> 表示）。</p><p>初始时，你位于 $(1,x,y)$，保证该立方体是空的。</p><p>当你位于一个空立方体时，你可以沿前后上下左右六个方向自由移动至相邻立方体中，但是不能移动至长方体外，也不能移动至有障碍物的立方体中。</p><p>请你计算，你最多可以到达多少个空立方体？</p><p>注意，计数时初始立方体也要计算在内，同一立方体可以进入多次。</p><p><strong>输入格式</strong></p><p>第一行包含三个整数 $k,n,m$。</p><p>随后包含 $k$ 个 $n$ 行 $m$ 列的字符矩阵，其中第 $i$ 个字符矩阵中的第 $j$ 行第 $q$ 列的字符表示立方体 $(i,j,q)$ 的具体状态，如果为 <code>.</code> 则表示该立方体是空的，如果为 <code>#</code> 则表示该立方体包含障碍物。</p><p>每个字符矩阵的<strong>上方和下方</strong>都有且仅有一个空行，用来将矩阵隔开（具体可参照样例）。</p><p>最后一行包含两个整数 $x,y$，你的初始位置即为 $(1,x,y)$。</p><p><strong>输出格式</strong></p><p>一个整数，表示最多可以到达的空立方体数量。</p><p><strong>数据范围</strong></p><p>前 55 个测试点满足 $1≤k,n,m≤3$。<br>所有测试点满足 $1≤k,n,m≤10，1≤x≤n，1≤y≤m$。</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3 2 2</span><br><span class="line"></span><br><span class="line">#.</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">#.</span><br><span class="line">.#</span><br><span class="line"></span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><p><strong>输出样例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p><strong>题解</strong></p><blockquote><p>开个三维的数组进行bfs即可,(往六个方向进行转移),基础bfs,dfs</p><p><s>sb</s>的我循环变量名写错找了半小时</p></blockquote><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug(x...) cerr &lt;&lt; (#x) &lt;&lt;&quot; -&gt; &quot;, err(x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">err</span><span class="params">(<span class="type">const</span> T &amp;A, <span class="type">const</span> Ts &amp;... other)</span> </span>&#123;</span><br><span class="line">cerr &lt;&lt; (A) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">err</span>(other...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k, n, m, ans;</span><br><span class="line"><span class="type">char</span> a[N][N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N][N];</span><br><span class="line">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; q[N * <span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> K, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (K &gt;= k || K &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= n || x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (y &gt;= m || y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (a[K][x][y] != <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> ceng, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">q[++ tt] = &#123;ceng, x, y&#125;;</span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line"><span class="type">int</span> kk, xx, yy;</span><br><span class="line"><span class="built_in">tie</span>(kk, xx, yy) = q[hh ++];</span><br><span class="line"><span class="comment">// debug(kk, xx, yy);</span></span><br><span class="line"><span class="keyword">if</span> (st[kk][xx][yy]) <span class="keyword">continue</span>;</span><br><span class="line">st[kk][xx][yy] = <span class="literal">true</span>;</span><br><span class="line">ans ++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line"><span class="type">int</span> sx = xx + dx[i];</span><br><span class="line"><span class="type">int</span> sy = yy + dy[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(kk, sx, sy)) q[++ tt] = &#123;kk, sx, sy&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(kk + <span class="number">1</span>, xx, yy)) q[++ tt] = &#123;kk + <span class="number">1</span>, xx, yy&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(kk - <span class="number">1</span>, xx, yy)) q[++ tt] = &#123;kk - <span class="number">1</span>, xx, yy&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; m; z ++) </span><br><span class="line">cin &gt;&gt; a[i][j][z];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x --, y --;</span><br><span class="line"><span class="comment">// debug(x, y);</span></span><br><span class="line"><span class="built_in">bfs</span>(<span class="number">0</span>, x, y);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ___; i ++) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-4709-三元组">AcWing 4709. 三元组</h3><p>给定 $n$ 个两两不同的正整数 $a1,a2,…,an$。</p><p>请你计算共有多少个三元组 $(i,j,k)$ 能够同时满足：</p><ol><li>$i&lt;j&lt;k$</li><li>$ai&gt;aj&gt;ak$</li></ol><h4 id="输入格式">输入格式</h4><p>第一行包含整数 $n$。</p><p>第二行包含 $n$ 个整数 $a1,a2,…,an$。</p><h4 id="输出格式">输出格式</h4><p>一个整数，表示满足条件的三元组数量。</p><h4 id="数据范围">数据范围</h4><p>前 $4$ 个测试点满足 $3≤n≤4$。<br>所有测试点满足 $3≤n≤10^6，1≤ai≤10^9$。</p><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>题解</strong>:</p><blockquote><p>枚举a[i]数组, 求i之前比a[i]大的数的数量pre[i], 和i之后比a[i]小的数的数量last[i]</p><p>用树状数组+离散化去解决,就类似于用树状数组去求逆序对的数量</p><p>答案就是pre[1 ~ n] * last[1 ~ n]的和</p><p>注意ans要longlong</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug(x) cerr &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rall(x) (x).rbegin(), (x).rend()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N], n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x &lt;= n; x += (x &amp; -x)) tr[x] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> res = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x; x -= (x &amp; -x)) res += tr[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(alls), val) - alls.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[N], last[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a[N], ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(alls));</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(alls)), alls.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">get_id</span>(a[i]);</span><br><span class="line"><span class="comment">// debug(t);</span></span><br><span class="line"><span class="built_in">add</span>(t, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// ans += i - query(t);</span></span><br><span class="line">pre[i] = i - <span class="built_in">query</span>(t);</span><br><span class="line"><span class="comment">// debug(pre[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="keyword">sizeof</span> tr);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">get_id</span>(a[i]);</span><br><span class="line"><span class="comment">// debug(t);</span></span><br><span class="line"><span class="built_in">add</span>(t, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// ans += query(t) - 1;</span></span><br><span class="line">last[i] = <span class="built_in">query</span>(t) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// debug(last[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">ans += last[i] * pre[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ______ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ______;</span></span><br><span class="line"><span class="keyword">while</span> (______ --) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南宁周赛(二)_2022年下</title>
      <link href="/posts/39998.html"/>
      <url>/posts/39998.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://oj.gxu.edu.cn/contest/469/problems">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/oj.gxu.edu.cn/contest/469/problems.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">南宁周赛二链接</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><blockquote><p>难度:★☆☆☆☆</p></blockquote><h3 id="A-炸雷">A.炸雷</h3><p>2022年10月21日，雷俊手下的cm从睡梦中惊醒，发现手里出现一张猫猫大帝颁发的毁灭世界许可，敌视世界的cm刚好想趁此机会毁灭宇宙。</p><p>cm所在宇宙内的所有世界都是圆环形状，世界被均匀的分为<strong>n</strong>段，cm的好朋友lyf刚好在众客袁研究灭世武器，每个灭世武器爆炸最多可以毁灭连续的<strong>3</strong>段世界，cm想知道对于某个圆环世界，他应该找lyf借多少个灭世武器，才能完全毁灭这个圆环世界呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) cout &lt;&lt; n / <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; n / <span class="number">3</span> + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-呆呆白羊小姐">B.呆呆白羊小姐</h3><p>兔子先生前几天因为淋雨生病了，<a href="https://www.bilibili.com/video/BV1QB4y1e7EP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b758b88f6e71d3e2662265ce016886af">白羊</a>小姐打算去探望他。</p><p>白羊小姐打算给兔子先生买他最喜欢的水果 n<em>n</em> 千克。</p><p>水果店的水果每千克 $10$ 元，每买 $5$ 千克水果送 $1$ 千克。</p><p>呆呆的白羊小姐不知道怎么计算价格，你可以帮助她嘛？QAQ</p><p>模拟过程即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) n --;</span><br><span class="line">ans += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Peach-01‘s-favourite">C.Peach_01‘s favourite</h3><p>第一行给出n表示长度，随后两行分别给出长n的数组A和B</p><p>请试着构造一个长n的<em>C</em>数组，使得每个Ci = Ai = Bi，求min(mex©)</p><p>关于m<strong>e</strong>x*:<em>m<strong>e</strong>x</em>(<em>S</em>)的值为集合S中没有出现过的最小自然数。例如，mex({1,2}) = 0、mex({0,1,2,3}) = 4*</p><p><a href="https://blog.csdn.net/tanjunming2020/article/details/127267349">mex的含义</a>。</p><p>输出min(mex©)</p><blockquote><p>对于所有 A[i] == B[i]，被确定的数一定要避开，标记这些数并暂定一个</p><p>对于所有A[i] != B[i], 都能避开(<s>猜的</s>)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n, x; cin &gt;&gt; n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v, <span class="built_in">ans</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; x, v.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (v[i] == x) ans[v[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; ans[x]; x++);</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Socktail’s-Scholarship">D.Socktail’s Scholarship</h3><p>大佬们申请某奖学金，有评比规则如下：</p><p>评比均不关心绩点和加分项级别(一二三等)，只关心加分项名称和数量，且权重如下：</p><p>创新创业比赛：9分/个</p><p>软件著作权或发明专利：0.9分/个</p><p>学科竞赛得奖：0.1分/个</p><p>各大佬的评比得分为自己的Σ加分项数量*加分项权重Σ加分项数量∗加分项权重</p><p>请你依据得分进行排名，从高到低输出大佬的姓名</p><p>第一行给出两个整数n，按顺序依次表示大佬们提交的申请</p><p>随后n行每行一个由小写字母构成的字符串和四个整数：name名字(唯一，也就是说每个名字只出现一次), cy创奖数量, rz软著数量, zl专利数量, js竞赛得奖数量</p><p>1 &lt;= n &lt;= 1e6</p><p>1 &lt;= len(name) &lt;= 30</p><p>0 &lt;= cy, rz, zl, js &lt;= 1e15</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">struct tmp &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">string name;</span></span></span><br><span class="line"><span class="string"><span class="meta">int cy, rz, zl, js, shunxu;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; a[N];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;tuple&lt;int, int, string&gt;&gt; ak;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">tmp x, y;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; x.name &gt;&gt; x.cy &gt;&gt; x.rz &gt;&gt; x.zl &gt;&gt; x.js;</span></span></span><br><span class="line"><span class="string"><span class="meta">int res_x = 90 * x.cy + 9 * (x.rz + x.zl) + x.js;</span></span></span><br><span class="line"><span class="string"><span class="meta">ak.emplace_back(make_tuple(res_x, i, x.name));</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">sort(all(ak), [](tuple&lt;int, int, string&gt; x, tuple&lt;int, int, string&gt; y) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">if (get&lt;0&gt;(x) == get&lt;0&gt;(y)) return get&lt;1&gt;(x) &lt; get&lt;1&gt;(y);</span></span></span><br><span class="line"><span class="string"><span class="meta">else return get&lt;0&gt;(x) &gt; get&lt;0&gt;(y);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; get&lt;2&gt;(ak[i]) &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="E-笨笨兔子先生">E.<strong>笨笨兔子先生</strong></h3><p>流浪的兔子先生在蓝星遇见了很多朋友，每次兔子先生到朋友家做客，朋友们都会给兔子先生做一大桌子好吃的。</p><p>由于蓝星的朋友们都非常喜欢质数，因此饭桌上盘子背后都有一个质数作为标识。</p><p>朋友们每次都会在饭后告诉兔子先生，这顿饭所有盘子背后数字的乘积。</p><p>笨笨的兔子先生想知道哪些盘子是他所有朋友都共同拥有的，你能帮帮他嘛？QAQ</p><p>$1≤n≤1e6，2≤a_i≤1<em>e</em>12$</p><blockquote><p>有数的 gcd 就是所有朋友都有的盘子的乘积，然后进行朴素是质因数分解即可。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 1e7 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">bool st[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">int prime[N], cnt, n;</span></span></span><br><span class="line"><span class="string"><span class="meta">void get_primes(int n) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 2; i &lt;= n; i ++ ) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if(!st[i])prime[cnt ++] =  i;</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int j = 0; prime[j] &lt;= n / i; j ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">st[prime[j] * i] = true;</span></span></span><br><span class="line"><span class="string"><span class="meta">if(i % prime[j] == 0) break;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int gcd(int a, int b) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return b ? gcd(b, a % b) : a;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">bool check(int x) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x == 1) return false;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 2; i &lt;= x / i; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x % i == 0) return false;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">return true;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n, t;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; t;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 2; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int x;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta">t = gcd(t, x);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; cnt; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (t % prime[i] == 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(t);</span></span></span><br><span class="line"><span class="string"><span class="meta">t /= prime[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">ans.emplace_back(prime[i]);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (check(t)) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans.emplace_back(t);</span></span></span><br><span class="line"><span class="string"><span class="meta">break;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; sz(ans) &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">sort(all(ans));</span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto x : ans) cout &lt;&lt; x &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">get_primes(N);</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="F-漫天繁星">F.漫天繁星</h3><p>自从2022年10月21日cm毁灭宇宙之后，蓝星又进入了新一轮演化。某一天，蓝星星主突然出现一段往日的回忆，想起了往日的恋人：月星。众所周知，四边形代表爱情$^{[1]}$，蓝星为了重新追求月星，准备计算出宇宙中有多少种$^{[3]}$四边形星座$^{[2]}$。</p><blockquote><p>[1][1]: 作者胡扯罢了</p><p>[2][2]: 四边形星座是指利用四颗星星，每颗作为四边形的顶点。</p><p>[3][3]: 四边形星座中，存在一个与其它星座不同的星星，即为不同的四边形星座</p></blockquote><blockquote><p>个点能够组成一个四边形的条件是任意三个点不同线。 然后我们可以枚举选择哪四个点作为四边形的顶点，然后判断是否存在三点共线的非法情况即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">bool cal(pair&lt;ll, ll&gt; x, pair&lt;ll, ll&gt; y, pair&lt;ll, ll&gt; z) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">return (z.second - x.second) * (y.first - x.first) - (y.second - x.second) * (z.first - x.first) == 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;pair&lt;ll, ll&gt;&gt; point(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int i = 0; i &lt; n; i++) cin &gt;&gt; point[i].first &gt;&gt; point[i].second;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll res = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int i = 0; i &lt; n; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int j = i + 1; j &lt; n; j++)</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int z = j + 1; z &lt; n; z++)</span></span></span><br><span class="line"><span class="string"><span class="meta">for(int x = z + 1; x &lt; n; x++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if(cal(point[i], point[j], point[z]) || cal(point[i], point[j], point[x]) || cal(point[j], point[z], point[x]) || cal(point[i], point[z], point[x])) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">res++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; res &lt;&lt; endl;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泰勒公式的初代理解</title>
      <link href="/posts/29810.html"/>
      <url>/posts/29810.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-泰勒公式">1.泰勒公式</h3><p>设$f(x)$在$x_{0}$处有$n$阶倒数, 则公式有</p><p>$f(x)=f\left(x_{0}\right)+\frac{f^{\prime}\left(x_{0}\right)}{1 !}\left(x-x_{0}\right)+\frac{f^{\prime \prime}\left(x_{0}\right)}{2 !}\left(x-x_{0}\right)^{2}+\cdots+\frac{f^{(n)}\left(x_{0}\right)}{n !}\left(x-x_{0}\right)^{n}+o\left[\left(x-x_{0}\right)^{n}\right]$</p><p>展开的越多精度越高,就像<code>π</code>一样</p><p>π = 3 + 0.1 + 0.04 + 0.001 + 0.0005 + …</p><h3 id="2-麦克劳林公式">2.麦克劳林公式</h3><p>设$f(x)$在$0$处有$n$阶倒数, 则公式有</p><p>$f(x)=f(0)+\frac{f^{\prime}(0)}{1 !} x+\frac{f^{\prime \prime}(0)}{2 !} x^{2}+\cdots+\frac{f^{(n)}(0)}{n !} x^{n}+o\left(x^{n}\right)$</p><h3 id="3-常见泰勒公式">3.常见泰勒公式</h3><p>$当  x \rightarrow 0  时，$<br>$(1)  \sin x=x-\frac{1}{6} x^{3}+o\left(x^{3}\right)$<br>$(2)  \arcsin x=x+\frac{1}{6} x^{3}+o\left(x^{3}\right)$<br>$(3)  \tan x=x+\frac{1}{3} x^{3}+o\left(x^{3}\right)$<br>$(5)  \mathrm{e}^{x}=1+x+\frac{1}{2 !} x^{2}+\frac{1}{3 !} x^{3}+o\left(x^{3}\right)$<br>$(6)  \ln (1+x)=x-\frac{1}{2} x^{2}+\frac{1}{3} x^{3}+o\left(x^{3}\right)$<br>$(7)  \cos x=1-\frac{1}{2 !} x^{2}+\frac{1}{4 !} x^{4}+o\left(x^{4}\right)$<br>$(8)  (1+x)^{\alpha}=1+\alpha x+\frac{\alpha(\alpha-1)}{2 !} x^{2}+\frac{\alpha(\alpha-1)(\alpha-2)}{3 !} x^{3}+o\left(x^{3}\right)$</p><p>$(9)  a^{x}=1+x(\ln a)+\frac{(x \ln a)^{2}}{2 !}+\frac{(x \ln a)^{3}}{3 !}+\frac{(x \ln a)^{4}}{4 !}+o(x^{4})$</p><p>等价无穷小往往只取第一项泰勒公式, 其实就是近似精确度比较低的泰勒公式.</p><p><strong>总结</strong></p><ol><li>洛必达计算本质就是降阶</li><li>等价无穷小是特殊的泰勒公式</li><li>泰勒公式计算的本质是近似</li></ol><h3 id="swig￼0"><mark class="hl-label red">4.泰勒公式的使用原则</mark> </h3><ol><li>乘除位置,使用等价无穷小</li><li>加减位置, 上下同阶</li><li>前后不能抵消的最低次幂</li></ol><h4 id="swig￼1"><mark class="hl-label red">关于同阶量的论述</mark> </h4><mark class="hl-label red">展开目的</mark> :<p>$上下同阶  \begin{cases} 1. 消掉低阶量(低阶太大) \ 2. 忽略高阶量(高阶太小) \ 3. 全部同阶量(一定是全部的!!!) \end{cases}$</p><p>经典例题1:</p><p>$\lim _{x \rightarrow 0} \frac{\ln \left(1-2 x+3 x^{2}\right)+2 x+x^{2}}{x^{2}}$</p><p>展开 $ln$里的部分要展 开全部的二阶的,只展成$-2x + 3x^{2}$是错的,因为再往后展开一项$-\frac{1}{2}(-2x + 3x^{2})^{2}$,里面还有二阶的所以, 要展开到第二项.</p><h4 id="swig￼3"><mark class="hl-label red">A*B类型,A和B分别展到几阶</mark> </h4><p>经典例题2:</p><p>$\lim _{x \rightarrow 0} \frac{\mathrm{e}^{x} \sin x-x(1+x)}{x^{3}}$</p><p>A:$e^{x}=1+x+\frac{1}{21} x^{2}+\frac{1}{3 !} B:x^{3}+\cdots$</p><p>B:$\sin x=x-\frac{1}{6} x^{3}+\cdots$</p><p>A的第一项是$x$的0次方,要出现全部的三阶量, 那么B必须要展到三阶 $x^{0}*x^{3}$</p><p>B的第一项是$x$的一次方,要出现全部的三阶量则A要展开到二阶$x^{1}*x^{2}$</p><p><strong>个人总结:</strong></p><blockquote><p>A*B类型的展开项中</p><ul><li>A展开的阶数取决于B展开中的最小的那一个,A展开的最高阶数 * B中最小的阶数&gt;=分母的阶数, 这样全部与分母同阶的式子就会都出现</li><li>同理B展开的阶数取决于A展开中的最小的那一个,B展开的最高阶数 * A中最小的阶数&gt;=分母的阶数, 这样全部与分母同阶的式子就会都出现</li></ul></blockquote><h4 id="swig￼4"><mark class="hl-label red">A-B/C-D类型</mark> </h4><blockquote><p>A-B和C-D分别展开到前后不能抵消的最低次幂</p></blockquote><ol><li>$\lim _{x \rightarrow 0} \frac{1+\frac{1}{2} x^{2}-\sqrt{1+x^{2}}}{\left(\cos x-e^{\frac{x^{2}}{2}}\right) \sin \frac{x^{2}}{2}}$</li></ol><h4 id="swig￼5"><mark class="hl-label yellow">综合练习</mark> </h4><ol start="2"><li>$\lim _{x \rightarrow 0} \frac{\ln \left(1+\sin ^{2} x\right)-6(\sqrt[3]{2-\cos x}-1)}{x^{4}}$</li></ol><p>$x \rightarrow 0 时$</p><p>$(1)  \ln \left(1+\sin ^{2} x\right)=\sin ^{2} x-\frac{1}{2} \sin ^{4} x+0\left(\sin ^{4} x\right)$</p><p>$=\left(x-\frac{1}{6} x^{3}+d\left(x^{3}\right)\right)^{2}-\frac{1}{2}(x+0(x))^{4}$</p><p>$=x^{2}-2 x \frac{1}{6} x^{4}-\frac{1}{2} x^{4}+o\left(x^{4}\right)$</p><p>$=x^{2}-\frac{5}{6} x^{4}+0\left(x^{4}\right)$</p><p>$\text { (2) } \sqrt[3]{2-\cos x}=1+\frac{1}{3}(1-\cos x)+\frac{\frac{1}{3}\left(\frac{1}{3}-1\right)}{2}(1-\cos x)^{2}+0\left((1-\cos x)^{2}\right)$</p><p>$=1+\frac{1}{3}\left(\frac{1}{2} x^{2}-\frac{1}{41} x^{4}+o\left(x^{4}\right)\right)-\frac{1}{9}\left(\frac{1}{2} x^{2}+0\left(x^{2}\right)\right)^{2}$</p><p>$=1+\frac{1}{6} x^{2}-\frac{1}{1^{2}} x^{4}-\frac{1}{36} x^{4}+o\left(x^{4}\right)$</p><p>$=1+\frac{1}{6} x^{2}-\frac{1}{24} x^{4}+0\left(x^{4}\right)$</p><p>$\text { (3) } 原式 =\lim _{x \rightarrow 0} \frac{\left[x^{2}-\frac{5}{6} x^{4}+a\left(x^{4}\right)\right]-b\left[\frac{1}{6} x^{2}-\frac{1}{24} x^{4}+0\left(x^{4}\right)\right]}{x^{4}}$</p><p>$=\lim _{x \rightarrow 0} \frac{-\frac{5}{6} x^{4}+\frac{1}{4} x^{4}+o\left(x^{4}\right)}{x^{4}}=-\frac{7}{12}$</p><p>GG~~~~, o(╥﹏╥)o</p><h3 id="附-重要补充">附(重要补充)</h3><ol><li>乘除法等价的条件 :<strong>被换部分要与剩余所有部分是乘除关系</strong></li></ol><p><img src="https://image.chiullian.cn/picture/20221013151350.png" alt=""></p><ol start="2"><li><p>$\left[\left(1+\frac{1}{n}\right)^{n}\right]^{n} \neq e^{n}$ 不能先算一部分的极限再算整体的极限, 二次极限错误</p><p>比如$(1 + x)^{\frac{1}{x}}$ ,x-&gt;0时,不是$(1 + 0)^{无穷大}$ , 而是e,要从整体看</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 考研模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx资源页设置密码</title>
      <link href="/posts/25099.html"/>
      <url>/posts/25099.html</url>
      
        <content type="html"><![CDATA[<h3 id="nginx使用htpasswd设置账号密码">nginx使用htpasswd设置账号密码</h3><mark class="hl-label red">ubuntu20.04</mark> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search htpasswd</span><br><span class="line">sudo apt install apache2-utils</span><br><span class="line">htpasswd -c  /etc/nginx/conf.d/gpasswd admin</span><br><span class="line">回车输入密码</span><br><span class="line">重复密码</span><br><span class="line">在nginx配置文件加下面两行：</span><br><span class="line">auth_basic &quot;Please input password&quot;;</span><br><span class="line">auth_basic_user_file /etc/nginx/conf.d/gpasswd;</span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速拥有自己的OJ</title>
      <link href="/posts/11826.html"/>
      <url>/posts/11826.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>学校社团准备招新了,之前都是在老师的平台上进行比赛考核的, 最近正好在学项目, 也会一些Linux,以及docker容器,和vue框架, 本来打算从头开始写一个极简版本的编译平台用来试一试的,结果在GitHub上一搜,<a href="https://github.com/QingdaoU/OnlineJudge">青岛大学的OJ</a>竟然是开源的(才知道T_T), 用到的也是docker部署,前端是vue写的,想了一下自己也可以魔改一点点前端,正好在练练docker,以及Nginx代理,趁机了解一下docker-compose也能看懂点前端框架就跟着官方直接部署了</p></div><p><a href="https://opensource.qduoj.com/#/">官方文档</a>, 感谢一波~~~</p><p>首先还是没配置docker环境的先自行去配置docker环境</p><div class="note warning flat"><p>本篇是基于<code>ubuntu20.04</code>服务器环境下, 用到的小工具<code>MobaXterm</code>(可视化我的服务器)其他也类似</p></div><h3 id="安装">安装</h3><ol><li><p>安装必要依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y vim python3-pip curl git</span><br><span class="line">pip3 install --upgrade pip</span><br><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure></li><li><p>我是新建一个oj用户来存放oj的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser oj</span><br><span class="line">cd /home/oj</span><br></pre></td></tr></table></figure></li><li><p>拉取项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/QingdaoU/OnlineJudgeDeploy.git &amp;&amp; cd OnlineJudgeDeploy</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>要稍等一会儿(几分钟)才能配置好</p><p>这一步很有可能会报端口冲突的错误,原因:服务器部署过其他的项目且代理过, 解决方法:改端口</p><p>我oj下载目录/home/oj/OnlineJudgeDeploy/, 在下面有一个<code>docker-compose.yml</code>进去修改,用该是最后一行了<img src="https://image.chiullian.cn/picture/20221005190749.png" alt="">, 可以像我一样改成9001和9002端口没用过就行,建议改大一点的,一两千的很容易冲突,<mark class="hl-label red">注意用的端口记得去服务器那里打开要用端口号</mark> ,</p></li><li><p>配置完之后然后查询docker状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20221005185958.png" alt=""></p><p>正常的状态应该是像现在的这样, 假如出现<code>unhealthy</code>或者<code>Exited(0)</code>,重启容器试试<code>docker restart 容器名</code></p></li></ol><p>以上你的oj就能用服务器:端口号访问了,后台管理路径为<code>/admin</code>, 默认的超级管理员的账号<code>root</code>,密码<code>rootroot</code>, 记得及时修改</p><p>修改方法:需要把里面的”USERNAME” 换成你想要替换的用户名，“NEW_PASSWORD”换成新的密码，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it oj-backend /bin/sh</span><br><span class="line">python3 manage.py inituser --username USERNAME --password NEW_PASSWORD --action=reset</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20221005191745.png" alt=""></p><p>这样就成功了!</p><p>现在差不多完善的差不多了,不需要经常更新了</p><h3 id="配置反向代理">配置反向代理</h3><p>可以开一个子域名来接听项目接口, 配置ssl的证书的步骤跟之前博客部署到服务器的步骤一样, 我是用我的子域名<code>oj.chiullian.cn</code>来接听<code>80</code>, <code>443</code>, 并代理转发到<code>9001</code>(<code>docker-compose.conf</code>里配置的9001)端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">oj</span></span><br><span class="line">server &#123; </span><br><span class="line">   listen 80;</span><br><span class="line">   #填写绑定证书的域名</span><br><span class="line">   server_name oj.chiullian.cn; </span><br><span class="line">    error_page   405 =200 @405;</span><br><span class="line">               error_page   500 502 503 504  /50x.html;#错误页面</span><br><span class="line">    #把http的域名请求转成https</span><br><span class="line">    return 301 https://$host$request_uri; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443; </span><br><span class="line">       server_name oj.chiullian.cn; </span><br><span class="line">       ssl_certificate /etc/nginx/cert/oj.chiullian.cn_bundle.crt; </span><br><span class="line">       ssl_certificate_key /etc/nginx/cert/oj.chiullian.cn.key; </span><br><span class="line">       ssl_session_timeout 5m;</span><br><span class="line">       #请按照以下协议配置</span><br><span class="line">       ssl_protocols TLSv1.2 TLSv1.3; </span><br><span class="line">       #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">          proxy_pass http://127.0.0.1:9001/;</span><br><span class="line">       &#125;</span><br><span class="line">            </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20221005192552.png" alt=""></p><p>然后就能https+域名访问了√√√</p><h3 id="如何修改前端样式进行二次开发">如何修改前端样式进行二次开发</h3><p>根据官方说法，整个项目分为以下四个部分</p><ul><li>后端(Django): <a href="https://github.com/QingdaoU/OnlineJudge">https://github.com/QingdaoU/OnlineJudge</a></li><li>前端(Vue): <a href="https://github.com/QingdaoU/OnlineJudgeFE">https://github.com/QingdaoU/OnlineJudgeFE</a></li><li>判题沙箱(Seccomp): <a href="https://github.com/QingdaoU/Judger">https://github.com/QingdaoU/Judger</a></li><li>判题服务器(对Judger的封装): <a href="https://github.com/QingdaoU/JudgeServer">https://github.com/QingdaoU/JudgeServer</a></li></ul><p>我们可以在本地的电脑上拉取官方的前端项目进行修改,这里的二次开发的原理是覆盖原来的样式,不是直接修改源项目</p><p>再本地新建个文件夹<code>git bash</code>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/QingdaoU/OnlineJudgeFE.git</span><br></pre></td></tr></table></figure><p>然后在项目内<code>git bash</code>输入下面命令, (之前没用过<code>npm</code>的可以先去下载网上都有教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"># we use webpack DllReference to decrease the build time,</span><br><span class="line"># this command only needs execute once unless you upgrade the package in build/webpack.dll.conf.js</span><br><span class="line">export NODE_ENV=development </span><br><span class="line">npm run build:dll</span><br><span class="line"># the dev-server will set proxy table to your backend</span><br><span class="line">export TARGET=http://localhost</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:8080</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如果<code>npm install</code>一直超时的话:</p><ol><li>命令</li></ol><p>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><ol start="2"><li>验证命令</li></ol><p>npm config get registry</p><p>如果返回<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a>，说明镜像配置成功。</p><p>然后</p><p>最后一步npm run dev是本地预览</p><p>如果报错的话</p><p>到<code>~\OnlineJudgeFE\node_modules\http-proxy-middleware\lib\config-factory.js</code>内把<code>42-44</code>行注释掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// if (!config.options.target) &#123;</span><br><span class="line">//   throw new Error(ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING)</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure><p>记得等会打包<code>npm run build</code>的时候要取消掉注释</p><p><strong>全局修改中文</strong></p><p>我们打开src/il8n/index.js 把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locale: &#x27;en-US&#x27;,</span><br><span class="line"> 修改成</span><br><span class="line">locale: &#x27;zh-CN&#x27;,</span><br></pre></td></tr></table></figure><p>然后 在项目文件下<code>git bash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后会生成一个<code>dist</code>文件, 我是放到<code>/home/oj/OnlineJudgeDeploy/data/backend/</code>文件夹下</p><p><img src="https://image.chiullian.cn/picture/20221005194651.png" alt=""></p><p>然后</p><p>在<code>docker-compose.conf</code> 加上这句话,<code>:</code>号前是相对地址,根据dist放的位置改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ./data/backend/dist:/app/dist</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20221005194731.png" alt=""></p><p>最后重启即可,然后就可以自己开发前端样式这样的步骤部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> docker </tag>
            
            <tag> Kuangbin题单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>twikoo评论私有化(放到docker上)</title>
      <link href="/posts/35707.html"/>
      <url>/posts/35707.html</url>
      
        <content type="html"><![CDATA[<div class="note green icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>本篇文章是将twikoo部署到doker容器内, 原来用vercel部署访问速度感人,索性跟大佬的教程部署到服务器上,还比较简单,主要是给自己看的,</p></div><h3 id="步骤">步骤</h3><p>需要docker环境,请自行配置</p><ol><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull imaegoo/twikoo</span><br></pre></td></tr></table></figure></li><li><p>创建并启动容器, 容器端口可结合自身情况进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 8099:8080 -v /root/twikoo/data:/app/data -d imaegoo/twikoo</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意这里去服务区开端口号比如这里要开8099端口</mark> </li><li><p>去主题<code>yml</code>文件里</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">http://服务器ip:8099</span></span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20221005172831.png" alt=""></p><p>这样就算初步成功了</p></li></ol><h3 id="Nginx反向代理配置">Nginx反向代理配置</h3><p>通过多个子域名域名、多个ssl证书、用https再代理一个端口</p><p>一个主域名可以代理一个端口.</p><p>SO:去申请一个子域名和证书,按照配置服务器一样,把证书放在:路径：/etc/nginx/cert</p><p><img src="https://image.chiullian.cn/picture/20221005173403.png" alt=""></p><p>然后进入/etc/nginx/sites-enabled，在其中新建一个文件：twikoo.conf，并写入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">upstream twi &#123;#需要配置upstream</span><br><span class="line">        server chiullian.cn:8099; #你的域名+加端口</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen  443 ssl;</span><br><span class="line">    server_name  twikoo.chiullian.cn; #子域名</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/cert/twikoo.chiullian.cn_bundle.crt; </span><br><span class="line">   ssl_certificate_key /etc/nginx/cert/twikoo.chiullian.cn.key; </span><br><span class="line"></span><br><span class="line">    # ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    </span><br><span class="line">    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers  HIGH:!ADH:!EXPORT56:RC4+RSA:+MEDIUM;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        #proxy_pass http://localhost:8099;</span><br><span class="line">        proxy_pass http://twi;</span><br><span class="line"></span><br><span class="line">        # add_header Access-Control-Allow-Origin &quot;*&quot; always; #这个不要加</span><br><span class="line">        # add_header Access-Control-Allow-Methods &quot;POST, GET,PUT,DELETE, OPTIONS&quot;;</span><br><span class="line">        # add_header Access-Control-Allow-Headers &quot;Origin, Authorization, Accept&quot;;</span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Linux </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署至服务器+Nginx配置https</title>
      <link href="/posts/23005.html"/>
      <url>/posts/23005.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note green icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>本人是在腾讯云的轻量服务器(<code>Ubuntu20.04</code>)上部署Hexo, 主要是写给自己看的,以后再配置的时候就不用找了</p><p>最好在MobaXterm或者Xshell上进行操作</p></div><div class="note warning flat"><p>下面一切操作权限不足的时候加上<code>sudo</code>即可, 多提一句:clown_face: :给修改一个文件权限<code>sudo chmod 777 文件名</code></p></div><h2 id="具体操作">具体操作</h2><h3 id="创建Git仓库">创建Git仓库</h3><ol><li><p>安装<code>openssh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后，查看ssh服务是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e|grep ssh</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为blog的用户，用于管理Hexo项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser blog</span><br></pre></td></tr></table></figure></li><li><p>给blog用户添加文件的写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/Ubuntu%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8_step5.png" alt=""></p><p>在<code>User privilege specification</code>下添加下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></li><li><p>切换至blog用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su blog</span><br></pre></td></tr></table></figure></li><li><p>安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br></pre></td></tr></table></figure></li><li><p>退回到根路径（<code>cd /</code>），在<code>/var/repo</code>下创建名为<code>hexo_static</code>的裸仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/repo/</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/</span><br><span class="line">sudo chmod -R 755 /var/repo/</span><br><span class="line"></span><br><span class="line">cd /var/repo/</span><br><span class="line">git init --bare hexo_static.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置Nginx托管文件目录">配置Nginx托管文件目录</h3><ol><li><p>首先安装Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx -y</span><br></pre></td></tr></table></figure></li><li><p>创建<code>/var/www/hexo</code>目录，用于Nginx托管，修改目录所有权和权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/hexo</span><br><span class="line">sudo chown -R $USER:$USER /var/www/hexo</span><br><span class="line">sudo chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure></li><li><p>使用vim修改<code>/etc/nginx/sites-enabled/default</code>，使<code>root</code>指向<code>hexo</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>然后修改如下内容在<code>server</code>里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root /var/www/hexo;</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20220923182115.png" alt=""></p></li><li><p>重启Nginx服务，使得改动生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建Git钩子">创建Git钩子</h3><ol><li><p>在之前创建的<code>hexo_static</code>裸仓库下有一个<code>hooks</code>文件夹，在其中创建一个名为<code>post-receive</code>的钩子文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br></pre></td></tr></table></figure></li><li><p>让该文件变为可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure></li></ol><h3 id="window本地端">window本地端</h3><p>要有<code>git</code>环境</p><p>生成秘钥啥都都省略了,应该都会</p><blockquote><p>目的:将生成的公钥id_rsa.pub拷贝到ubuntu服务器的<code>/home/blog/.ssh/authorized_keys</code>上</p></blockquote><ol><li><p>首先创建.ssh目录，并进入该目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir .ssh</span><br><span class="line">cd .ssh/</span><br></pre></td></tr></table></figure></li><li><p>接着创建authorized_keys文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch authorized_keys</span><br></pre></td></tr></table></figure><p>将Windows下id_rsa.pub文件中的内容复制到Ubuntu下的authorized_keys文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>hexo</code>的<code>config.yml</code>文件，在<code>deploy</code>处修改<code>repo</code>项：</p><p><img src="https://image.chiullian.cn/picture/20220923195239.png" alt=""></p><p>再<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>三连上传</p></li><li><p>进入目录<code>var/www/hexo/下</code>，可以看到静态文件已全部上传</p></li></ol><h3 id="然后就可以通过服务器ip访问了">然后就可以通过服务器ip访问了</h3><h2 id="Nginx配置https">Nginx配置https</h2><ol><li>首先进入<code>/etc/nginx</code>目录下，创建一个<code>cert</code>文件夹，将申请到的文件放到该文件夹下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br><span class="line">sudo mkdir cert</span><br></pre></td></tr></table></figure><p>2.只有<code>.crt</code>结尾的和<code>.key</code>结尾的有用</p><p>可以直接用<code>Xshell</code>或者<code>MobaXterm</code>或者麻烦点的<code>scp</code>传输</p><p>权限问题不会搞我就直接用<code>scp</code>暴力传服务器了,反正目的就是把证书弄上服务器就行了</p><p>首先下载证书到桌面</p><ol start="3"><li><p>在桌面右击<code>git bash here</code></p></li><li><p>然后输入命令行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .ssh/config</span><br></pre></td></tr></table></figure></li><li><p>然后输入如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host blog</span><br><span class="line">    HostName 你的服务器ip</span><br><span class="line">    User blog</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20220923200744.png" alt=""></p></li><li><p>然后把这个传上去即可,<code>改成你自己的桌面的证书文件夹名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp chiullian.cn_nginx/* blog:</span><br></pre></td></tr></table></figure></li><li><p>此时你的服务器端blog用户的家目录就会多几个证书文件, 然后通过cp复制到<code>cert</code>文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./* /etc/nginx/cert</span><br></pre></td></tr></table></figure></li></ol><p><strong>此时你的证书已经准备好了</strong></p><h3 id="修改Nginx配置文件">修改Nginx配置文件</h3><blockquote><p>将下面的复制到如图的位置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   #填写绑定证书的域名</span><br><span class="line">   server_name chiullian.cn; </span><br><span class="line">error_page   405 =200 @405;</span><br><span class="line">               error_page   500 502 503 504  /50x.html;#错误页面</span><br><span class="line">#把http的域名请求转成https</span><br><span class="line">return 301 https://$host$request_uri; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">               listen 443 ssl; </span><br><span class="line">       server_name chiullian.cn; </span><br><span class="line">       ssl_certificate /etc/nginx/cert/chiullian.cn_bundle.crt; </span><br><span class="line">       ssl_certificate_key /etc/nginx/cert/chiullian.cn.key; </span><br><span class="line">       ssl_session_timeout 5m;</span><br><span class="line">       #请按照以下协议配置</span><br><span class="line">       ssl_protocols TLSv1.2 TLSv1.3; </span><br><span class="line">       #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root   /var/www/hexo;#这里写vue项目的所在地址</span><br><span class="line">index  index.html;#这里是vue项目的首页，需要保证dist中有index.html文件</span><br><span class="line">#防止刷新出现404</span><br><span class="line">                       try_files $uri $uri/ /index.html;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.chiullian.cn/picture/20220923202005.png" alt=""></p><p>根据你自己的信息修改一下</p><p><strong>final重启一下Nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>然后就能https访问了,域名记得解析到服务器上</p><p>如果服务器没有开443端口记得开</p><h3 id="资源下载-浏览网页">资源下载/浏览网页</h3><p><img src="https://image.chiullian.cn/picture/20220926204553.png" alt=""></p><p>把子域名指向服务器先</p><p><img src="https://image.chiullian.cn/picture/20220926204759.png" alt=""></p><p>然后在修改<code>/etc/nginx/nginx.conf</code> 文件</p><p>新增</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   #填写绑定证书的域名</span><br><span class="line">   server_name static.chiullian.cn; </span><br><span class="line">    error_page   405 =200 @405;</span><br><span class="line">      error_page   500 502 503 504  /50x.html;#错误页面</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl; </span><br><span class="line">       server_name static.chiullian.cn; </span><br><span class="line">       ssl_certificate /etc/nginx/cert/static.chiullian.cn_bundle.crt; </span><br><span class="line">       ssl_certificate_key /etc/nginx/cert/static.chiullian.cn.key; </span><br><span class="line">       ssl_session_timeout 5m;</span><br><span class="line">       #请按照以下协议配置</span><br><span class="line">       ssl_protocols TLSv1.2 TLSv1.3; </span><br><span class="line">       #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        root /home/static;</span><br><span class="line">        location / &#123;</span><br><span class="line">          index index.html index.htm index.php;</span><br><span class="line">        &#125;</span><br><span class="line">      # autoindex for nginx</span><br><span class="line">    location ~ ^(.*)/$ &#123;</span><br><span class="line">    autoindexon;</span><br><span class="line">    autoindex_localtimeon;</span><br><span class="line">    autoindex_exact_sizeoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass        127.0.0.1:9000;</span><br><span class="line">    fastcgi_index       index.php;</span><br><span class="line">    fastcgi_param       SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include             fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中文件根目录在<code>/home/static</code>里</p><p>这里的子域名要重新申请一个ssl证书,方法与博客部署到服务器一样放;</p>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Hexo </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第69场周赛</title>
      <link href="/posts/65136.html"/>
      <url>/posts/65136.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4615-相遇问题"><a href="https://www.acwing.com/problem/content/4618/">AcWing 4615. 相遇问题</a></h2><p>在一个一维数轴的$x$ 位置处站着甲，$y$ 位置处站着乙，其中 $x&lt;y$。</p><p>两人沿着数轴同时出发，<a href="https://baike.baidu.com/item/%E7%9B%B8%E5%90%91%E8%80%8C%E8%A1%8C/8606139">相向而行</a> ，甲每秒的移动距离为 $a$，乙每秒的移动距离为 $b$。</p><p>请问，多少秒后，两人相遇。</p><blockquote><p>设为$t$秒相遇, $t* a + t *b = y - x$</p><p>则$ t = (y - x) / (a + b) $</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, x, y;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> c = b - a;</span><br><span class="line"><span class="keyword">if</span> (c % (x + y) == <span class="number">0</span>) cout &lt;&lt; c / (x + y) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-4616-击中战舰"><a href="https://www.acwing.com/problem/content/4619/">AcWing 4616. 击中战舰 </a></h2><p>李华在玩一款叫做《海战》的小游戏，下面是游戏介绍。</p><p>给定一个 $1×n$ 的方格矩阵，方格从左到右依次编号为 $1∼n$。</p><p>在这个方格矩阵中，隐藏着 $a$ 个战舰。</p><p>每个战舰都占据 $b$ 个<strong>连续</strong>的方格，每个方格最多只能被一个战舰占据。</p><p>每个战舰的具体位置未知。</p><p>玩家的任务就是在这种情况下，向一些方格发动精确打击，如果受到精确打击的方格被某个战舰占据着，则视为击中该战舰。</p><p>李华已经向 $k$个方格发动了精确打击，不幸的是，一个战舰都没有击中。</p><p>请你计算，他至少还需要向多少个方格发动精确打击，才能确保自己可以至少击中一个战舰。</p><p>请给出一个具体方案。</p><blockquote><p>每b个连续的都可能存在一个战舰(连续b个格子就记录其中的一个坐标),记录最多有多少个战舰sum个,然后最后减去隐藏的战舰数量,假设$sum - a$ 发都没有打中, 那么第$sum - a + 1$ 发就是必然打中</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n, cnt, a, b, k;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; k;</span></span></span><br><span class="line"><span class="string"><span class="meta">string s;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; s;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; sz(s); i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (s[i] == &#x27;0&#x27;) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">++ cnt;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (cnt == b) ans.push_back(i + 1), cnt = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; else cnt = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; sz(ans) - a + 1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; sz(ans) - a + 1; i ++) cout &lt;&lt; ans[i] &lt;&lt; &quot;</span> <span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="AcWing-4617-解方程"><a href="https://www.acwing.com/problem/content/4620/">AcWing 4617. 解方程  </a></h2><p>给定一个非负整数 $a$，请你计算方程 $a−(a⊕x)−x=0$ 的非负整数解的数量。</p><p>其中 $⊕$指按位异或。</p><blockquote><p><code>很魔幻,思维++</code>, $a - x = a \oplus x$</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot实战学习3</title>
      <link href="/posts/7026.html"/>
      <url>/posts/7026.html</url>
      
        <content type="html"><![CDATA[<h3 id="实现前端的页面授权功能">实现前端的页面授权功能</h3><blockquote><p>即未登录的时候不可以访问需要登录才能看见的网页,未登录时直接跳转到登录的页面,写之前首先要记录每一个未授权界面把一些额外信息放到一个额外的域里面，meta信息里面存一下是否要授权<br>如果需要授权而且没有登录，重定向到登录页面.</p></blockquote><p><img src="https://s2.loli.net/2022/09/11/5aBXh4dDbPC1jyE.png" alt=""></p><h3 id="实现注册访问后端API">实现注册访问后端API</h3><blockquote><p>附:如果是export的default就可以不加括号任意取名,如果export的时候不加default就必须加上大括号;</p><p>用let const都可以,当变量不会重新赋值用const可能会重新赋值用let</p><p>注册完跳转到登录</p><p>@submit.prevent=“register” : 点击就调用register函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/09/11/CngjRyOcaX3AxHU.png" alt=""></p><h3 id="登录状态持久化">登录状态持久化</h3><blockquote><p>先判断一下他们有没有将token存在本地如果存在本地就把token取出来,验证一下是否过期<br>如果没有过期，用户就不需要重新登陆了,可以直接跳转到首页,先从本地把我们的token取出来,发现token存在把token更新到我们的内存当中,然后再从云端请求下这个用户的信息如果可以请求的信息表示我们的token，是有效的，表示用户是登录的，我们就可以跳转到首页.</p></blockquote><p><img src="https://s2.loli.net/2022/09/11/KDCR7qlEuHAjyrg.png" alt=""></p><h3 id="当用到全局的变量的时候写在store里">当用到全局的变量的时候写在store里</h3><ul><li>用mutations里的函数用commit (只能放同步操作)</li><li>用action里的函数用dispatch (只能放异步操作,例如从云端拉取一个信息拉完之后才会继续执行)</li></ul><p><code>Bot的增删改查原理跟用户一样就不拿出来了</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第 67 场周赛</title>
      <link href="/posts/30032.html"/>
      <url>/posts/30032.html</url>
      
        <content type="html"><![CDATA[<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.acwing.com/activity/content/2250/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.acwing.com/activity/content/2250/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">AcWing第67场周赛</div>            <div class="tag-link-sitename"> 我是fw</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="1-火柴棍数字">1.  火柴棍数字</h2><p>给定 $n$ 个火柴棍，你可以用它们摆出数字 $0∼9$。</p><p>摆出每个数字所需要的具体火柴棍数量如下图所示：</p><p><img src="https://cdn.acwing.com/media/article/image/2022/08/23/19_1b7bed8f22-19_f8cd0b9414-2.jpg" alt="19_f8cd0b9414-2.jpg"></p><p>请你用这些火柴棍摆成若干个数字，并把这些数字排成一排组成一个整数，要求组成的整数尽可能大。</p><p>输出可以摆成的最大可能整数。</p><blockquote><p>多枚举几个就能很明显的发现一个规律只用<code>2</code>,和<code>7</code>这两个数字能组成的数较为大,所以能用两个火柴拼1尽量拼1奇数的话就多拼一个7放在第一个, 这样就能得到最优解</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (!(n &amp; <span class="number">1</span>))  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &gt;&gt; <span class="number">1</span>; i ++) <span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i ++) <span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt;  T;</span><br><span class="line">    <span class="keyword">while</span> (T --) <span class="built_in">sol</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-列表排序">2.列表排序</h2><p>给定一个 $n$ 行 $m$ 列的整数列表。</p><p>列表中每一行的 $m$ 个整数都是一个 $1∼m$的排列。</p><p>现在，你可以对该列表执行以下两种操作：</p><ul><li>选择一行中的两个整数并交换它们。此操作，每行最多只能执行一次。</li><li>选择列表中的两列并交换它们。此操作，最多只能执行一次。</li></ul><p>不难发现，你最多可以进行 $n+1$ 次操作，最少可以进行 $0$ 次操作，所有操作的具体执行顺序随意。</p><p>我们的目标是，通过执行上述操作，使得最终列表中每一行的 $m$ 个整数都能按照 $1,2,…,m$ 的顺序排列。</p><p>请你判断，目标是否能够达成。</p><blockquote><p>枚举变成(1~m序列)的交换之前一步的序列(可以不变化),然后再看每一行变换成现在的目标所需要的的步数是否小于两个(小于2个就能变成目标序列),因为一行只能变换1次或者0次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;vector&lt;int&gt;&gt; a;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; b;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n, m;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">bool check() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int ok = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int j = 0; j &lt; m; j ++) ok += b[j] != a[i][j];</span></span></span><br><span class="line"><span class="string"><span class="meta">if (ok &gt; 2) return false;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">return true;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; m;</span></span></span><br><span class="line"><span class="string"><span class="meta">a.resize(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">b.resize(m);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; m; i ++) b[i] = i + 1;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">a[i].resize(m);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int &amp;j : a[i]) cin &gt;&gt; j;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (check()) return void(cout &lt;&lt; &quot;</span>YES<span class="string">&quot; &lt;&lt; endl);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; m; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int j = i + 1; j &lt; m; j ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">swap(b[i], b[j]);</span></span></span><br><span class="line"><span class="string"><span class="meta">if (check()) return void(cout &lt;&lt; &quot;</span>YES<span class="string">&quot; &lt;&lt; endl);</span></span></span><br><span class="line"><span class="string"><span class="meta">swap(b[i], b[j]);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>NO<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-串联数字">3. 串联数字</h2><p>给定 $n$ 个正整数 $a1,a2,…,an$。</p><p>我们规定将正整数 $a_{i}$ 和 $a_{j}$ 串联是指将 $a_j$ 直接接在 $a_i$ 后面构成一个新整数。</p><p>例如， $12$ 和 $34$ 串联得到 $1234$，$34$ 和 $12$ 串联得到 $3412$。</p><p>现在，给定一个正整数 $k$，请你计算有多少个有序数对 $(i,j)(i≠j)$ 满足，$a_i$ 和 $a_j$串联得到的整数能够被 $k$ 整除。</p><p>(ai∗T+aj)%k=0<br>a[i]∗T%k=x1<br>a[j]%k=x2<br>x1+x2=k</p><blockquote><p>这题要把长度跟,取余数(将两个数字硬拼成一个数字即可。)哈希成一个唯一的值(开放寻址法),如果用map会卡常</p><p>:</p><p>先从前往后枚举所有的后面的数j位置,看前面有多少能满足-a[i]%k == 0的数有几个,即(可以以&lt;余数，位数&gt;双关键字开个桶。每次去桶里找&lt;-b % k, b的位数&gt;出现过多少次即可)</p></blockquote><p>这里用到了开放寻址的模板,记得背过:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> HashInt = <span class="number">10000007</span>;</span><br><span class="line">ll h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 这题把x跟r拼成一个数,因为r最多两位数</span></span><br><span class="line">ll key = x * <span class="number">100ll</span> + r;</span><br><span class="line"><span class="type">int</span> k = key % HashInt;</span><br><span class="line"><span class="keyword">while</span> (h[k] != <span class="number">-1</span> &amp;&amp; h[k] != key)</span><br><span class="line"><span class="keyword">if</span> (++ k == HashInt)</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (h[k] == <span class="number">-1</span>) h[k] = key;</span><br><span class="line"><span class="keyword">return</span> k; <span class="comment">// 哈希之后的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 200010, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int HashInt = 10000007;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll n, m, ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll h[HashInt];</span></span></span><br><span class="line"><span class="string"><span class="meta">int cnt[HashInt], a[N];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int find(int x, int r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll key = x * 100ll + r;</span></span></span><br><span class="line"><span class="string"><span class="meta">int k = key % HashInt;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (h[k] != -1 &amp;&amp; h[k] != key)</span></span></span><br><span class="line"><span class="string"><span class="meta">if (++ k == HashInt)</span></span></span><br><span class="line"><span class="string"><span class="meta">k = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (h[k] == -1) h[k] = key;</span></span></span><br><span class="line"><span class="string"><span class="meta">return k; // 哈希之后的值</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">ll work() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">memset(h, -1, sizeof h);</span></span></span><br><span class="line"><span class="string"><span class="meta">memset(cnt, 0, sizeof cnt);</span></span></span><br><span class="line"><span class="string"><span class="meta">ll ans = 0;     </span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int r = a[i] % m;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (r) r = m - r;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans += cnt[find(r ,to_string(a[i]).size())];</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int j = 1, x = 10; j &lt; 11; j ++, x = x * 10ll % m) </span></span></span><br><span class="line"><span class="string"><span class="meta">cnt[find(1ll * a[i] * x % m, j)] ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">return ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; m;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) </span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">ll ans = work();</span></span></span><br><span class="line"><span class="string"><span class="meta">reverse(a, a + n);</span></span></span><br><span class="line"><span class="string"><span class="meta">ans += work();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="附上其他大佬的做法">附上其他大佬的做法:</h4><blockquote><p>因为数位最多10+位数,所以我们直接用map开个mp[15]</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Fup(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Fde(i,a,b) for(int i=a;i&gt;=b;i--)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">10</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line">map&lt;ll,ll&gt; mp[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">ll cnt[N];</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">Fup</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        ll temp = a[i];</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="number">0</span>)  cnt[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(temp)&#123;</span><br><span class="line">                ++cnt[i];<span class="comment">//记录位数</span></span><br><span class="line">                temp/=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用于枚举 尾数</span></span><br><span class="line">        mp[cnt[i]][a[i]%k]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Fup</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        ll x = a[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Fup</span>(j,<span class="number">1</span>,<span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line">            x = x*<span class="number">10</span>%k;</span><br><span class="line">            <span class="comment">//暴力查找</span></span><br><span class="line">            <span class="keyword">if</span>(mp[j].<span class="built_in">find</span>((k-x)%k)!= mp[j].<span class="built_in">end</span>())&#123;</span><br><span class="line"></span><br><span class="line">                ans += mp[j][(k-x)%k];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cnt[i] == j &amp;&amp; a[i]%k == (k-x)%k) --ans;<span class="comment">//特判 </span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS</span><br><span class="line">    CIT</span><br><span class="line">    COT</span><br><span class="line">    <span class="comment">//int t;cin&gt;&gt;t;while(t--)</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习日记2</title>
      <link href="/posts/11310.html"/>
      <url>/posts/11310.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇主要总结一些vim编译器内常用的编译命令行,和tmux的用法</p></blockquote><ul><li><code>i</code>进入编辑模式</li><li><code>ESC</code> 进入一般命令模式</li><li><code>:w </code> 保存</li><li><code>:w!</code>强制保存</li><li><code>:q</code> 退出</li><li>:<code>q!</code> 强制退出</li><li><code>:wq</code> 保存并退出</li><li><code>v</code>选中文本，按两下ESC取消选中状态</li><li><code>d</code>  删除选中的文本</li><li><code>y </code>复制选中的文本</li><li><code>dd</code> 删除当前行</li><li><code>yy</code>复制当前行</li><li><code>p</code>将复制的数据在光标的下一行(yy)/下一个位置(y)粘贴</li><li><code>u</code>撤销</li><li><code>Ctrl + r</code>取消撤销</li><li><code>:set paste</code>设置成粘贴模式，取消代码自动缩进</li><li><code>set nopaste</code>取消粘贴模式，开启代码自动缩进</li><li><code>set nu</code>显示行号</li><li><code>set nonu</code>隐藏行号</li><li><code>gg=G</code>将全文代码格式化</li><li><code>Shift + &gt;</code>将选中的文本整体向右缩进一次</li><li><code>Shift + &lt;</code>将选中的文本整体向左缩进一次</li><li><code>0或功能键[Home]</code>光标移动到本行开头</li><li><code>$或功能键[End]</code>光标移动到本行末尾</li><li><code>h</code>或左箭头键：光标向左移动一个字符</li><li><code>j</code>或下箭头键：光标向下移动一个字符</li><li><code>k</code>或上箭头键：光标向上移动一个字符</li><li><code>l</code>或右箭头键：光标向右移动一个字符</li><li><code>word</code>向光标之下寻找第一个值为word的字符串</li><li><code>?</code>word向光标之上寻找第一个值为word的字符串</li><li><code>:1， $s/word1/word2/g</code>将全文的word1替换为word2</li><li><code>:1， $s/word1/word2/gc</code>将全文的word1替换为word2，且在替换前要求用户确认</li><li><code>:n1， n2s/word1/word2/g</code>n1与n2为数字，在n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2</li><li><code>Ctrl + q</code>当vim卡死时，可以取消当前正在执行的命令</li></ul><h3 id="tmux">tmux</h3><p>​（1）：$分屏$</p><p>ㅤㅤ（2）：$允许断开Terminal连接后，继续运行进程$</p><p>$一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。</p><p>一般要养成良好习惯:的在tmux里面写东西,防止突然的卡死或者断网等不可抗力因素</p><ul><li><p>按下ctrl + a后手指松开，然后按s：选择其它session。</p><blockquote><p>方向键 —— 上：选择上一项 session/window/pane<br>方向键 —— 下：选择下一项 session/window/pane<br>方向键 —— 右：展开当前项 session/window<br>方向键 —— 左：闭合当前项 session/window</p></blockquote></li><li><p>按下<code>Ctrl + a</code>后手指松开，然后按<code>%</code>：将当前pane左右平分成两个pane</p></li><li><p>按下<code>Ctrl + a</code>后手指松开，然后按<code>&quot;</code>：将当前pane上下平分成两个pane</p></li><li><p>按下<code>Ctrl + a</code>后手指松开，然后按<code>方向键</code>：选择相邻的pane</p></li><li><p>按下<code>Ctrl + a</code>后手指松开，然后按<code>w</code>：选择其他window，操作方法与(12)完全相同。</p></li><li><p>按下<code>ctrl + a</code>后手指松开，然后按<code>d</code>：挂起当前session。</p></li><li><p><code>tmux a</code>打开之前挂起的session。</p></li><li><p>在tmux中选中文本时，需要按住<code>shift</code>键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）</p></li><li><pre><code>tmux中复制/粘贴文本的通用方式：(1) 按下Ctrl + a后松开手指，然后按[(2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板(3) 按下Ctrl + a后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</code></pre></li><li><p>重启tmux,<code>pkill tmux &amp;&amp; tmux</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习日记(一)</title>
      <link href="/posts/59527.html"/>
      <url>/posts/59527.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-初体验">Linux 初体验</h2><p>Linux的一些常用基本的命令行</p><p>1.路径:</p><ul><li>绝对路径: 从根目录开始描述;</li><li>相对路径: 从当前位置开始描述的路径;</li><li><code>. </code>当前目录</li><li><code>..</code> 上级目录</li><li><code>~/</code>家目录</li></ul><p>2.基本操作</p><ul><li>ctrl + C: 取消命令，并且换行;</li><li>ctrl + U: 清空本行命令;</li><li>tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项;</li><li>方向键：可以回到上一个命令；</li></ul><p>3.基本命令</p><ul><li><p>ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件,参数：</p><blockquote><p>-l : 展示详细信息;<br>-h : 人性化的显示详细信息;<br>-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br>ll 等价于ls -la</p></blockquote></li></ul><p>pwd: 显示当前位置;</p><p>cd: cd + 路径;</p><ul><li>cd 默认返回家目录,</li><li>cd … 返回上一层目录</li><li>cd - 返回上一个待过的目录;</li></ul><p>cp: cp 路径1 路径2;</p><ul><li>将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名,(如果复制文件夹后面加-r)</li></ul><p>mkdir a :创建文件夹a</p><p>history: 显示历史用过的指令;</p><p>rm:删除</p><ul><li><p>rm xxx:删除一个文件</p></li><li><p>rm xxx -r: 删除某文件夹;(支持正则表达式);</p></li><li><blockquote><p>rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)<br>rm .txt (删除所有txt文件)<br>rm a/ (删除a里面所有东西)</p></blockquote></li></ul><p>mv: mv xxx yyy (剪切+ 粘贴)<code>还可以重命名</code></p><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)</p><p>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p><p>cat: cat xxx(查看xxx文件)</p><p>rm /* -rf (删除所有文件)</p>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目学习(二)</title>
      <link href="/posts/36458.html"/>
      <url>/posts/36458.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现登录与注册">实现登录与注册</h2><ol><li>实现utils.JwtUtil类，为jwt工具类，用来创建、解析jwt token</li><li>实现config.filter.JwtAuthenticationTokenFilter类，用来验证jwt token，如果验证成功，则将User信息注入上下文中</li><li>配置config.SecurityConfig类，放行登录、注册等接口</li></ol><p>首先要控制用户登录的权限,分为<code>公共页面</code>(<code>login</code>,<code>register</code> 等)和<code>授权页面</code></p><p>判断登录状态推荐用<code>jwt</code>验证,这种加密会存一个coken在本地</p><blockquote><p>jwt加密原理: userid + 加密钥匙 + (userId通过加密后的内容),传统模式都是用session验证<br>用jwt验证会更容易一些.</p></blockquote><h2 id="实现jwt工具类jwtUtil类">实现jwt工具类jwtUtil类</h2><p>用来创建和解析<code>JWT token</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> * <span class="number">24</span> * <span class="number">14</span>;  <span class="comment">// 有效期14天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;SDFGjhdsfalshdfHFdsjkdsfds121232131afasdfac&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="literal">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .signWith(signatureAlgorithm, secretKey)</span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodeKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodeKey, <span class="number">0</span>, encodeKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-JwtAuthenticationTokenFilter-类">实现 JwtAuthenticationTokenFilter 类</h2><p>用来验证jwt的</p><blockquote><p>在 backend 的 config 目录下创建 cinfig 软件包，并创建 JwtAuthenticationTokenFilter 类。<br>实现 JwtAuthenticationTokenFilter 类，用来验证 jwt token ，如果验证成功，则将 User 信息注入上下文中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kob.backend.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.service.impl.utils.UserDetailsImpl;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.NotNull;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, <span class="meta">@NotNull</span> HttpServletResponse response, <span class="meta">@NotNull</span> FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token) || !token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token = token.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(Integer.parseInt(userid));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDetailsImpl</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDetailsImpl</span>(user);</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置config-SecurityConfig类">配置config.SecurityConfig类</h2><p>放行登录、注册等接口。<br>创建后端api之前要对数据库进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kob.backend.config.filter.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/account/token/&quot;</span>, <span class="string">&quot;/user/account/register/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>将数据库中的id域变为自增<br>在pojo.User类中添加注解：@TableId(type = IdType.AUTO)</p><p>下面就是如何实现网页的各种的接口api</p><h3 id="写API一共需要写三个地方">写API一共需要写三个地方</h3><ol><li><code>controller</code>是用来调用<code>service</code>的</li><li>第二个是在<code>service</code>里面写一个接口</li><li>第三个是在<code>service</code>的<code>impl</code>里面写一个接口的实现<br><code>controller</code>里面调用接口，一般习惯所有的API返回一个<code>map</code></li></ol><p>实现三个基本接口:</p><ul><li>登录(<code>/user/account/token/</code>), 验证用户名和密码,成功后返回一个<code>JWT token</code>令牌</li><li>注册(<code>/user/account/register/</code>),注册用户</li><li>信息查询(<code>/user/account/info/</code>),根据令牌解析用户返回用户信息</li></ul><p><strong>还有就是当我们只是查询信息的时候用get,要修改一些信息要post</strong></p><h4 id="实现登录接口">实现登录接口:</h4><ol><li>service层中首先要先封装好要写的功能(通过账号密码登录):</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getToken</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后在serviceimp中实现这个功能 ,验证用户名和密码,成功后返回一个<code>JWT token</code>令牌</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getToken</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span>  <span class="operator">=</span> authenticationManager.authenticate((authenticationToken)); <span class="comment">// 登陆失败会自动处理</span></span><br><span class="line">        <span class="type">UserDetailsImpl</span> <span class="variable">loginUser</span> <span class="operator">=</span> (UserDetailsImpl) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line"><span class="comment">// 能运行到这里就已经登录成功了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(user.getId().toString());</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后在controller层调用即可 , (@RequestParam: 从前端用户输入获取数据)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getToken</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> loginService.getToken(username, password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="实现通过登录的id查询用户的信息-Info功能">实现通过登录的id查询用户的信息,Info功能</h4><ol><li>service层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InfoService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getInfoMap</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>serviceimpl层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">            (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    <span class="type">UserDetailsImpl</span> <span class="variable">loginUser</span> <span class="operator">=</span> (UserDetailsImpl) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, user.getId().toString());</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line">    map.put(<span class="string">&quot;photo&quot;</span>, user.getPhoto());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>controller层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InfoServiceImpl infoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/account/info/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> infoService.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现register功能">实现register功能</h4><h5 id="做数据库的操作时要注入usermap进来">做数据库的操作时要注入usermap进来</h5><blockquote><p>可以用这个实现数据库的相关操作：查询，插入等等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><ol><li>service层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RegisterService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">register</span><span class="params">(String username, String password, String confirmedPassword)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>serviceimpl,实现层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.service.impl.user.account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.kob.backend.service.user.account.RegisterService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RegisterService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">register</span><span class="params">(String username, String password, String confirmedPassword)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名不能为空!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span> || confirmedPassword == <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        username = username.trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (username.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password.length() == <span class="number">0</span> || confirmedPassword.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (username.length() &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名不要太长(长度&lt;20)&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password.length() &gt; <span class="number">15</span> || confirmedPassword.length() &gt; <span class="number">15</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;密码不要太长(长度&lt;15)&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(confirmedPassword)) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;两次输入的密码不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!users.isEmpty()) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> passwordEncoder.encode(password);</span><br><span class="line">        <span class="type">String</span> <span class="variable">photo</span> <span class="operator">=</span> <span class="string">&quot;https://cdn.acwing.com/media/user/profile/photo/92385_lg_e5e5efe2a9.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, username, encodedPassword, photo);</span><br><span class="line"></span><br><span class="line">        userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;error_message&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的一个常用固定操作(查询数据库中用户名为***的),背过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><p>还有密码的加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"><span class="type">String</span> <span class="variable">encodedPassword</span> <span class="operator">=</span> passwordEncoder.encode(password);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot-环境配置与项目创建</title>
      <link href="/posts/56999.html"/>
      <url>/posts/56999.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-Git的配置">1.Git的配置</h3><p>Git 工具用来 管理 本地仓库 和 云仓库(可以返回之前的任意一个版本)</p><p><a href="https://git-scm.com/">下载地址 </a></p><blockquote><p>先创建项目文件夹,然后右键<code>git bash</code> 在框里输入<code>git init</code>初始化git仓库</p></blockquote><p>然后:</p><p><img src="https://s2.loli.net/2022/07/11/3eCxD7EQIhkPNjb.png" alt=""></p><p><strong>记得把-- global去掉</strong>,因为加上就是全部使用该用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同步不同电脑上代码git clone 加ssh克隆</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步 ssh-keygen 然后一路回车，此时在本地会生成一个id_ras.pub文件,这就是秘钥配置到你想存的云平台上即可</span><br></pre></td></tr></table></figure><ul><li><code>git status</code>表示当前目录下有多少文件还没有收录到仓库里</li><li><code>git add .</code> 该文件夹下未收录的全部收录</li><li><code>git commit -m &quot;提交的信息&quot;</code>(将暂存区提交到本地)</li><li><code>git push</code> 上传到云端仓库</li></ul><h3 id="2-然后是创建项目">2.然后是创建项目</h3><blockquote><p>记得选java8</p></blockquote><p><img src="https://s2.loli.net/2022/07/11/CxAYmIbHB4E6uFL.png" alt=""></p><p>下一步之后选择<code>Spring Web</code></p><h2 id="项目内容">项目内容</h2><p>大题需求功能分块</p><p><img src="https://s2.loli.net/2022/07/11/wjNRcObla53szLq.jpg" alt=""></p><p>前端样式</p><p><img src="https://s2.loli.net/2022/07/11/rMu2vLW7eYnSPb1.png" alt=""></p><ul><li>前后端分离模式<ul><li><code>SpringBoot</code>实现后端</li><li><code>Vue3</code>实现<code>Web</code>端和<code>AcApp</code>端</li></ul></li></ul><p><a href="https://v5.bootcss.com/">bootstrap</a>前端常用的网站样式</p><h2 id="SpringBoot中的常用模块">SpringBoot中的常用模块</h2><ul><li>pojo层：将数据库中的表对应成Java中的Class</li><li>mapper层（也叫Dao层）：将pojo层的class中的操作，映射成sql语句</li><li>service层：写具体的业务逻辑，组合使用mapper中的操作</li><li>serviceimpl层: 这个是service接口的实现类,给controller层使用</li><li>controller层：负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3的学习</title>
      <link href="/posts/36243.html"/>
      <url>/posts/36243.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue环境的配置">Vue环境的配置</h3><p>1.首先安装<code>Nodejs</code></p><p><a href="https://nodejs.org/en/">链接,选择稳定版本</a></p><p>2.安装Vue</p><p>打开<code>powershell</code>,执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>启动vue</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><blockquote><p>常见问题1：Windows上运行vue，提示无法加载文件，表示用户权限不足。<br>解决方案：用管理员身份打开终端，输入set-ExecutionPolicy RemoteSigned，然后输入y</p></blockquote><p>总得来说Vue文件是由三部分,<code>template</code>部分,<code>style</code>部分和<code>script</code>部分</p><p><img src="https://s2.loli.net/2022/07/08/Uy69AT5WovNXIjG.png" alt=""></p><ol><li>components部分表示组件部分,当一个网页有多个部分组成时可以拆开来写,例如每个页面都有一个不变的导航,这样就可以写成组件,然后引用即可,import引用<img src="https://s2.loli.net/2022/07/08/QgumnXj9eWPGbpO.png" alt=""></li><li>router相当于路由,就是处理跳转</li><li>views类似于代表网页内实现的功能和效果</li></ol><p><code>&lt;style&gt;</code>标签添加scope属性后，不同组件间的css不会相互影响。</p><p><code>export default</code> `对象的属性：</p><ul><li><code>name</code>：组件的名称</li><li><code>components</code>：存储<code>&lt;template&gt;</code>中用到的所有组件</li><li><code>props</code>：存储父组件传递给子组件的数据</li><li><code>watch()</code>：当某个数据发生变化时触发`</li><li><code>computed</code>：动态计算某个数据`</li><li><code>setup(props, context)</code>：初始化变量、函数<br><code>ref</code>定义变量，可以用.value属性重新赋值`, 需要改变值的时候要return</li><li><code>reactive</code>定义对象，不可重新赋值`</li><li><code>props</code>存储父组件传递过来的数据`</li><li><code>context.emit()</code>：触发父组件绑定的函数</li></ul><p>ps:父节点向子节点要用props传输, 父节点向子节点传数据,要用事件触发(context.emit(“触发的函数”, 要传的变量))</p><p><strong>template</strong></p><ul><li><code>&lt;slot&gt;&lt;/slot&gt;</code>：存放父组件传过来的children。</li><li><code>v-on:click</code>或@click属性：绑定事件</li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>属性：判断</li><li><code>v-for</code>属性：循环，:key循环的每个元素需要有唯一的key</li><li><code>v-bind</code>:或:：绑定属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java随机刷点题</title>
      <link href="/posts/56999.html"/>
      <url>/posts/56999.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-862-三元组排序"><a href="https://www.acwing.com/problem/content/864/">AcWing 862. 三元组排序</a></h2><p>给定 $N$ 个三元组$(x,y,z)$，其中 $x$ 是整数，$y$ 是浮点数，$z$ 是字符串。</p><p>请你按照 $x$ 从小到大的顺序将这些三元组打印出来。</p><p>数据保证不同三元组的 $x$ 值互不相同。</p><blockquote><p>就是类似于c++的结构体,这里用到了类和边长数组,和排序函数<code>Collections.sort</code> 排序时间复杂度是O(nlog(n)), 还有重载排序的方法</p></blockquote><p><strong>下面几种方式都可以进行俺键值排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tuple</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    String z;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">tuple</span><span class="params">(<span class="type">int</span> x, <span class="type">double</span> y, String z)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">double</span> y;</span><br><span class="line">        String z;</span><br><span class="line">        List&lt;tuple&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;tuple&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">            a.add(<span class="keyword">new</span> <span class="title class_">tuple</span>(sc.nextInt(), sc.nextDouble(), sc.next()));</span><br><span class="line">        Collections.sort(a, (tuple o1, tuple o2) -&gt; o1.x - o2.x);</span><br><span class="line">        <span class="keyword">for</span> (tuple item : a)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d %.2f %s\n&quot;</span>, item.x, item.y, item.z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tuple</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    String z;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">tuple</span><span class="params">(<span class="type">int</span> x, <span class="type">double</span> y, String z)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">double</span> y;</span><br><span class="line">        String z;</span><br><span class="line">        List&lt;tuple&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;tuple&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">            a.add(<span class="keyword">new</span> <span class="title class_">tuple</span>(sc.nextInt(), sc.nextDouble(), sc.next()));</span><br><span class="line">        Collections.sort(a, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;tuple&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(tuple o1, tuple o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.x - o2.x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (tuple item : a)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d %.2f %s\n&quot;</span>, item.x, item.y, item.z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tuple</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;tuple&gt; &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    String z;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(tuple o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.x &lt; o.x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">tuple</span><span class="params">(<span class="type">int</span> x, <span class="type">double</span> y, String z)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">double</span> y;</span><br><span class="line">        String z;</span><br><span class="line">        List&lt;tuple&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;tuple&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            a.add(<span class="keyword">new</span> <span class="title class_">tuple</span>(sc.nextInt(), sc.nextDouble(), sc.next()));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(a);</span><br><span class="line">        <span class="keyword">for</span> (tuple item : a) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d %.2f %s\n&quot;</span>, item.x, item.y, item.z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自己体会与c++的相同之处</p><h3 id="AcWing-53-最小的k个数"><a href="https://www.acwing.com/problem/content/49/">AcWing 53. 最小的k个数</a></h3><p>输入 $n$ 个整数，找出其中最小的 $k$ 个数。</p><blockquote><p>排个序即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getLeastNumbers_Solution</span><span class="params">(<span class="type">int</span> [] a, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">         List&lt;Integer&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) b.add(a[i]);</span><br><span class="line">         Collections.sort(b);</span><br><span class="line">         List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) ans.add(b.get(i));</span><br><span class="line">         <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-75-和为S的两个数字"><a href="https://www.acwing.com/problem/content/71/">AcWing 75. 和为S的两个数字</a></h3><p>输入一个数组和一个数字 $s$，在数组中查找两个数，使得它们的和正好是 $s$。</p><p>如果有多对数字的和等于$s$，输出任意一对即可。</p><p>你可以认为每组输入中都至少含有一组满足条件的输出。</p><blockquote><p>用set集合这样就能O(nlogn)的复杂度了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findNumbersWithSum(<span class="type">int</span>[] nums, <span class="type">int</span> sum) &#123;</span><br><span class="line">        Set&lt;Integer&gt; S = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) S.add(num);</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S.contains(sum - num)) &#123;</span><br><span class="line">                ans = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;num, sum - num&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-17-从尾到头打印链表"><a href="https://www.acwing.com/problem/content/18/">AcWing 17. 从尾到头打印链表</a></h3><p>输入一个链表的头结点，按照 <strong>从尾到头</strong> 的顺序返回节点的值。</p><p>返回的结果用数组存储。</p><blockquote><p>先正着遍历一遍存入数组中,然后在倒过来即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] printListReversingly(ListNode head) &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1010</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; head != <span class="literal">null</span>; head = head.next) a[idx ++] = head.val; </span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[idx];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = idx - <span class="number">1</span>; i &lt; idx &amp;&amp; j &gt;= <span class="number">0</span>; i ++, j --) b[i] = a[j];</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-779-最长公共字符串后缀"><a href="https://www.acwing.com/problem/content/781/">AcWing 779. 最长公共字符串后缀</a></h3><p>给出若干个字符串，输出这些字符串的最长公共后缀。</p><blockquote><p>先把所有的的字符串反过来,然后从第一位往后判断所有的串只要一有不相同的就退出即可</p></blockquote><h4 id="swig￼9"><mark class="hl-label red">这里要提醒的就是String数组是不会改变修改的只会生成一个新的串时间复杂度很坏所以这里介绍两种处理字符串修改的方法StringBuilder和StringBuffer</mark> </h4><p><code>StringBuffer</code>线程安全，速度较慢；<code>StringBuilder</code>线程不安全，速度较快。</p><p>所以一般算法题用<code>StringBuilder</code> 项目用<code>StringBuffer</code>会好些</p><p>两者的用法一模一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="type">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure><p>所以这题的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">QuickRead</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuickRead</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> qr.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            String[] s = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">            <span class="type">int</span> <span class="variable">min_len</span> <span class="operator">=</span> <span class="number">205</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                s[i] = qr.next();</span><br><span class="line">                s[i] = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s[i]).reverse().toString();</span><br><span class="line">                min_len = Math.min(s[i].length(), min_len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> min_len;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ans_val</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; min_len; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[j].charAt(i) != s[j - <span class="number">1</span>].charAt(i)) ok = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                    ans = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> ans_val += s[<span class="number">0</span>].charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(ans_val).reverse().toString());</span><br><span class="line">            n = qr.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickRead</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">while</span> (tokenizer == <span class="literal">null</span> || !tokenizer.hasMoreElements()) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">return</span> reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextChar</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">return</span> next().charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigInteger <span class="title function_">nextBigInteger</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">nextBigDecimal</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AcWing-823-排列"><a href="https://www.acwing.com/problem/content/825/">AcWing 823. 排列</a></h3><p>给定一个整数 $n$，将数字 $1∼n$ 排成一排，将会有很多种排列方法。</p><p>现在，请你按照字典序将所有的排列方法输出。</p><blockquote><p>这题的一半输出会超时这里用快输，注意最后关掉！！！！不然会运行不出来！！！这里还要注意全局变量等等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] st;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] p;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        st = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) out.write(p[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            p[u] = i + <span class="number">1</span>;</span><br><span class="line">            dfs(u + <span class="number">1</span>);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot的学习</title>
      <link href="/posts/56999.html"/>
      <url>/posts/56999.html</url>
      
        <content type="html"><![CDATA[<p>首先安利的是AcWing的springboot课,无废话满满干活<a href="https://www.acwing.com/activity/content/1877/">课程链接</a>质量杠杠的</p><p><strong>安装IDEA</strong> 专业版</p><ul><li>官方下载地址：<a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></li></ul><p>可以到淘宝买个激活码用</p><p>学spingboot之前肯定得先重新的捋一遍<code>java</code>的语法课</p><h3 id="java是如何定义变量的呢">java是如何定义变量的呢</h3><ul><li>这里可以完全按照c++的方法进行定义变量类型, 但是String的<code>S</code>要大写,</li><li>定义常量的时候,用final , 即<code>final int N = 110;</code></li></ul><h3 id="java的输入">java的输入</h3><ol><li>输入效率较低的时候</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();  <span class="comment">// 读入下一个字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">// 读入下一个整数</span></span><br><span class="line"><span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextFloat();  <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line"><span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> sc.nextDouble();  <span class="comment">// 读入下一个双精度浮点数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();  <span class="comment">// 读入下一行</span></span><br></pre></td></tr></table></figure><ol start="2"><li>效率较高，输入规模较大时使用。注意需要抛异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">包装好的java快速读入类</mark> <blockquote><p>.next相当于C++中的 <code>string s; cin &gt;&gt; s;</code> <strong>一次读一个不含空格的字符串</strong></p><p>.nextLine相当于C++中的<code>string s;getline(cin, s);</code> <strong>一次读一行</strong></p><p>剩下的类似, 这里Java比C++方便的地方就是大整数不用自己手动去实现,自身就带<s>就很棒</s></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuickRead</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="type">StringTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">while</span> (tokenizer == <span class="literal">null</span> || !tokenizer.hasMoreElements()) &#123;</span><br><span class="line">            tokenizer = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(reader.readLine());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">return</span> reader.readLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextChar</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">return</span> next().charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigInteger <span class="title function_">nextBigInteger</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">nextBigDecimal</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BigInteger <span class="title function_">abs</span><span class="params">()</span>  返回大整数的绝对值</span><br><span class="line">BigInteger <span class="title function_">add</span><span class="params">(BigInteger val)</span> 返回两个大整数的和</span><br><span class="line">BigInteger <span class="title function_">and</span><span class="params">(BigInteger val)</span>  返回两个大整数的按位与的结果</span><br><span class="line">BigInteger <span class="title function_">andNot</span><span class="params">(BigInteger val)</span> 返回两个大整数与非的结果</span><br><span class="line">BigInteger <span class="title function_">divide</span><span class="params">(BigInteger val)</span>  返回两个大整数的商</span><br><span class="line"><span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span>   返回大整数的<span class="type">double</span>类型的值</span><br><span class="line"><span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span>   返回大整数的<span class="type">float</span>类型的值</span><br><span class="line">BigInteger <span class="title function_">gcd</span><span class="params">(BigInteger val)</span>  返回大整数的最大公约数</span><br><span class="line"><span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> 返回大整数的整型值</span><br><span class="line"><span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> 返回大整数的<span class="type">long</span>型值</span><br><span class="line">BigInteger <span class="title function_">max</span><span class="params">(BigInteger val)</span> 返回两个大整数的最大者</span><br><span class="line">BigInteger <span class="title function_">min</span><span class="params">(BigInteger val)</span> 返回两个大整数的最小者</span><br><span class="line">BigInteger <span class="title function_">mod</span><span class="params">(BigInteger val)</span> 用当前大整数对val求模</span><br><span class="line">BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger val)</span> 返回两个大整数的积</span><br><span class="line">BigInteger <span class="title function_">negate</span><span class="params">()</span> 返回当前大整数的相反数</span><br><span class="line">BigInteger <span class="title function_">not</span><span class="params">()</span> 返回当前大整数的非</span><br><span class="line">BigInteger <span class="title function_">or</span><span class="params">(BigInteger val)</span> 返回两个大整数的按位或</span><br><span class="line">BigInteger <span class="title function_">pow</span><span class="params">(<span class="type">int</span> exponent)</span> 返回当前大整数的exponent次方</span><br><span class="line">BigInteger <span class="title function_">remainder</span><span class="params">(BigInteger val)</span> 返回当前大整数除以val的余数</span><br><span class="line">BigInteger <span class="title function_">leftShift</span><span class="params">(<span class="type">int</span> n)</span> 将当前大整数左移n位后返回</span><br><span class="line">BigInteger <span class="title function_">rightShift</span><span class="params">(<span class="type">int</span> n)</span> 将当前大整数右移n位后返回</span><br><span class="line">BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger val)</span>返回两个大整数相减的结果</span><br><span class="line"><span class="type">byte</span>[] toByteArray(BigInteger val)将大整数转换成二进制反码保存在<span class="type">byte</span>数组中</span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span> 将当前大整数转换成十进制的字符串形式</span><br><span class="line">BigInteger <span class="title function_">xor</span><span class="params">(BigInteger val)</span> 返回两个大整数的异或</span><br></pre></td></tr></table></figure><ol start="3"><li>输出效率较低</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line">System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">System.out.print(<span class="string">&quot;yxc\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">// 格式化输出，float与double都用%f输出</span></span><br></pre></td></tr></table></figure><mark class="hl-label red">输出效率高写法</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组常用API">数组常用API</h3><ul><li>属性length：返回数组长度，注意不加小括号</li><li>Arrays.sort()：数组排序</li><li>Arrays.fill(int[] a, int val)：填充数组</li><li>Arrays.toString()：将数组转化为字符串</li><li>Arrays.deepToString()：将多维数组转化为字符串</li></ul><h3 id="String不能被修改"><code>String</code>不能被修改</h3><p>String不能被修改，如果打算修改字符串，可以使用StringBuilder和StringBuffer。</p><p>StringBuffer线程安全，速度较慢；StringBuilder线程不安全，速度较快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="type">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure><p>常用API：</p><ul><li>reverse()：翻转字符串</li></ul><h3 id="类与接口">类与接口</h3><ul><li>public: 所有对象均可以访问</li><li>private: 只有自己可以访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个类只能继承一个类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">继承得到类会有父类的所有的信息,举个y总的例子,就是一个游戏人物都有一个hero的基类,然后可以写不同的类去继承原来的基类,达成多态（同一个类的同一个函数不同的行为）</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">colorPoint</span>(<span class="number">6</span>, <span class="number">8</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Point</span> <span class="variable">colorPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态，同一个类的实例，调用相同的函数，运行就结果不同</span></span><br><span class="line">        System.out.println(point.toString());</span><br><span class="line">        System.out.println(colorPoint.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口-规范不同程序猿的编程的-实现的方法都一样-不能少漏方法">接口 (规范不同程序猿的编程的,实现的方法都一样,不能少漏方法)</h3><p>interface与class类似。主要用来定义类中所需包含的函数。</p><p>接口也可以继承其他接口，一个类可以实现多个接口。</p><blockquote><p>作用是规范人了要实现的接口, 接口是不能实例化的,一个接口可以继承多个接口,(特别注意与类不一样,一个类只能继承一个类,super是调用父类,所以父类只能有一个)</p></blockquote><h3 id="常用的容器-队列-栈-优先队-变长数组-集合-字典等等">常用的容器, <code>队列, 栈, 优先队, 变长数组, 集合, 字典等等</code></h3><p>用到去查即可</p><p><strong>补充</strong></p><p>类里面定义静态变量与一般变量的区别</p><ol><li>一般变量是与实例绑定的,而静态变量是与类绑定的,</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        a.f();</span><br><span class="line">        Node.g();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第57场周赛</title>
      <link href="/posts/16452.html"/>
      <url>/posts/16452.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4487-最长连续子序列"><a href="https://www.acwing.com/problem/content/4490/">AcWing 4487. 最长连续子序列</a></h2><blockquote><h3 id="就是慢慢转换就行-sum-i-l-i-r-a-i">就是慢慢转换就行, $\sum_{i=l}^{i=r}a_i$</h3><p>先让所有的a[i]都减去100, 在求前缀和<br>s[r] - s[l - 1] &gt; 0, r &gt; l</p><p>就是找最长的连续的一段使其总和大于零的序列, 二分枚举长度<br>而在 check 时，判断是否存在大于或等于该长度的解，也是正确的。<br>用一个最小值保存枚举区间外的最小的值,如果区间的值-最小值还是大于零的那么就存在大于该长度的解</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3,<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta">long long min(long long x, long long y) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x &lt;= y) return x;</span></span></span><br><span class="line"><span class="string"><span class="meta">else return y;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; a(n + 1), sum(n + 1, 0);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">sum[i] = sum[i - 1] + a[i] - 100;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int l = 0, r = n;</span></span></span><br><span class="line"><span class="string"><span class="meta">auto check = [&amp;](int x) -&gt; bool &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ll mi = 1e18;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (i &lt; x) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">mi = min(mi, sum[i - x]);</span></span></span><br><span class="line"><span class="string"><span class="meta">if (sum[i] - mi &gt; 0) return true;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">return false;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (l &lt; r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int mid = l + r + 1 &gt;&gt; 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (check(mid)) l = mid;</span></span></span><br><span class="line"><span class="string"><span class="meta">else r = mid - 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; l &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第58场周赛</title>
      <link href="/posts/32558.html"/>
      <url>/posts/32558.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天的题格外的水0.0</p></blockquote><h2 id="AcWing-4489-最长子序列"><a href="https://www.acwing.com/problem/content/4492/">AcWing 4489. 最长子序列</a></h2><p>只需要贪心的枚举连续的最长满足题目给的条件的即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt;n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; n &amp;&amp; a[j - <span class="number">1</span>] * <span class="number">2</span> &gt;= a[j]) j ++;</span><br><span class="line">ans = <span class="built_in">max</span>(j - i, ans);</span><br><span class="line">i = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-4490-染色"><a href="https://www.acwing.com/problem/content/4493/">AcWing 4490. 染色</a></h2><blockquote><p>只需要从根结点往下枚举即可,然后记录父节点的颜色,如果与当前的颜色一致就不需要重复染色,如果不一致就需要将下面都染成当前节点的颜色,把当前的颜色传递下去</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int c[N], n, ans = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;vector&lt;int&gt;&gt; g;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void dfs(int u, int fa_tag) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto v : g[u]) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (fa_tag != c[v]) ans ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">dfs(v, c[v]);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">g.resize(n + 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 2, x; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta">g[x].emplace_back(i);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; c[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">dfs(1, c[1]);</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第56场周赛</title>
      <link href="/posts/16452.html"/>
      <url>/posts/16452.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4484-有限小数"><a href="https://www.acwing.com/problem/content/4487/">AcWing 4484. 有限小数</a></h2><p>​给定三个整数$p,q,b$，请你计算十进制表示下的$p/q$ 的结果在 $b$ 进制下是否为有限小数。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据占一行，包含三个整数 $p,q,b$。</p><h4 id="输出格式">输出格式</h4><p>每组数据输出一行结果，如果 $p/q$ 的结果在 $b$ 进制下是有限小数，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h4 id="数据范围">数据范围</h4><p>前五个测试点满足$1≤T≤10$。<br>所有测试点满足 $1≤T≤{10^5}$，$0≤p≤{10^{18}}$，$1≤q≤{10^{18}}$，$2≤b≤10^{18}$。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">6 12 10</span><br><span class="line">4 3 10</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>思路与理解:</p><p>题目就是求$p/q$在$b$进制下是否为有限小数, 这里我们先看特殊的十进制的情况下, <strong>首先要给p/q化简到最简形式</strong>, 看<code>q</code>是否存在质因子与10互质,如果存在的话就是无限的小数, 可以枚举q的质因数枚举因数时间复杂度会TLE, 下面做法√:</p><p>当gcd(q,b)不为1时，重复做把q除以gcd(q,b)的操作。<br>当gcd(q,b)为1时，如果q不为1，那么原来的q含有一个质因数，它不是b的质因数（并且此时q的所有质因数都不是b的质因数）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> p, q, b;</span><br><span class="line">cin &gt;&gt; p &gt;&gt; q &gt;&gt; b;</span><br><span class="line">q /= __gcd(p, q);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">int</span> t = __gcd(q, b);</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q % t == <span class="number">0</span>) q /= t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces1690</title>
      <link href="/posts/36454.html"/>
      <url>/posts/36454.html</url>
      
        <content type="html"><![CDATA[<h2 id="Print-a-Pedestal-Codeforces-logo">[<a href="https://codeforces.com/contest/1690/problem/A">Print a Pedestal (Codeforces logo?)</a>]</h2><blockquote><p>奇偶分开讨论即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">int fis = (n + 2) / 3 + 1;</span><br><span class="line">// debug(fis);</span><br><span class="line">int sheng = n - fis;</span><br><span class="line">if (sheng &amp; 1) &#123;</span><br><span class="line">cout &lt;&lt; ((sheng &gt;&gt; 1) + 1) &lt;&lt; &#x27; &#x27; &lt;&lt; fis &lt;&lt; &#x27; &#x27; &lt;&lt; (sheng &gt;&gt; 1) &lt;&lt; endl;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">cout &lt;&lt; ((sheng &gt;&gt; 1) + 1) &lt;&lt; &#x27; &#x27; &lt;&lt; fis &lt;&lt; &#x27; &#x27; &lt;&lt; ((sheng &gt;&gt; 1) - 1) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-Decrements">[<a href="https://codeforces.com/contest/1690/problem/B">Array Decrements</a>]</h2><p>​Kristina has two arrays $a$ and $b$, each containing $n$ non-negative integers. She can perform the following operation on array $a$ any number of times:   apply a decrement to each non-zero element of the array, that is, replace the value of each element $a_i$ such that $a_i &gt; 0$ with the value $a_i - 1$ ($1 \le i \le n$). If $a_i$ was $0$, its value does not change. Determine whether Kristina can get an array $b$ from an array $a$ in some number of operations (probably zero). In other words, can she make $a_i = b_i$ after some number of operations for each $1 \le i \le n$?For example, let $n = 4$, $a = [3, 5, 4, 1]$ and $b = [1, 3, 2, 0]$. In this case, she can apply the operation twice:   after the first application of the operation she gets $a = [2, 4, 3, 0]$;  after the second use of the operation she gets $a = [1, 3, 2, 0]$. Thus, in two operations, she can get an array $b$ from an array $a$.</p><p>题意：长度相同的A数组和B数组，问是否可以操作若干次，每次让A数组中所有数减一（一个元素最多减到0，之后再操作，也不会改变），最后使得A=B</p><p>思路：看代码特判点即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max_cha = <span class="number">-1</span>, max_0cha = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> cha = a[i] - b[i];</span><br><span class="line"><span class="keyword">if</span> (cha &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (max_cha != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (max_cha != cha) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">max_cha = <span class="built_in">max</span>(max_cha, cha);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">max_0cha = <span class="built_in">max</span>(cha, max_0cha);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(max_cha, max_0cha);</span></span><br><span class="line"><span class="keyword">if</span> (max_cha == <span class="number">-1</span> || max_0cha == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (max_cha &lt; max_0cha) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Restoring-the-Duration-of-Tasks">[<a href="https://codeforces.com/contest/1690/problem/C">Restoring the Duration of Tasks</a>]</h2><p>题意：n个任务，有初始时间和结束时间，求任务的持续时间，任务的执行按照顺序执行，如果当前执行a任务，但是b任务已经到底初始时间，那么b任务等待a任务执行完之和开始，依次类推（可能会有多个任务在等待，按照顺序等着执行即可）</p><blockquote><p>模拟过程即可,记录经历过的最大的bi</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s) cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : f) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pre_max = s[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="number">0</span>, f[i] - <span class="built_in">max</span>(s[i], pre_max)) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">pre_max = <span class="built_in">max</span>(pre_max, f[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Black-and-White-Stripe">[<a href="https://codeforces.com/contest/1690/problem/D">Black and White Stripe</a>]</h2><p>题意：一个字符串有B和W两种字符，代表黑和白，现在可以进行操作，把白色染色成为黑色，问得到k个连续的黑色最少需要操作多少次</p><p>思路:</p><blockquote><ol><li><p>用前缀和即可,看有<code>B</code>最多的区间距为<code>k</code>的</p></li><li><p>滑动窗口</p></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">string a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>, res = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i - q[hh] &gt;= k) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[q[hh]] == <span class="string">&#x27;B&#x27;</span>) res --;</span><br><span class="line">hh ++;</span><br><span class="line">&#125;</span><br><span class="line">q[++ tt] = i;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="string">&#x27;B&#x27;</span>) res ++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="number">0</span>, k - ans) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Price-Maximization">[<a href="https://codeforces.com/contest/1690/problem/E">Price Maximization</a>]</h2><p>题意：n（偶数）个商品，现在每两个打包在一起，他们的成本为价格总和除k，问成本最大</p><p>思路:</p><blockquote><p>每个商品除k就是基本的成本,然后看取余k的存在数组中,然后贪心余数最小的加余数最大的是否<code>&gt;= k</code>  大于的话贡献在加1</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ans += (x / k);</span><br><span class="line">x %= k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(a));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>; i &lt; j; i ++)</span><br><span class="line"><span class="keyword">if</span> (a[i] + a[j] &gt;= k) ans ++, j --;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shifting-String">[<a href="https://codeforces.com/contest/1690/problem/F">Shifting String</a>]</h2><p>题意:给你一个字符串数组,再给你一个变换排列(按照对应的位置进行变换),看最少进行多少次排列的变换能回到原来的字符串数组</p><p>思路:</p><blockquote><p>经过一定数量的操作后，每个字符都会回到它的位置。把每一个循环看作是一个每次循环移动的弦。答案是 lcm(最小公倍数)所有的周期长度, 最小循环节kmp判断即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">vector&lt;string&gt; s;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> str[N];</span><br><span class="line">cin &gt;&gt; str + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">string now = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> u = i;</span><br><span class="line"><span class="keyword">while</span> (!st[u]) st[u] = <span class="literal">true</span>, now += str[u], u = a[u];</span><br><span class="line">s.<span class="built_in">emplace_back</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">sz</span>(x);</span><br><span class="line">string p = <span class="string">&quot;*&quot;</span> + x;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ne</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++;</span><br><span class="line">ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m % (m - ne[m])) res = <span class="built_in">lcm</span>(res, m);</span><br><span class="line"><span class="keyword">else</span> res = <span class="built_in">lcm</span>(res, m - ne[m]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces1686</title>
      <link href="/posts/7399.html"/>
      <url>/posts/7399.html</url>
      
        <content type="html"><![CDATA[<h2 id="Everything-Everywhere-All-But-One">[<a href="https://codeforces.com/contest/1686/problem/A">Everything Everywhere All But One</a>]</h2><p>You are given an array of $n$ integers $a_1, a_2, \ldots, a_n$. After you watched the amazing film “Everything Everywhere All At Once”, you came up with the following <a href="http://operation.In">operation.In</a> one operation, you choose $n-1$ elements of the array and replace each of them with their arithmetic mean (which doesn’t have to be an integer). For example, from the array $[1, 2, 3, 1]$ we can get the array $[2, 2, 2, 1]$, if we choose the first three elements, or we can get the array $[\frac{4}{3}, \frac{4}{3}, 3, \frac{4}{3}]$, if we choose all elements except the <a href="http://third.Is">third.Is</a> it possible to make all elements of the array equal by performing a finite number of such operations?</p><p>n长度的数组选n-1个变成他们的平均值,问是否存在能使他们全部相同的变法</p><p>思路:</p><blockquote><p>枚举每一位即可,看是否正确,范围很小,暴力即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x, sum += x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">double</span>)((sum - x) / (n - <span class="number">1</span>)) == x) &#123;</span><br><span class="line"><span class="comment">// debug(sum - x, n - 1);</span></span><br><span class="line"><span class="comment">// debug(double((sum - x) / (n - 1)), x);</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Odd-Subarrays">[<a href="https://codeforces.com/contest/1686/problem/B">Odd Subarrays</a>]</h2><p>​For an array $[b_1, b_2, \ldots, b_m]$ define its number of inversions as the number of pairs $(i, j)$ of integers such that $1 \le i &lt; j \le m$ and $b_i&gt;b_j$. Let’s call array $b$ odd if its number of inversions is odd.</p><p>​For example, array $[4, 2, 7]$ is odd, as its number of inversions is $1$, while array $[2, 1, 4, 3]$ isn’t, as its number of inversions is $2$.You are given a permutation $[p_1, p_2, \ldots, p_n]$ of integers from $1$ to $n$ (each of them appears exactly once in the permutation).</p><p>​You want to split it into several consecutive subarrays (maybe just one), so that the number of the odd subarrays among them is as large as possible. What largest number of these subarrays may be odd?</p><blockquote><p>贪心即可,肯定是越短的越好,每次只取最短的即可,从前往后遍历</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, pre = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; pre) ans ++, pre = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> pre = <span class="built_in">max</span>(a[i], pre);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Circular-Local-MiniMax">[<a href="https://codeforces.com/contest/1686/problem/C">Circular Local MiniMax</a>]</h2><p>​You are given $n$ integers $a_1, a_2, \ldots, a_n$. Is it possible to arrange them on a circle so that each number is strictly greater than both its neighbors or strictly smaller than both its neighbors?In other words, check if there exists a rearrangement $b_1, b_2, \ldots, b_n$ of the integers $a_1, a_2, \ldots, a_n$ such that for each $i$ from $1$ to $n$ at least one of the following conditions holds:</p><ul><li>$b_{i-1} &lt; b_i &gt; b_{i+1}$</li><li>$b_{i-1} &gt; b_i &lt; b_{i+1}$</li></ul><p>​To make sense of the previous formulas for $i=1$ and $i=n$, one shall define $b_0=b_n$ and $b_{n+1}=b_1$.</p><p><strong>题意:随便排列一个序列,满足$b_{i-1} &lt; b_i &gt; b_{i+1}$, 和$b_{i-1} &gt; b_i &lt; b_{i+1}$</strong></p><p>思路:</p><blockquote><p>直接按照原序列排个序即可,从前往后一个隔一个先放一半, 然后在从前往后接着放,如果这种都不满足,那么一定就是不存在的,因为我们已经尽可能的考虑用小的去匹配小的了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(a));</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">b[i] = a[cnt ++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">b[i] = a[cnt ++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i % n] &lt;= b[(i - <span class="number">1</span>) % n] || b[i % n] &lt;= b[(i + <span class="number">1</span>) % n]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : b) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linguistics">[<a href="https://codeforces.com/contest/1686/problem/D">Linguistics</a>]</h2><p>​Alina has discovered a weird language, which contains only $4$ words: $\texttt{A}$, $\texttt{B}$, $\texttt{AB}$, $\texttt{BA}$. It also turned out that there are no spaces in this language: a sentence is written by just concatenating its words into a single string.</p><p>​Alina has found one such sentence $s$ and she is curious: is it possible that it consists of precisely $a$ words $\texttt{A}$, $b$ words $\texttt{B}$, $c$ words $\texttt{AB}$, and $d$ words $\texttt{BA}$?</p><p>​In other words, determine, if it’s possible to concatenate these $a+b+c+d$ words in some order so that the resulting string is $s$. Each of the $a+b+c+d$ words must be used exactly once in the concatenation, but you can choose the order in which they are concatenated.</p><h3 id="题意">题意</h3><p>给出若干个<code>A</code>,<code>B</code>,<code>AB</code>,<code>BA</code>,再给出一个字符串,判断该字符串能否由给出的这些字符拼接而成.</p><p>不会做T_T, 这里分享一个在知乎大佬的题解思路 <a href="https://zhuanlan.zhihu.com/p/520021239">大佬的题解链接</a></p><blockquote><p>首先我们用双指针枚举出每一段相邻字符都不等的子串,形如<code>ABABA</code>, <code>ABAB</code>, <code>BABA</code>, <code>BABAB</code>.</p><p>以最少需要多少个<code>A</code>和<code>AB</code>为例.<code>B</code>和<code>BA</code>可以用类似的方法算出.</p><p>我们发现长度为偶数len的这种子串,只有两种可能分别是以<code>A</code>开头的形如<code>ABAB</code>,或者以<code>B</code>开头形如<code>BABA</code>对于以<code>B</code>开头的子串,显然并一定不需要<code>AB</code>,而以<code>A</code>开头的子串,如果我们还有单独的一对<code>A</code>和<code>B</code>的碎片剩余,那么我们就可以通过消耗一对<code>A</code>和<code>B</code>的碎片删去子串头和尾的字符把这个子串变成以<code>B</code>开头,这样就不需要<code>AB</code>这种碎片了,但是如果我们没有一对<code>A</code>和<code>B</code>的碎片剩余,那么就至少需要len/2个<code>AB</code>碎片.所以我们可以记录所有的长度为偶数,假设我们还剩下r对单独的<code>A</code>和<code>B</code>碎片,那么我们就可以删掉长度最长的r个子串,剩下的子串长度之和就是最少需要的<code>AB</code>串数量.而对于至少需要的<code>A</code>或<code>B</code>串数量,偶数长度串是不会产生贡献的.</p><p>而对于长度为奇数的子串,我们可以选择是删掉头还是删掉尾来使这个子串变成<code>ABAB</code>形还是<code>BABA</code>形,所以我们这种串只会用掉一个<code>A</code>或<code>B</code>碎片但是不会对最少需要的<code>AB</code>产生贡献.</p><p>得到了最少需要的<code>A</code>,<code>B</code>, <code>AB</code>,<code>BA</code>这些碎片最少需要的数量后判断拥有的数量是否大于最少需要的数量即可.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> anum = <span class="number">0</span>, bnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="string">&#x27;A&#x27;</span>) anum ++;</span><br><span class="line"><span class="keyword">else</span> bnum ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(a + c + d, b + c + d);</span></span><br><span class="line"><span class="keyword">if</span> (a + c + d != anum || b + c + d != bnum) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> abnum = <span class="number">0</span>, banum = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; ab, ba; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line">j = i;</span><br><span class="line"><span class="keyword">while</span> (s[j] != s[j + <span class="number">1</span>] &amp;&amp; j &lt; <span class="built_in">sz</span>(s) - <span class="number">1</span>) j ++;</span><br><span class="line"><span class="keyword">if</span> ((j - i + <span class="number">1</span>) % <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;A&#x27;</span>) a --;</span><br><span class="line"><span class="keyword">else</span> b --;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;A&#x27;</span>) abnum += ((j - i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), ab.<span class="built_in">push</span>((j - i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> banum += ((j - i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>), ba.<span class="built_in">push</span>((j - i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">i = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> t = <span class="built_in">min</span>(a, b);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">sz</span>(ab) &amp;&amp; t) &#123;</span><br><span class="line">t --;</span><br><span class="line">abnum -= ab.<span class="built_in">top</span>();</span><br><span class="line">ab.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (abnum &gt; c) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">t = <span class="built_in">min</span>(a, b);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">sz</span>(ba) &amp;&amp; t) &#123;</span><br><span class="line">t --;</span><br><span class="line">banum -= ba.<span class="built_in">top</span>();</span><br><span class="line">ba.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (banum &gt; d) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces1682</title>
      <link href="/posts/57318.html"/>
      <url>/posts/57318.html</url>
      
        <content type="html"><![CDATA[<h2 id="Palindromic-Indices">[<a href="https://codeforces.com/contest/1682/problem/A">Palindromic Indices</a>]</h2><p>You are given a palindromic string $s$ of length $n$.You have to count the number of indices $i$ $(1 \le i \le n)$ such that the string after removing $s_i$ from $s$ still remains a palindrome. For example, consider $s$ = “aba”  If we remove $s_1$ from $s$, the string becomes “ba” which is not a palindrome.  If we remove $s_2$ from $s$, the string becomes “aa” which is a palindrome.  If we remove $s_3$ from $s$, the string becomes “ab” which is not a palindrome. A palindrome is a string that reads the same backward as forward. For example, “abba”, “a”, “fef” are palindromes whereas “codeforces”, “acd”, “xy” are not.</p><p>题意：给定一个回文串s，问有多少个位置i，删除s[i]后字符串依旧是回文串？</p><blockquote><p>只需要看中间那一串连续的可以删多少以可，即与中间的答案相同的有几个， 奇数的话答案加1</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> mid = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> l = mid, r = mid;</span><br><span class="line"><span class="keyword">while</span> (s[l] == s[mid]) l --;</span><br><span class="line"><span class="keyword">while</span> (s[r] == s[mid]) r ++;</span><br><span class="line">cout &lt;&lt; r - l - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AND-Sorting">[<a href="https://codeforces.com/contest/1682/problem/B">AND Sorting</a>]</h2><p>You are given a permutation $p$ of integers from $0$ to $n-1$ (each of them occurs exactly once). Initially, the permutation is not sorted (that is, $p_i&gt;p_{i+1}$ for at least one $1 \le i \le n - 1$). The permutation is called $X$-sortable for some non-negative integer $X$ if it is possible to sort the permutation by performing the operation below some finite number of times:   Choose two indices $i$ and $j$ $(1 \le i \lt j \le n)$ such that $p_i &amp; p_j = X$.  Swap $p_i$ and $p_j$. Here $&amp;$ denotes the bitwise AND operation.Find the maximum value of $X$ such that $p$ is $X$-sortable. It can be shown that there always exists some value of $X$ such that $p$ is $X$-sortable.</p><p>给你一个未排好序的的排列</p><p>你可以选择一个数</p><p>对于如果$a_i$ &amp; $a_j$ = $x$就可以进行交换</p><p>要求你将这个排列排好序同时让你找到最大的值$x$并输出</p><blockquote><p>只需要看没有归位的即$a[i]$ $\neq$ $i$的位置即可, 那么先把所有的不在相应位置上的<code>&amp;</code>在一起再用与值去交换,不过不是这样的话就不能全部交换考虑 <img src="https://www.zhihu.com/equation?tex=%5CAnd" alt="[公式]"> 运算的一个特性，一个数进行 <img src="https://www.zhihu.com/equation?tex=%5CAnd" alt="[公式]"> 运算的话一定是越来越小的，当一个数是 “X-Sortable” 以后，我们再用 <img src="https://www.zhihu.com/equation?tex=X" alt="[公式]"> 去并其他未排序的数，得到新的 <img src="https://www.zhihu.com/equation?tex=X%27" alt="[公式]">，这里的 <img src="https://www.zhihu.com/equation?tex=X%27" alt="[公式]"> 是兼容 <img src="https://www.zhihu.com/equation?tex=X" alt="[公式]"> 的，也即 “X-sortable” 的数一定 “X’-sortable”。</p></blockquote><p>比如 0 3 4 1 2</p><p>3 4 1 2需要交换，与值为 3 &amp; 4 &amp; 1 &amp; 2 = 0</p><p>我们通过0来进行交换</p><p>第一次交换为4 3 0 1 2</p><p>第二次交换为4 3 2 1 0</p><p>第三次交换为0 3 2 1 4</p><p>第四次交换为3 0 2 1 4</p><p>第五次交换为3 1 2 0 4</p><p>第六次交换完成0 1 2 3 4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != i) ans &amp;= a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LIS-or-Reverse-LIS">[<a href="https://codeforces.com/contest/1682/problem/C">LIS or Reverse LIS?</a>]</h2><p>​You are given an array $a$ of $n$ positive integers. Let $\text{LIS}(a)$ denote the length of longest strictly increasing subsequence of $a$. For example,</p><ul><li>$\text{LIS}([2, \underline{1}, 1, \underline{3}])$ = $2$.</li><li>$\text{LIS}([\underline{3}, \underline{5}, \underline{10}, \underline{20}])$ = $4$.</li><li>$\text{LIS}([3, \underline{1}, \underline{2}, \underline{4}])$ = $3$.</li></ul><p>​We define array $a’$ as the array obtained after reversing the array $a$ i.e. $a’ = [a_n, a_{n-1}, \ldots , a_1]$.The beauty of array $a$ is defined as $min(\text{LIS}(a),\text{LIS}(a’))$.Your task is to determine the maximum possible beauty of the array $a$ if you can rearrange the array $a$ arbitrarily.</p><p>给你一个数组</p><p>你可以任意排列这个数组</p><p>让你得到$min(\text{LIS}(a),\text{LIS}(a’))$的最大值并输出最大值</p><blockquote><p>当有两个一样的时候我们都可以选, 当只有一个的时候,我们可以分成两部分,左边上升的与右边上升的,平均左边+1右边在+1这样就能是最后的答案最小的最大</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, y = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">cin &gt;&gt; x, mp[x] ++;</span><br><span class="line"><span class="keyword">if</span> (mp[x] &lt;= <span class="number">2</span>) y ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (y + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Circular-Spanning-Tree">[<a href="https://codeforces.com/contest/1682/problem/D">Circular Spanning Tree</a>]</h2><p>​There are $n$ nodes arranged in a circle numbered from $1$ to $n$ in the clockwise order. You are also given a binary string $s$ of length $n$.Your task is to construct a tree on the given $n$ nodes satisfying the two conditions below or report that there such tree does not exist:  For each node $i$ $(1 \le i \le n)$, the degree of node is even if $s_i = 0$ and odd if $s_i = 1$.  No two edges of the tree intersect internally in the circle. The edges are allowed to intersect on the circumference.  Note that all edges are drawn as straight line segments. For example, edge $(u, v)$ in the tree is drawn as a line segment connecting $u$ and $v$ on the circle.A tree on $n$ nodes is a connected graph with $n - 1$ edges.</p><p>题意：</p><p>给你n个节点</p><p>并给出每个节点的度的奇偶性</p><p>问你能不能构造出符合要求的树</p><p>可以则给出构造方案</p><blockquote><p>先看是否可行,因为肯定要有子节点,所以一定有一个是奇数的节点,树的性质:所有度的和一定是偶数,一条边贡献两个度, 不满足上面就是<code>NO</code></p><p>如何构造: 把所有的为1的当做一个子节点, 然后把后面的<code>0</code>加入到链中,这样就能满足所有的子节点都是奇数,  然后把根节点合并即可.</p></blockquote><p><img src="https://s2.loli.net/2022/05/26/IQ3racnGmxtuNYB.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> s[N];</span><br><span class="line">cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> one = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) one += (s[i] == <span class="string">&#x27;1&#x27;</span>), st[i] = (s[i] == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// debug(one);</span></span><br><span class="line"><span class="keyword">if</span> (one % <span class="number">2</span> || !one) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tmp, pre;</span><br><span class="line">vector&lt;PII&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) tmp.<span class="built_in">emplace_back</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : tmp) &#123;</span><br><span class="line"><span class="keyword">while</span> (!st[(x + <span class="number">1</span>) % n]) &#123;</span><br><span class="line">ans.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(x, (x + <span class="number">1</span>) % n));</span><br><span class="line">x = (x + <span class="number">1</span>) % n;</span><br><span class="line">st[(x + <span class="number">1</span>) % n] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">sz</span>(pre); i ++) ans.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(pre[<span class="number">0</span>], pre[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : ans) cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces1681</title>
      <link href="/posts/56999.html"/>
      <url>/posts/56999.html</url>
      
        <content type="html"><![CDATA[<h2 id="Game-with-Cards">[<a href="https://codeforces.com/contest/1681/problem/A">Game with Cards</a>]</h2><p>​Alice and Bob play a game. Alice has $n$ cards, the $i$-th of them has the integer $a_i$ written on it. Bob has $m$ cards, the $j$-th of them has the integer $b_j$ written on it.On the first turn of the game, the first player chooses one of his/her cards and puts it on the table (plays it). On the second turn, the second player chooses one of his/her cards such that the integer on it is greater than the integer on the card played on the first turn, and plays it. On the third turn, the first player chooses one of his/her cards such that the integer on it is greater than the integer on the card played on the second turn, and plays it, and so on — the players take turns, and each player has to choose one of his/her cards with greater integer than the card played by the other player on the last turn.If some player cannot make a turn, he/she loses.For example, if Alice has $4$ cards with numbers $[10, 5, 3, 8]$, and Bob has $3$ cards with numbers $[6, 11, 6]$, the game may go as follows:  Alice can choose any of her cards. She chooses the card with integer $5$ and plays it.  Bob can choose any of his cards with number greater than $5$. He chooses a card with integer $6$ and plays it.  Alice can choose any of her cards with number greater than $6$. She chooses the card with integer $10$ and plays it.  Bob can choose any of his cards with number greater than $10$. He chooses a card with integer $11$ and plays it.  Alice can choose any of her cards with number greater than $11$, but she has no such cards, so she loses. Both Alice and Bob play optimally (if a player is able to win the game no matter how the other player plays, the former player will definitely win the game).You have to answer two questions:  who wins if Alice is the first player?  who wins if Bob is the first player?</p><p>题意：现 A、B 两人各有一些正整数。两人进行博弈：</p><ul><li>A选择其中一个正整数展示。但是，选择的数字必须严格比上一个被展示的数大。（如果是第一次，则没有限制。）</li><li>B选择其中一个正整数展示。但是，选择的数字必须严格比上一个被展示的数大。</li></ul><p>无法展示正整数的选手失败。对于A先手的情况和B先手的情况，分别输出胜者。</p><p>分析:</p><blockquote><p>只需要判断两边那个最大的最大即可,如果相同的话,先手赢</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> maxa = *<span class="built_in">max_element</span>(<span class="built_in">all</span>(a)), maxb = *<span class="built_in">max_element</span>(<span class="built_in">all</span>(b));</span><br><span class="line"><span class="keyword">if</span> (maxa - maxb &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maxa - maxb &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Card-Trick">[<a href="https://codeforces.com/contest/1681/problem/B">Card Trick</a>]</h2><p>​Monocarp has just learned a new card trick, and can’t wait to present it to you. He shows you the entire deck of $n$ cards. You see that the values of cards from the topmost to the bottommost are integers $a_1, a_2, \dots, a_n$, and all values are different.Then he asks you to shuffle the deck $m$ times. With the $j$-th shuffle, you should take $b_j$ topmost cards and move them under the remaining $(n - b_j)$ cards without changing the order.And then, using some magic, Monocarp tells you the topmost card of the deck. However, you are not really buying that magic. You tell him that you know the topmost card yourself. Can you surprise Monocarp and tell him the topmost card before he shows it?</p><p>现有长度 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 的数组 <img src="https://www.zhihu.com/equation?tex=a" alt="[公式]"> ，执行若干次以下操作：</p><ul><li>给出一个整数 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ，进行向左循环移位 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 次。（将最前面 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 个元素取出，按顺序插入到数组的末尾。例如 <img src="https://www.zhihu.com/equation?tex=%281%2C2%2C3%2C4%2C5%2C6%29%2Cx%3D2%5Cto+%283%2C4%2C5%2C6%2C1%2C2%29" alt="[公式]"> ）</li></ul><p>问所有操作结束后，数组的第一个元素是多少。</p><p>分析：循环移位 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 次后，数组的第一个元素变为 <img src="https://www.zhihu.com/equation?tex=a_%7B1%2Bx%7D" alt="[公式]"> 。</p><p>所以，将所有的 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 加起来，对 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 取模（循环移位 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 次等于没有操作)，输出移位后的第一个元素即可。</p><blockquote><p>枚举循环过程即可,记得没走一个去一次模</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> m, sum = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; m; i ++) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">sum += x;</span><br><span class="line">sum %= n;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; a[sum] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Double-Sort">[<a href="https://codeforces.com/contest/1681/problem/C">Double Sort</a>]</h2><p>​You are given two arrays $a$ and $b$, both consisting of $n$ <a href="http://integers.In">integers.In</a> one move, you can choose two indices $i$ and $j$ ($1 \le i, j \le n$; $i \neq j$) and swap $a_i$ with $a_j$ and $b_i$ with $b_j$. You have to perform the swap in both arrays.You are allowed to perform at most $10^4$ moves (possibly, zero). Can you make both arrays sorted in a non-decreasing order at the end? If you can, print any sequence of moves that makes both arrays sorted.</p><p>题意：给定两个数组 <img src="https://www.zhihu.com/equation?tex=a%2Cb" alt="[公式]"> ，问能否进行以下操作，使得两个数组均有序。</p><ul><li>选择位置 <img src="https://www.zhihu.com/equation?tex=i%2Cj" alt="[公式]"> ，交换 <img src="https://www.zhihu.com/equation?tex=a_i%2Ca_j" alt="[公式]"> ；交换 <img src="https://www.zhihu.com/equation?tex=b_i%2Cb_j" alt="[公式]"> 。</li></ul><p>数组长度是 <img src="https://www.zhihu.com/equation?tex=100" alt="[公式]"> ，交换次数不能超过 <img src="https://www.zhihu.com/equation?tex=10000" alt="[公式]"> 。如果可以，输出一种方案。</p><blockquote><p>枚举每两个位置之间的关系, 如果$a_i$ 与 $a_j$的关系跟$b_i$与$b_j$的关系冲突时就肯定比不行</p><p>然后利用冒泡排序记录一下路径即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : b) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">vector&lt;PII&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a[i] &gt; a[j] &amp;&amp; b[i] &lt; b[j]) || (a[i] &lt; a[j] &amp;&amp; b[i] &gt; b[j])) &#123;</span><br><span class="line"><span class="comment">// debug(a[i], a[j], b[i], b[j], i, j);</span></span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt;= a[j + <span class="number">1</span>] &amp;&amp; b[j] &lt;= b[j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(b[j], b[j + <span class="number">1</span>]);</span><br><span class="line">ans.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(j, j + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; n; i ++) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; n; i ++) cout &lt;&lt; b[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sz</span>(ans) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : ans)</span><br><span class="line">cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Required-Length">[<a href="https://codeforces.com/contest/1681/problem/D">Required Length</a>]</h2><p>You are given two integer numbers, $n$ and $x$. You may perform several operations with the integer $x$.Each operation you perform is the following one: choose any digit $y$ that occurs in the decimal representation of $x$ at least once, and replace $x$ by $x \cdot y$.You want to make the length of decimal representation of $x$ (without leading zeroes) equal to $n$. What is the minimum number of operations required to do that?</p><p>题意：现有一个数 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> ，你可以进行若干操作，使其的长度等于 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 。</p><ul><li>选择一个在 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 的十进制表达中出现过的数位 <img src="https://www.zhihu.com/equation?tex=y" alt="[公式]"> ，令 <img src="https://www.zhihu.com/equation?tex=x%5Cleftarrow+x%2Ay" alt="[公式]"></li></ul><p>求最少次数，或报告这不可能。</p><blockquote><p>BFS求最短即可,不会计算太多次</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int unsigned long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int n, x;</span></span></span><br><span class="line"><span class="string"><span class="meta">int bfs(int x) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">queue&lt;PII&gt; q;</span></span></span><br><span class="line"><span class="string"><span class="meta">q.push(&#123;x, 0&#125;);</span></span></span><br><span class="line"><span class="string"><span class="meta">map&lt;int, int&gt; mp;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (!q.empty()) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">auto [res, cnt] = q.front();</span></span></span><br><span class="line"><span class="string"><span class="meta">q.pop();</span></span></span><br><span class="line"><span class="string"><span class="meta">int len = 0, qq = res;</span></span></span><br><span class="line"><span class="string"><span class="meta">set&lt;int&gt; S;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (qq) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (qq % 10 != 0) S.insert(qq % 10);</span></span></span><br><span class="line"><span class="string"><span class="meta">qq /= 10, len ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (len &gt; n) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (len == n) return cnt;</span></span></span><br><span class="line"><span class="string"><span class="meta">int t = res;</span></span></span><br><span class="line"><span class="string"><span class="meta">int temp = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto x : S) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (!mp[res * x]) q.push(&#123;res * x, cnt + 1&#125;);</span></span></span><br><span class="line"><span class="string"><span class="meta">mp[res * x] ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x == 1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; -1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">int t = x, len = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (t) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if(t % 10 &lt;= 1) len ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">    t /= 10;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (sz(to_string(x)) == len) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    cout &lt;&lt; -1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; bfs(x) &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= ___; i ++) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces1680</title>
      <link href="/posts/7785.html"/>
      <url>/posts/7785.html</url>
      
        <content type="html"><![CDATA[<h2 id="A-Minimums-and-Maximums">[A.<a href="https://codeforces.com/contest/1680/problem/A">Minimums and Maximums</a>]</h2><p>​An array is beautiful if both of the following two conditions meet:</p><ul><li><p>there are at least $l_1$ and at most $r_1$ elements in the array equal to its minimum;</p></li><li><p>there are at least $l_2$ and at most $r_2$ elements in the array equal to its maximum.</p></li></ul><p>​For example, the array $[2, 3, 2, 4, 4, 3, 2]$ has $3$ elements equal to its minimum ($1$-st, $3$-rd and $7$-th) and $2$ elements equal to its maximum ($4$-th and $5$-th).Another example: the array $[42, 42, 42]$ has $3$ elements equal to its minimum and $3$ elements equal to its maximum.Your task is to calculate the minimum possible number of elements in a beautiful array.</p><p>如果区间重叠，则取重叠部分的最小值$min(l1, l2)$，否则就取$l1 + l2$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line"><span class="keyword">if</span> ((l2 &lt;= r1 &amp;&amp; l2 &gt;= l1) || l2 == l1) &#123;</span><br><span class="line">cout &lt;&lt; l2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l2 &gt; r1) &#123;</span><br><span class="line">cout &lt;&lt; l1 + l2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1 &gt; l2 &amp;&amp; l2 &gt; r2) &#123;</span><br><span class="line">cout &lt;&lt; l1 + l2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1 &gt;= l2 &amp;&amp; l1 &lt;= r2) &#123;</span><br><span class="line">cout &lt;&lt; l1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; l1 + l2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Robots">[B.<a href="https://codeforces.com/contest/1680/problem/B">Robots</a>]</h2><p>There is a field divided into $n$ rows and $m$ columns. Some cells are empty (denoted as E), other cells contain robots (denoted as R).You can send a command to all robots at the same time. The command can be of one of the four types:</p><ul><li><p>move up;</p></li><li><p>move right;</p></li><li><p>move down;</p></li><li><p>move left.</p></li></ul><p>​     When you send a command, all robots at the same time attempt to take one step in the direction you picked. If a robot tries to move outside the field, it explodes; otherwise, every robot moves to an adjacent cell in the chosen direction.You can send as many commands as you want (possibly, zero), in any order. Your goal is to make at least one robot reach the upper left corner of the field. Can you do this without forcing any of the robots to explode?</p><blockquote><p>题意：在$n * m$的棋盘，有若干机器人。现在你可以发布以下四条指令之一，让所有机器人</p><ul><li>向左移动一格</li><li>向右移动一格</li><li>向上移动一格</li><li>向下移动一格</li></ul><p>要求不能移动出棋盘，问能否发布若干条命令后，有机器人到达左上角。</p></blockquote><p>分析:找出左上角那一个点如果存在其他点的在它的左边或在它的上面,那就一定到不了左上角</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">g</span><span class="params">(n)</span>, t</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">x = i, y = j;</span><br><span class="line"><span class="keyword">goto</span> qwe;</span><br><span class="line">&#125;</span><br><span class="line">qwe:;</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;R&#x27;</span> &amp;&amp; (i &lt; x || j &lt; y)) ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ok) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-Binary-String">[C.<a href="https://codeforces.com/contest/1680/problem/C">Binary String</a>]</h2><p>​You are given a string $s$ consisting of characters 0 and/or 1.You have to remove several (possibly zero) characters from the beginning of the string, and then several (possibly zero) characters from the end of the string. The string may become empty after the removals. The cost of the removal is the maximum of the following two values:</p><ul><li>the number of characters 0 left in the string;</li><li>the number of characters 1 removed from the string.</li></ul><p>What is the minimum cost of removal you can achieve?</p><p>题意：给定一个01字符串s，假设s2为其子串，a表示s2中0的个数，b表示s中1的个数-s2中1的个数。</p><p>求所有可能子串max(a, b)的最小值</p><p>要让a和b的最大值最小那么,当b大的时候我们增加a,当a大时我们增加b这样贪心即可,增加a的方法即增加0的数量,即往右拓展,增加b的方法就是增加1的方法就是是左区间端点往右移</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="type">static</span> <span class="type">char</span> s[N];</span><br><span class="line"> cin &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line"> <span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"> <span class="type">int</span> zero = <span class="number">0</span>, one = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) one += (s[i] == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"> <span class="type">int</span> ans = <span class="built_in">min</span>(one, n - one);</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"> <span class="keyword">while</span> (zero &lt; one &amp;&amp; (++ j) &lt;= n) &#123;</span><br><span class="line"> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;0&#x27;</span>) zero ++;</span><br><span class="line"> <span class="keyword">else</span> one --;</span><br><span class="line"> &#125;</span><br><span class="line"> ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(one, zero));</span><br><span class="line"> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>) zero --;</span><br><span class="line"> <span class="keyword">else</span> one ++;</span><br><span class="line"> &#125;</span><br><span class="line"> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$D$没看0.0</p><h2 id="E-Moving-Chips">[E. <a href="https://codeforces.com/contest/1680/problem/E">Moving Chips</a>]</h2><p>​You are given a board of size $2 \times n$ ($2$ rows, $n$ columns). Some cells of the board contain chips. The chip is represented as ‘*’, and an empty space is represented as ‘.’. It is guaranteed that there is at least one chip on the board.</p><p>​In one move, you can choose any chip and move it to any adjacent (by side) cell of the board (if this cell is inside the board). It means that if the chip is in the first row, you can move it left, right or down (but it shouldn’t leave the board). Same, if the chip is in the second row, you can move it left, right or up.If the chip moves to the cell with another chip, the chip in the destination cell disappears (i. e. our chip captures it).</p><p>​Your task is to calculate the minimum number of moves required to leave exactly one chip on the board.You have to answer $t$ independent test cases.</p><p>题意：有一个$2 * n$的网格，某些位置有一些芯片。每次操作可以将任意一格子中的所有芯片移动一格，问最少需要移动多少次使得所有芯片都在一个格子中。<code>*</code>表示该位置有芯片</p><p>分析:</p><ol><li><p>dp,先把两边没用的上下都是<code>.</code>的全部删掉,然后,当前第i列可以从上一列的同一行转过来需要+1,如果上一列的不同行还有<code>*</code>那么就再+1, 如果从上一列 的不同行转过来, 那么直接+2即可,只用考虑从前面转移是对的.</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(a, <span class="built_in">min</span>(b, c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">string s[<span class="number">2</span>];</span><br><span class="line">cin &gt;&gt; s[<span class="number">0</span>] &gt;&gt; s[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">while</span> (s[<span class="number">0</span>].<span class="built_in">back</span>() == <span class="string">&#x27;.&#x27;</span> &amp;&amp; s[<span class="number">1</span>].<span class="built_in">back</span>() == <span class="string">&#x27;.&#x27;</span>) s[<span class="number">0</span>].<span class="built_in">pop_back</span>(), s[<span class="number">1</span>].<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">reverse</span>(<span class="built_in">all</span>(s[<span class="number">0</span>])), <span class="built_in">reverse</span>(<span class="built_in">all</span>(s[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">n = <span class="built_in">sz</span>(s[<span class="number">0</span>]);</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>, INF));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = (s[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>), f[<span class="number">0</span>][<span class="number">1</span>] = (s[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++) </span><br><span class="line"><span class="built_in">Min</span>(f[i + <span class="number">1</span>][j], f[i][j ^ <span class="number">1</span>] + <span class="number">2</span>, f[i][j] + <span class="number">1</span> + (s[j ^ <span class="number">1</span>][i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line">cout &lt;&lt; <span class="built_in">min</span>(f[n - <span class="number">1</span>][<span class="number">0</span>], f[n - <span class="number">1</span>][<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>(好理解)还有一种状态转移就是(从两边转移到中间),判断从左边转移的最小的,和右边转移最小的加在一起, 转移方程跟</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][N], udp[<span class="number">2</span>][N]; <span class="comment">// 把芯片放到第i,j个位置上的所有方案, min,</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">g</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g) cin &gt;&gt; x, x = <span class="string">&#x27; &#x27;</span>+ x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">dp[i][j] = udp[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line"><span class="keyword">while</span> (g[<span class="number">0</span>][l] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; g[<span class="number">1</span>][l] == <span class="string">&#x27;.&#x27;</span>) l ++;</span><br><span class="line"><span class="keyword">while</span> (g[<span class="number">0</span>][r] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; g[<span class="number">1</span>][r] == <span class="string">&#x27;.&#x27;</span>) r --;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = l + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i ^ <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span> + (g[i ^ <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = r - <span class="number">1</span>; j; j --)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)</span><br><span class="line">udp[i][j] = <span class="built_in">min</span>(udp[i ^ <span class="number">1</span>][j + <span class="number">1</span>] + <span class="number">2</span>, udp[i][j + <span class="number">1</span>] + <span class="number">1</span> + (g[i ^ <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">ans = <span class="built_in">min</span>(ans, dp[i][j] + udp[i][j] + (g[i ^ <span class="number">1</span>][j] == <span class="string">&#x27;*&#x27;</span>), (dp[i ^ <span class="number">1</span>][j] + udp[i ^ <span class="number">1</span>][j] + <span class="number">1</span>));</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第51场周赛</title>
      <link href="/posts/20734.html"/>
      <url>/posts/20734.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4419-上车"><a href="https://www.acwing.com/problem/content/4422/">AcWing 4419. 上车</a></h2><p>有 $n$ 辆客车，其中第 $i$ 辆车的已载客数为 $pi$，最大载客数为 $qi$。</p><p>现在，来了两个人想要乘坐<strong>同一辆车</strong>前去旅行。</p><p>请问，一共有多少辆客车可供他们选择。</p><p><strong>每日一氵</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b - a &gt;= <span class="number">2</span>) ans ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-4420-连通分量"><a href="https://www.acwing.com/problem/content/4423/">AcWing 4420. 连通分量</a></h2><p>给定一个 $n×m$ 的方格矩阵，每个方格要么是空格（用 <code>.</code> 表示），要么是障碍物（用 <code>*</code> 表示）。</p><p>如果两个空格存在公共边，则两空格视为相邻。</p><p>我们称一个<strong>不可扩展</strong>的空格集合为连通分量，如果集合中的任意两个空格都能通过相邻空格的路径连接。</p><p>这其实是一个典型的众所周知的关于连通分量（<a href="https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/290350?fr=aladdin">Connected Component</a> ）的定义。</p><p>现在，我们的问题如下：</p><p>对于每个包含障碍物的单元格 $(x,y)$，假设它是一个空格（所有其他单元格保持不变）的前提下，请你计算包含 $(x,y)$ 的连通分量所包含的单元格数量。</p><p>注意，所有假设求解操作之间都是相互独立的，互不影响。</p><p><strong>本人思路:</strong></p><blockquote><p>把所有连通块进行染色标号, 每一个连通块都有一个记号,然后记录每个连通块的大小,</p><p>最后在枚举所有的<code>*</code> ,计算每个<code>*</code>号上下左右所有不同的连通块的数量和即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>, n, m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1010</span>][<span class="number">1010</span>], ans[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">bool</span> st[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; g;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x &gt;= n) || y &lt; <span class="number">0</span> || (y &gt;= m)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line">a[x][y] = cnt;</span><br><span class="line">st[x][y] = <span class="literal">true</span>;</span><br><span class="line">res ++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line"><span class="type">int</span> sx = x + dx[i];</span><br><span class="line"><span class="type">int</span> sy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(sx, sy)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (st[sx][sy] || g[sx][sy] == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(sx, sy, cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">g.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !st[i][j]) &#123;</span><br><span class="line"><span class="comment">// debug(i, j);</span></span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i, j, cnt);</span><br><span class="line">mp[cnt ++] = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> S[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++) &#123;</span><br><span class="line"><span class="type">int</span> sx = i + dx[k], sy = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(sx, sy)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!S[a[sx][sy]]) &#123;</span><br><span class="line">S[a[sx][sy]] = <span class="literal">true</span>;</span><br><span class="line">t += mp[a[sx][sy]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k ++) &#123;</span><br><span class="line"><span class="type">int</span> sx = i + dx[k], sy = j + dy[k];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(sx, sy)) <span class="keyword">continue</span>;</span><br><span class="line">S[a[sx][sy]] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(i, j,  S.size(), t);</span></span><br><span class="line">ans[i][j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i][j] == <span class="number">0</span>) cout &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; ans[i][j] % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeforcesRound#780(Div.3)</title>
      <link href="/posts/2175.html"/>
      <url>/posts/2175.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vasya-and-Coins"><a href="https://codeforces.com/contest/1660/problem/A">Vasya and Coins</a></h2><p>Vasya decided to go to the grocery store. He found in his wallet $a$ coins of $1$ burle and $b$ coins of $2$ burles. He does not yet know the total cost of all goods, so help him find out $s$ ($s &gt; 0$): the minimum positive integer amount of money he cannot pay without change or pay at all using only his coins.For example, if $a=1$ and $b=1$ (he has one $1$-burle coin and one $2$-burle coin), then:</p><ul><li>he can pay $1$ burle without change, paying with one $1$-burle coin,</li><li>he can pay $2$ burle without change, paying with one $2$-burle coin,</li><li>he can pay $3$ burle without change by paying with one $1$-burle coin and one $2$-burle coin,</li><li>he cannot pay $4$ burle without change (moreover, he cannot pay this amount at all).</li></ul><p>So for $a=1$ and $b=1$ the answer is $s=4$.</p><p><strong>题意 你有a枚一元硬币和b枚2元硬币，问你最小不能组合的零钱数</strong></p><p>没有1元就拼不出1元等奇数, 有的话能拼到的最大的是<code>a + 2 * b</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int a, b;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; a &gt;&gt; b;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a == 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; 1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; a + 2 * b + 1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">// 1 4</span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="Vlad-and-Candies"><a href="https://codeforces.com/contest/1660/problem/B">Vlad and Candies</a></h2><p>Not so long ago, Vlad had a birthday, for which he was presented with a package of candies. There were $n$ types of candies, there are $a_i$ candies of the type $i$ ($1 \le i \le n$).Vlad decided to eat exactly one candy every time, choosing any of the candies of a type that is currently the most frequent (if there are several such types, he can choose any of them). To get the maximum pleasure from eating, Vlad does not want to eat two candies of the same type in a row.Help him figure out if he can eat all the candies without eating two identical candies in a row.</p><p>收到一包含有n种类的糖果，你每次不能连续两次吃相同种类的糖果并且只能吃数量最多的糖果，问你能不能把所有糖吃完,</p><p>思路:我们可以马上发现,只需要最多的糖果与第二多的糖果之间的数量不超过2,就能一直往下吃,碰见小的就会有更多的选择</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; a(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">int max1 = -1, max2 = -1;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[i] &gt;= max1) max2 = max1, max1 = a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">else if (a[i] &gt;= max2) max2 = a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">if (n == 1 &amp;&amp; a[0] &gt; 1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>NO<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; </span></span></span><br><span class="line"><span class="string"><span class="meta">if (n == 1 &amp;&amp; a[0] == 1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>YES<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">if (max1 - max2 &gt; 1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>NO<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; &quot;</span>YES<span class="string">&quot; &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="Get-an-Even-String"><a href="https://codeforces.com/contest/1660/problem/C">Get an Even String</a></h2><p>A string $a=a_1a_2\dots a_n$ is called even if it consists of a concatenation (joining) of strings of length $2$ consisting of the same characters. In other words, a string $a$ is even if two conditions are satisfied at the same time:</p><ul><li>its length $n$ is even;</li><li>for all odd $i$ ($1 \le i \le n - 1$), $a_i = a_{i+1}$ is satisfied.</li></ul><p>For example, the following strings are even: “” (empty string), “tt”, “aabb”, “oooo”, and “ttrrrroouuuuuuuukk”. The following strings are not even: “aaa”, “abab” and “abba”.Given a string $s$ consisting of lowercase Latin letters. Find the minimum number of characters to remove from the string $s$ to make it even. The deleted characters do not have to be consecutive.</p><p><strong>题意:</strong></p><p>定义一个字符串是合法的满足 1. 长度为偶数 2. 所有奇数位的字符都等于下一个字符<br>例如“aabb”，“ttllqq”是合法的,给你你个字符串，问你最少删除多少个字串能令其变成合法字符串</p><p><strong>思路:</strong></p><p>如果直接求删除的话很难维护删除后的信息, 所以想到求最多能组成一对一对的的长度,这里有两种思路,一种是dp,还有一种是贪心,</p><ol><li><p>$DP$, 状态转移方程的含义$f_i$ 前i个字母中能拼成两两一对的最长的(可以不连续), 下面考虑如何转移, 如果,开一个数组来记录,当前字母前面出现的位置, 转移的上一个位置从上一个出现相同字母的上一个位置转移</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">sz</span>(s);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">pre</span><span class="params">(<span class="number">27</span>, <span class="number">-1</span>)</span></span>;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">f[i + <span class="number">1</span>] = f[i];</span><br><span class="line"><span class="keyword">if</span> (pre[s[i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">-1</span>) </span><br><span class="line">f[i + <span class="number">1</span>] = <span class="built_in">max</span>(f[i + <span class="number">1</span>], f[pre[s[i] - <span class="string">&#x27;a&#x27;</span>]] + <span class="number">2</span>);</span><br><span class="line">pre[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n - f[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>$贪心$, 如果字母之前出现过就加一对字母<code>ans+2</code>然后清空标记</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">sz</span>(s), ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(<span class="number">256</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (st[s[i]]) &#123;</span><br><span class="line">ans += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fill</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>(), <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> st[s[i]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n - ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Maximum-Product-Strikes-Back"><a href="https://codeforces.com/contest/1660/problem/D">Maximum Product Strikes Back</a></h2><p>You are given an array $a$ consisting of $n$ integers. For each $i$ ($1 \le i \le n$) the following inequality is true: $-2 \le a_i \le 2$.</p><p>You can remove any number (possibly $0$) of elements from the beginning of the array and any number (possibly $0$) of elements from the end of the array.</p><p>You are allowed to delete the whole array.You need to answer the question: how many elements should be removed from the beginning of the array, and how many elements should be removed from the end of the array, so that the result will be an array whose product (multiplication) of elements is maximal. If there is more than one way to get an array with the maximum product of elements on it, you are allowed to output any of them. The product of elements of an empty array (array of length $0$) should be assumed to be $1$.</p><p><strong>题意</strong></p><p>给你一个元素大小绝对值小于等于2的数组，你可以从头和从尾部删去若干个数，问你怎么删去原色能使剩下元素中乘积最大，如果数组为空，乘积为 1</p><p><strong>思路</strong></p><p>其实这题思路好想但是边界处理比较恶心,算是锻炼一下代码能力了吧</p><p>答案肯定不是<code>0</code>,题目说空是<code>1</code>, 所有0是划分线, 所以只需要看所有分块的最大值即可,只有2有贡献值所有统计<code>2</code>的个数即可,因为值会很大所以统计2的个数不能直接存,如果分块内的负数数量是偶数个,直接进行比即可,如果是奇数,枚举从左边开始减直到减到第一个负数,同理从右边枚举,比较最大的即可,还是有很多细节的,见代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">#define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; a(n + 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) cin &gt;&gt; a[i];</span></span></span><br><span class="line"><span class="string"><span class="meta">tuple&lt;int, int, int&gt; ans&#123;n, 0, 0&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (n == 1) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[0] == 2) cout &lt;&lt; 0 &lt;&lt; &#x27; &#x27; &lt;&lt; 0 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">else cout &lt;&lt; 0 &lt;&lt; &#x27; &#x27; &lt;&lt; 1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">return;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0, j = 0; i &lt; n; ) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">j = i;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (j &lt; n &amp;&amp; a[j] != 0) j ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[j] == 0 || j == n) j --;</span></span></span><br><span class="line"><span class="string"><span class="meta">int fu = 0, er = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(i, j);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int l = i; l &lt;= j; l ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[l] &lt; 0) fu ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (abs(a[l]) == 2)er ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (fu == 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int L, R, res;</span></span></span><br><span class="line"><span class="string"><span class="meta">tie(L, R, res) = ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (res &lt; er) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = &#123;i, j, er&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(L, R, res);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; else if (!(fu &amp; 1)) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int L, R, res;</span></span></span><br><span class="line"><span class="string"><span class="meta">tie(L, R, res) = ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (res &lt; er) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = &#123;i, j, er&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int t = er;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int l = i; l &lt;= j; l ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[l] == 2) t --;</span></span></span><br><span class="line"><span class="string"><span class="meta">else if (a[l] == -2) t --;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[l] &lt; 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int L, R, res;</span></span></span><br><span class="line"><span class="string"><span class="meta">tie(L, R, res) = ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (res &lt; t) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = &#123;l + 1, j, t&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">break;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">t = er;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int r = j; r &gt;= i; r --) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[r] == 2) t --;</span></span></span><br><span class="line"><span class="string"><span class="meta">else if (a[r] == -2) t --;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[r] &lt; 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int L, R, res;</span></span></span><br><span class="line"><span class="string"><span class="meta">tie(L, R, res) = ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (res &lt; t) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = &#123;i, r - 1, t&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">break;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">i = j + 2;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">int L, R, res;</span></span></span><br><span class="line"><span class="string"><span class="meta">tie(L, R, res) = ans;</span></span></span><br><span class="line"><span class="string"><span class="meta">// debug(L, R, res);</span></span></span><br><span class="line"><span class="string"><span class="meta">if (n == L || n == R) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; 0 &lt;&lt; &#x27; &#x27; &lt;&lt; n &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; else cout &lt;&lt; L &lt;&lt; &#x27; &#x27; &lt;&lt; n - R - 1 &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="Matrix-and-Shifts"><a href="https://codeforces.com/contest/1660/problem/E">Matrix and Shifts</a></h2><p>You are given a binary matrix $A$ of size $n \times n$. Rows are numbered from top to bottom from $1$ to $n$, columns are numbered from left to right from $1$ to $n$. The element located at the intersection of row $i$ and column $j$ is called $A_{ij}$. Consider a set of $4$ operations:</p><ol><li>Cyclically shift all rows up. The row with index $i$ will be written in place of the row $i-1$ ($2 \le i \le n$), the row with index $1$ will be written in place of the row $n$.</li><li>Cyclically shift all rows down. The row with index $i$ will be written in place of the row $i+1$ ($1 \le i \le n - 1$), the row with index $n$ will be written in place of the row</li><li>Cyclically shift all columns to the left. The column with index $j$ will be written in place of the column $j-1$ ($2 \le j \le n$), the column with index $1$ will be written in place of the column $n$.</li><li>Cyclically shift all columns to the right. The column with index $j$ will be written in place of the column $j+1$ ($1 \le j \le n - 1$), the column with index $n$ will be written in place of the column $1$.</li></ol><p>You can perform an arbitrary (possibly zero) number of operations on the matrix; the operations can be performed in any order.After that, you can perform an arbitrary (possibly zero) number of new xor-operations:</p><ul><li>Select any element $A_{ij}$ and assign it with new value $A_{ij} \oplus 1$. In other words, the value of $(A_{ij} + 1) \bmod 2$ will have to be written into element $A_{ij}$.</li></ul><p>Each application of this xor-operation costs one burl. Note that the $4$ shift operations — are free. These $4$ operations can only be performed before xor-operations are performed.Output the minimum number of burles you would have to pay to make the $A$ matrix unitary. A unitary matrix is a matrix with ones on the main diagonal and the rest of its elements are zeros (that is, $A_{ij} = 1$ if $i = j$ and $A_{ij} = 0$ otherwise).</p><p><strong>题意</strong></p><p>每次可以对几个元素^1就是变换一下0变1, 1变0;问最少多少次可以是只有主对角线上的值为1,可以循环移动每一行和每一列,循环不花费,改变花费</p><p>直接计算每一条主对角线上和上下循环后能成为主对角线上的点,出现1的数量最多的为把其他的多余的1都去掉,然后同一对角线为0的变为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;string&gt; g(n);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto &amp;x : g) cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int sum = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto x : g) </span></span></span><br><span class="line"><span class="string"><span class="meta">for (auto y : x) </span></span></span><br><span class="line"><span class="string"><span class="meta">sum += y == &#x27;1&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">auto check = [&amp;] (int x, int y) -&gt; bool &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (x &lt; 0 || (x &gt;= n) || y &lt; 0 || (y &gt;= n)) return false;</span></span></span><br><span class="line"><span class="string"><span class="meta">return true;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta">int ans = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int sx = 0, sy = i;</span></span></span><br><span class="line"><span class="string"><span class="meta">int max_sum = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (check(sx, sy)) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">max_sum += g[sx][sy] == &#x27;1&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">sx ++, sy ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">int tx = n - i, ty = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">while (check(tx, ty)) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">max_sum += g[tx][ty] == &#x27;1&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">tx ++, ty ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = max(ans, max_sum);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; sum - ans + n - ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="Promising-String-hard-version"><a href="https://codeforces.com/contest/1660/problem/F2">Promising String (hard version)</a></h2><p>This is the easy version of Problem F. The only difference between the easy version and the hard version is the constraints.We will call a non-empty string balanced if it contains the same number of plus and minus signs. For example: strings “±-+” and “+±±-” are balanced, and strings “±-”, “–” and “” are not balanced.We will call a string promising if the string can be made balanced by several (possibly zero) uses of the following operation:</p><ul><li>replace two adjacent minus signs with one plus sign.</li></ul><p>In particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced.For example, the string “-±–” is promising, because you can replace two adjacent minuses with plus and get a balanced string “-+±”, or get another balanced string “-±+”.How many non-empty substrings of the given string $s$ are promising? Each non-empty promising substring must be counted in the answer as many times as it occurs in string $s$.Recall that a substring is a sequence of consecutive characters of the string. For example, for string “±+” its substring are: “±”, “-+”, “+”, “±+” (the string is a substring of itself) and some others. But the following strings are not its substring: “–”, “++”, “-++”.</p><p>F1和F2题意一样，区别为F1的n为1≤n≤3000，F2为1≤n≤2e5,给你只含“+”，“-”的字符串，你可以把相邻两个“-”转化为“+” ， 问有多少个子字符串可以通过这种操作使“+”数量等于“-”，例如“±”，“±–”，都是合法的</p><p>因此用前缀和记录符号数量遇<code>-</code>就加1否则减1</p><p>就变成了多少连续子段和大于零</p><p>要完成上述的条件需要满足的条件</p><ol><li><code>-</code>号数量必须大于等于<code>+</code>号数量</li><li><code>-</code>号数量减去 <code>+</code>数量必须是3的整数倍(每两个<code>-</code>都可以变成一个<code>+</code>来平衡,就是花费3个)</li></ol><p>第一种方法直接暴力枚举区间的左端点和右端点O($n^2$)</p><p>第二种(s[r] - s[l - 1]) % 3 == 0 就是 s[r ] = s[l] 在模3的意义下</p><p>且 s[l - 1] $\leq$ s[r]</p><p>所以在同一个模数的情况下求小于 s[r]的数有多少就行,然后就是树状数组,带3个偏序的树状数组,分别代表模为0, 模为1, 模为2的情况下的树状数组, 还得加一个偏移量,因为s[i]有可能是小于零的数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 8e5 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">ll tr[N][3];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void add(int x, int type) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; x &lt;= N; x += x &amp; -x) tr[x][type] ++;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">ll query(int x, int type, int res = 0) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; x; x -= x &amp; -x) res += tr[x][type];</span></span></span><br><span class="line"><span class="string"><span class="meta">return res;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">static char s[N];</span></span></span><br><span class="line"><span class="string"><span class="meta">ll ans = 0, n;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; s + 1;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= (n &lt;&lt; 1) + 1; i ++) </span></span></span><br><span class="line"><span class="string"><span class="meta">for (int j = 0; j &lt; 3; j ++) tr[i][j] = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">static int sum[N];</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 1; i &lt;= n; i ++) </span></span></span><br><span class="line"><span class="string"><span class="meta">sum[i] = sum[i - 1] + ((s[i] == &#x27;-&#x27;) ? 1 : -1);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// for (int i = 1; i &lt;= n; i ++) debug(sum[i]);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt;= n; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans += query(sum[i] + n + 1, (sum[i] % 3 + 3) % 3);</span></span></span><br><span class="line"><span class="string"><span class="meta">add(sum[i] + n + 1, (sum[i] % 3 + 3) % 3);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125; </span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing每日一题2022年5月9日~5月15日</title>
      <link href="/posts/3933.html"/>
      <url>/posts/3933.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-3359-更多奇怪的照片"><a href="https://www.acwing.com/problem/content/3362/">AcWing 3359. 更多奇怪的照片</a></h2><p>Farmer John 正再一次尝试给他的 $N$ 头奶牛拍照。</p><p>每头奶牛有一个范围在$1…100$ 之内的整数的「品种编号」，编号可能重复。</p><p>Farmer John 对他的照片有一个十分古怪的构思：他希望将所有的奶牛分为不相交的若干组（换句话说，将每头奶牛分到恰好一组中）并将这些组排成一行，使得第一组的奶牛的品种编号之和为偶数，第二组的编号之和为奇数，以此类推，奇偶交替。</p><p>Farmer John 可以分成的最大组数是多少？</p><p>思路:</p><p>这题只与奇偶性有关, 所以只需要计算出奇数的数量和偶数的数量即可, 奇数觉得上限,因为偶数不能拼成奇数,但是奇数能拼成偶数,所以奇数比偶数多的时候一定要减少奇数,因为奇数如果比偶数多的话,拼到最后就不能组成一奇一偶的情况,所有用两个奇数拼成一个偶数,如果最后奇偶相同,答案就是2 * 奇数奇偶不同,那么就是奇数*2+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, odd = <span class="number">0</span>, even = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x &amp; <span class="number">1</span>) odd ++;</span><br><span class="line"><span class="keyword">else</span> even ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (odd &gt; even) odd -= <span class="number">2</span>, even ++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (odd == even) cout &lt;&lt; even * <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; odd * <span class="number">2</span> + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第50场周赛</title>
      <link href="/posts/38319.html"/>
      <url>/posts/38319.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4416-缺少的数"><a href="https://www.acwing.com/problem/content/4419/">AcWing 4416. 缺少的数</a></h2><p>给定一个长度为 $n−1$的数列 $a1,a2,…,an−1$。</p><p>数列中的元素两两不同，且都在 $1∼n$ 的范围内。</p><p>请你计算，$1∼n$ 中的哪一个数没有在数列中出现过。</p><p>过于简单0.0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> st[N];</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">st[x] =  <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (st[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4417-选区间"><a href="https://www.acwing.com/problem/content/4420/">AcWing 4417. 选区间</a></h2><p>给定 $n$ 个一类区间 $(l1,i,r1,i)$。</p><p>给定 $m$ 个二类区间 $(l2,i,r2,i)$。</p><p>请你从一类区间中挑选一个区间，从二类区间中挑选一个区间。</p><p>要求，选出的两个区间之间的距离尽可能大。</p><p>请你输出最大可能距离。</p><p>关于两区间 $(l1,r1)$ 和 $(l2,r2)$ 之间的距离，我们规定：</p><ul><li>如果两区间存在交集，则区间距离为 $0$。</li><li>如果两区间不存在交集，则区间距离为 |i−j||i−j| 的最小可能值，其中 $l1≤i≤r1,l2≤j≤r2$。</li></ul><p>思路也是比较简单,就是分别取二种极端的情况即可</p><ol><li>一区间(按照r的值)最往左放,二区间(按照l的值)最往右放</li><li>一区间(按照l的值)最往右放,二区间(按照r的值)最往左放</li></ol><p>然后取一个最大的即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;PII&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">int</span> minr_a = INF, maxl_a = <span class="number">0</span>, minr_b = INF, maxl_b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : a) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">minr_a = <span class="built_in">min</span>(minr_a, y);</span><br><span class="line">maxl_a = <span class="built_in">max</span>(maxl_a, x);</span><br><span class="line">&#125; </span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;PII&gt; <span class="title">b</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : b) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">minr_b = <span class="built_in">min</span>(minr_b, y);</span><br><span class="line">maxl_b = <span class="built_in">max</span>(maxl_b, x);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">max</span>(maxl_b - minr_a, <span class="number">0</span>), <span class="built_in">max</span>(maxl_a - minr_b, <span class="number">0</span>)) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4418-选元素"><a href="https://www.acwing.com/problem/content/4421/">AcWing 4418. 选元素</a></h2><p>给定一个长度为 $n$ 的整数序列 $a1,a2,…,an$。</p><p>请你从中挑选 $x$ 个元素，要求：</p><ol><li>原序列中的<strong>每一个</strong>长度为 $k$ 的<strong>连续子序列</strong>都至少包含一个被选中的元素。</li><li>满足条件 $1$ 的前提下，所选 $x$ 个元素的相加之和应尽可能大。</li></ol><p>输出最大可能和。</p><p>这题我们考虑<code>DP</code></p><p>根据题意我们把,$f_{ij}$ 表示前i项且选第i项长度为j的集合</p><p>先是两维枚举ai和个数;</p><p>上一个状态t可以从$i - k \leq t &lt; i$ 区间内的间转移过来</p><blockquote><p><code>f[i][j] = max(f[i][j],f[t][j-1] + a[i])</code></p><p>性质:<strong>max</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> n, k, x;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k &gt;&gt; x;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">-0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"></span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= x; j ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> t = <span class="built_in">max</span>((ll)<span class="number">0</span>, i - k); t &lt; i; t ++) </span><br><span class="line">f[i][j] = <span class="built_in">max</span>(f[i][j], f[t][j - <span class="number">1</span>] + a[i]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; i ++) ans = <span class="built_in">max</span>(ans, f[i][x]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeforcesRound#787(Div.3)</title>
      <link href="/posts/60990.html"/>
      <url>/posts/60990.html</url>
      
        <content type="html"><![CDATA[<h2 id="Food-for-Animals"><a href="https://codeforces.com/contest/1675/problem/A">Food for Animals</a></h2><p>In the pet store on sale there are:  $a$ packs of dog food;  $b$ packs of cat food;  $c$ packs of universal food (such food is suitable for both dogs and cats). Polycarp has $x$ dogs and $y$ cats. Is it possible that he will be able to buy food for all his animals in the store? Each of his dogs and each of his cats should receive one pack of suitable food for it.</p><p>$x$猫粮$c$狗粮$z$个任意粮，$a$个猫$b$个狗，能不能让每个小动物至少分到一个粮.</p><p>简单模拟即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, x, y;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (a &lt; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (a + c &lt; x) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">c -= (x - a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b &lt; y) &#123;</span><br><span class="line"><span class="keyword">if</span> (b + c &lt; y) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Make-It-Increasing"><a href="https://codeforces.com/contest/1675/problem/B">Make It Increasing</a></h2><p>Given $n$ integers $a_1, a_2, \dots, a_n$. You can perform the following operation on them:  select any element $a_i$ ($1 \le i \le n$) and divide it by $2$ (round down). In other words, you can replace any selected element $a_i$ with the value $\left \lfloor \frac{a_i}{2}\right\rfloor$ (where $\left \lfloor x \right\rfloor$ is – round down the real number $x$). Output the minimum number of operations that must be done for a sequence of integers to become strictly increasing (that is, for the condition $a_1 \lt a_2 \lt \dots \lt a_n$ to be satisfied). Or determine that it is impossible to obtain such a sequence. Note that elements cannot be swapped. The only possible operation is described above.For example, let $n = 3$ and a sequence of numbers $[3, 6, 5]$ be given. Then it is enough to perform two operations on it:   Write the number $\left \lfloor \frac{6}{2}\right\rfloor = 3$ instead of the number $a_2=6$ and get the sequence $[3, 3, 5]$;  Then replace $a_1=3$ with $\left \lfloor \frac{3}{2}\right\rfloor = 1$ and get the sequence $[1, 3, 5]$. The resulting sequence is strictly increasing because $1 \lt 3 \lt 5$.</p><p>给第一个数组，每次可以让数组中的一个数变为 $\left \lfloor \frac{a_i}{2}\right\rfloor$ (向下取整)。求最少几次可以让数组变为严格递增数组.</p><p>从后往前推即可如果大于后面的就一直除$2$, 如果不是最后一项但值是<code>0</code>了就无解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[i] &gt;= a[i + <span class="number">1</span>]) a[i] /= <span class="number">2</span>, ans ++;</span><br><span class="line">&#125; </span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Detective-Task-思维吧"><a href="https://codeforces.com/contest/1675/problem/C">Detective Task(思维吧)</a></h2><p>Polycarp bought a new expensive painting and decided to show it to his $n$ friends. He hung it in his room. $n$ of his friends entered and exited there one by one. At one moment there was no more than one person in the room. In other words, the first friend entered and left first, then the second, and so <a href="http://on.It">on.It</a> is known that at the beginning (before visiting friends) a picture hung in the room. At the end (after the $n$-th friend) it turned out that it disappeared. At what exact moment it disappeared — there is no information.Polycarp asked his friends one by one. He asked each one if there was a picture when he entered the room. Each friend answered one of three:  no (response encoded with 0);  yes (response encoded as 1);  can’t remember (response is encoded with ?). Everyone except the thief either doesn’t remember or told the truth. The thief can say anything (any of the three options).Polycarp cannot understand who the thief is. He asks you to find out the number of those who can be considered a thief according to the answers.</p><p>一个人照片被偷了, 问n个人谁偷了,有三种回答1, 0, ?分别代表看见图片了, 没看图片,忘了</p><p>好人说真的,坏人随意,问嫌疑的人有几个</p><p>分析:</p><ul><li><p>经过举例我们可以发现,嫌疑人会出现在最后一个1出现的位置,和第一个0出现的位置,以及他们中间的人都有嫌疑</p></li><li><p>如果没有0,只有1和?, 那么最后一个1以及最后一个1后面的?都有可能</p></li><li><p>如果没有1, 只有0和?,那么第一个0以及前面所有的?都有可能</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> o_final = <span class="number">-1</span>, z_first = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) o_final = i;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; !ok) z_first = i, ok = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (~o_final &amp;&amp; ~z_first &amp;&amp; z_first &gt; o_final) cout &lt;&lt; z_first - o_final + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (o_final == <span class="number">-1</span> &amp;&amp; z_first == <span class="number">-1</span>) cout &lt;&lt; <span class="built_in">sz</span>(s) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (o_final == <span class="number">-1</span> &amp;&amp; ~z_first) cout &lt;&lt; z_first + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (~o_final &amp;&amp; z_first == <span class="number">-1</span>) cout &lt;&lt; <span class="built_in">sz</span>(s) - o_final &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vertical-Paths"><a href="https://codeforces.com/contest/1675/problem/D">Vertical Paths</a></h2><p>You are given a rooted tree consisting of $n$ vertices. Vertices are numbered from $1$ to $n$. Any vertex can be the root of a tree.A tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root.The tree is specified by an array of parents $p$ containing $n$ numbers: $p_i$ is a parent of the vertex with the index $i$. The parent of a vertex $u$ is a vertex that is the next vertex on the shortest path from $u$ to the root. For example, on the simple path from $5$ to $3$ (the root), the next vertex would be $1$, so the parent of $5$ is $1$.The root has no parent, so for it, the value of $p_i$ is $i$ (the root is the only vertex for which $p_i=i$).Find such a set of paths that:</p><ul><li><p>each vertex belongs to exactly one path, each path can contain one or more vertices;</p></li><li><p>in each path each next vertex — is a son of the current vertex (that is, paths always lead down — from parent to son);</p></li><li><p>number of paths is minimal.</p></li></ul><p>For example, if $n=5$ and $p=[3, 1, 3, 3, 1]$, then the tree can be divided into three paths:</p><ol><li><p>$3 \rightarrow 1 \rightarrow 5$ (path of $3$ vertices),</p></li><li><p>$4$ (path of $1$ vertices).</p></li><li><p>$2$ (path of $1$ vertices).</p></li></ol><p>给定一棵树，我们要把它拆成一条条链，问你最少要拆成多少条链，并且输出每条链的大小和每条链的DFS序</p><p>dfs遍历<s>就是链的遍历</s> ，我们只需要在树遍历到根节点回溯的时候（即这条链被遍历完了），进行添加到另一条链即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; g[N], ans[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">sz</span>(g[u])) <span class="keyword">return</span> ans[cnt ++].<span class="built_in">emplace_back</span>(u), <span class="built_in">void</span>();</span><br><span class="line">ans[cnt].<span class="built_in">emplace_back</span>(u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n, root = <span class="number">-1</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">if</span> (p[i] == i) root = i;</span><br><span class="line"><span class="keyword">else</span> g[p[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(root);</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sz</span>(ans[i]) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : ans[i]) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) g[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++) ans[i].<span class="built_in">clear</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Replace-With-the-Previous-Minimize"><a href="https://codeforces.com/contest/1675/problem/E">Replace With the Previous, Minimize</a></h2><p>You are given a string $s$ of lowercase Latin letters. The following operation can be used:   select one character (from ‘a’ to ‘z’) that occurs at least once in the string. And replace all such characters in the string with the previous one in alphabetical order on the loop. For example, replace all ‘c’ with ‘b’ or replace all ‘a’ with ‘z’. And you are given the integer $k$ — the maximum number of operations that can be performed. Find the minimum lexicographically possible string that can be obtained by performing no more than $k$ operations.The string $a=a_1a_2 \dots a_n$ is lexicographically smaller than the string $b = b_1b_2 \dots b_n$ if there exists an index $k$ ($1 \le k \le n$) such that $a_1=b_1$, $a_2=b_2$, …, $a_{k-1}=b_{k-1}$, but $a_k &lt; b_k$.</p><p>m次操作，每次都能把数组中的所有某一种字母换为其字典序较小的前一个字母。求m此操作后得到的串字典序最小的串</p><p>从前往后遍历贪心，如果碰见变换了k次还是不能到<code>a</code>的,就直接退出即可(贪心,靠前的小才会更小),当前的字母变成了减去k再减去之前能把前面变成<code>a</code>的最大的修改次数大小的字母,后面的小于改变前的和大于改变后的都可以,变成改变后的(较小的)</p><p>如果之前还存在改变了$\leq$ k次已经变成最小的<code>a</code>,则后面所有小于等于当前的都可以变成<code>a</code>,然后 取能把前面都变成最小的最大的次数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k, maxc = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">string s; cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] - k &gt; <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> c = s[i] - (k - maxc), r = s[i];</span><br><span class="line"><span class="comment">// debug(c, s[i]);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((s[j] &gt;= c) &amp;&amp; (s[j] &lt;= r)) s[j] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">maxc = <span class="built_in">max</span>(maxc, s[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &lt;= maxc + <span class="string">&#x27;a&#x27;</span>) cout &lt;&lt; <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; s[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vlad-and-Unfinished-Business"><a href="https://codeforces.com/contest/1675/problem/F">Vlad and Unfinished Business</a></h2><p>Vlad and Nastya live in a city consisting of $n$ houses and $n-1$ road. From each house, you can get to the other by moving only along the roads. That is, the city is a tree.Vlad lives in a house with index $x$, and Nastya lives in a house with index $y$. Vlad decided to visit Nastya. However, he remembered that he had postponed for later $k$ things that he has to do before coming to Nastya. To do the $i$-th thing, he needs to come to the $a_i$-th house, things can be done in any order. In $1$ minute, he can walk from one house to another if they are connected by a road.Vlad does not really like walking, so he is interested what is the minimum number of minutes he has to spend on the road to do all things and then come to Nastya. Houses $a_1, a_2, \dots, a_k$ he can visit in any order. He can visit any house multiple times (if he wants).</p><p>在一棵树上，起点为x最终到y，但是必须先经过一个点集，每走一步一个花费，问最小的花费是多少</p><p><img src="https://s2.loli.net/2022/05/09/U72i5ofHSbuZWdO.png" alt=""></p><ol><li><p>先以x为根节点遍历整个数,记录每个节点的父节点</p></li><li><p>在找到y到x的最短距离,并且标记走过的点,</p></li><li><p>然后把所有的必须要走的点往上走,如果碰到标记过的点就返回走的值,(可以理解为公共的路我只走一次), 返回走过的值*2因为要走一个来回</p></li></ol><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line"><span class="type">int</span> p[N]; <span class="comment">// 记录父节点</span></span><br><span class="line"><span class="type">int</span> n, k, x, y;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">p[u] = fa;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) </span><br><span class="line"><span class="keyword">if</span> (v != fa) <span class="built_in">dfs_1</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_2</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (st[u] || u == x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">st[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="built_in">dfs_2</span>(p[u]) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line">g.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;t : a) cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">g[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">g[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_1</span>(x, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="built_in">dfs_2</span>(y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> t : a) ans += <span class="built_in">dfs_2</span>(t) * <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) g[i].<span class="built_in">clear</span>(), p[i] = <span class="number">0</span>, st[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeforcesRound#786(Div.3)</title>
      <link href="/posts/8959.html"/>
      <url>/posts/8959.html</url>
      
        <content type="html"><![CDATA[<h2 id="Number-Transformation"><a href="https://codeforces.com/contest/1674/problem/A">Number Transformation</a></h2><p>You are given two integers $x$ and $y$. You want to choose two strictly positive (greater than zero) integers $a$ and $b$, and then apply the following operation to $x$ exactly $a$ times: replace $x$ with $b \cdot x$.You want to find two positive integers $a$ and $b$ such that $x$ becomes equal to $y$ after this process. If there are multiple possible pairs, you can choose any of them. If there is no such pair, report it.For example:   if $x = 3$ and $y = 75$, you may choose $a = 2$ and $b = 5$, so that $x$ becomes equal to $3 \cdot 5 \cdot 5 = 75$;  if $x = 100$ and $y = 100$, you may choose $a = 3$ and $b = 1$, so that $x$ becomes equal to $100 \cdot 1 \cdot 1 \cdot 1 = 100$;  if $x = 42$ and $y = 13$, there is no answer since you cannot decrease $x$ with the given operations.</p><p><strong>input</strong></p><p>The first line contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases.Each test case consists of one line containing two integers $x$ and $y$ ($1 \le x, y \le 100$).</p><p><strong>output</strong></p><p>If it is possible to choose a pair of positive integers $a$ and $b$ so that $x$ becomes $y$ after the aforementioned process, print these two integers. The integers you print should be not less than $1$ and not greater than $10^9$ (it can be shown that if the answer exists, there is a pair of integers $a$ and $b$ meeting these constraints). If there are multiple such pairs, print any of them.If it is impossible to choose a pair of integers $a$ and $b$ so that $x$ becomes $y$, print the integer $0$ twice.</p><p><strong>样例输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 75</span><br><span class="line">100 100</span><br><span class="line">42 13</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 5</span><br><span class="line">3 1</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>每日一氵</p><p>如果<code>y</code>能除得尽<code>x</code>我们直接令$a = 1, b = y % x$ 即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (y % x == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y / x &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dictionary"><a href="https://codeforces.com/contest/1674/problem/B">Dictionary</a></h2><p>The Berland language consists of words having exactly two letters. Moreover, the first letter of a word is different from the second letter. Any combination of two different Berland letters (which, by the way, are the same as the lowercase letters of Latin alphabet) is a correct word in Berland language.The Berland dictionary contains all words of this language. The words are listed in a way they are usually ordered in dictionaries. Formally, word $a$ comes earlier than word $b$ in the dictionary if one of the following conditions hold:</p><ul><li><p>the first letter of $a$ is less than the first letter of $b$;</p></li><li><p>the first letters of $a$ and $b$ are the same, and the second letter of $a$ is less than the second letter of $b$.</p><p>So, the dictionary looks like that:</p></li><li><p>Word $1$: ab</p></li><li><p>Word $2$: ac</p></li><li><p>…</p></li><li><p>Word $25$: az</p></li><li><p>Word $26$: ba</p></li><li><p>Word $27$: bc</p></li><li><p>…</p></li><li><p>Word $649$: zx</p></li><li><p>Word $650$: zy</p><p>You are given a word $s$ from the Berland language. Your task is to find its index in the dictionary.</p><p><strong>input</strong></p><p>The first line contains one integer $t$ ($1 \le t \le 650$) — the number of test cases.Each test case consists of one line containing $s$ — a string consisting of exactly two different lowercase Latin letters (i. e. a correct word of the Berland language).</p><p><strong>output</strong></p><p>For each test case, print one integer — the index of the word $s$ in the dictionary.</p><p><strong>Samples</strong></p><p><strong>输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">ab</span><br><span class="line">ac</span><br><span class="line">az</span><br><span class="line">ba</span><br><span class="line">bc</span><br><span class="line">zx</span><br><span class="line">zy</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">649</span><br><span class="line">650</span><br></pre></td></tr></table></figure><p>打表出每一种情况即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mp[<span class="number">256</span>][<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line">cout &lt;&lt; mp[op[<span class="number">0</span>]][op[<span class="number">1</span>]] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> i = <span class="string">&#x27;a&#x27;</span>; i &lt;= <span class="string">&#x27;z&#x27;</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> j = <span class="string">&#x27;a&#x27;</span>; j &lt;= <span class="string">&#x27;z&#x27;</span>; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">mp[i][j] = cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ___;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">while</span> (___ --) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Infinite-Replacement"><a href="https://codeforces.com/contest/1674/problem/C">Infinite Replacement</a></h2><p>You are given a string $s$, consisting only of Latin letters ‘a’, and a string $t$, consisting of lowercase Latin <a href="http://letters.In">letters.In</a> one move, you can replace any letter ‘a’ in the string $s$ with a string $t$. Note that after the replacement string $s$ might contain letters other than ‘a’.You can perform an arbitrary number of moves (including zero). How many different strings can you obtain? Print the number, or report that it is infinitely large.Two strings are considered different if they have different length, or they differ at some index.</p><p><strong>input</strong></p><p>The first line contains a single integer $q$ ($1 \le q \le 10^4$) — the number of testcases.The first line of each testcase contains a non-empty string $s$, consisting only of Latin letters ‘a’. The length of $s$ doesn’t exceed $50$.The second line contains a non-empty string $t$, consisting of lowercase Latin letters. The length of $t$ doesn’t exceed $50$.</p><p><strong>output</strong></p><p>For each testcase, print the number of different strings $s$ that can be obtained after an arbitrary amount of moves (including zero). If the number is infinitely large, print -1. Otherwise, print the number.</p><p><strong>Samples</strong></p><p>in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">aaaa</span><br><span class="line">a</span><br><span class="line">aa</span><br><span class="line">abc</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>out</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">-1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><blockquote><p>当换的中还存在a时肯定是无解的,因为能一直替换a,就有无限多个答案,除了只有一个的的情况</p><p>所以存在多少个a就有($2^{a的个数}$)</p></blockquote><h2 id="A-B-C-Sort"><a href="https://codeforces.com/contest/1674/problem/D">A-B-C Sort</a></h2><p>You are given three arrays $a$, $b$ and $c$. Initially, array $a$ consists of $n$ elements, arrays $b$ and $c$ are empty.You are performing the following algorithm that consists of two steps:</p><ul><li>Step $1$: while $a$ is not empty, you take the last element from $a$ and move it in the middle of array $b$. If $b$ currently has odd length, you can choose: place the element from $a$ to the left or to the right of the middle element of $b$. As a result, $a$ becomes empty and $b$ consists of $n$ elements.</li><li>Step $2$: while $b$ is not empty, you take the middle element from $b$ and move it to the end of array $c$. If $b$ currently has even length, you can choose which of two middle elements to take. As a result, $b$ becomes empty and $c$ now consists of $n$ elements.</li></ul><p>Refer to the Note section for examples.Can you make array $c$ sorted in non-decreasing order?</p><p><strong>input</strong></p><p>The first line contains a single integer $t$ ($1 \le t \le 2 \cdot 10^4$) — the number of test cases. Next $t$ cases follow.The first line of each test case contains the single integer $n$ ($1 \le n \le 2 \cdot 10^5$) — the length of array $a$.The second line of each test case contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^6$) — the array $a$ <a href="http://itself.It">itself.It</a>’s guaranteed that the sum of $n$ doesn’t exceed $2 \cdot 10^5$.</p><p><strong>output</strong></p><p>For each test, print YES (case-insensitive), if you can make array $c$ sorted in non-decreasing order. Otherwise, print NO (case-insensitive).</p><p><strong>Samples</strong></p><p>in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">3 1 5 3</span><br><span class="line">3</span><br><span class="line">3 2 1</span><br><span class="line">1</span><br><span class="line">7331</span><br></pre></td></tr></table></figure><p>out</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><p>这…完全是凭感觉贪心啊,不知道咋写解释0.0, 谁能想到一下子就对了…</p><p>看见都是两个两个之间的关系,偶数不能确定,奇数能确定,(看长度为4时)推出后面小的一定要比前面大的大,不然往后更不成立</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)  cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || (n == <span class="number">2</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">3</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">min</span>(a[i], a[i - <span class="number">1</span>]) &lt; <span class="built_in">max</span>(a[i - <span class="number">2</span>], a[i - <span class="number">3</span>])) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Desktop-Rearrangement"><a href="https://codeforces.com/contest/1674/problem/F">Desktop Rearrangement</a></h2><p>Your friend Ivan asked you to help him rearrange his desktop. The desktop can be represented as a rectangle matrix of size $n \times m$ consisting of characters ‘.’ (empty cell of the desktop) and ‘*’ (an icon).The desktop is called good if all its icons are occupying some prefix of full columns and, possibly, the prefix of the next column (and there are no icons outside this figure). In other words, some amount of first columns will be filled with icons and, possibly, some amount of first cells of the next (after the last full column) column will be also filled with icons (and all the icons on the desktop belong to this figure). This is pretty much the same as the real life icons <a href="http://arrangement.In">arrangement.In</a> one move, you can take one icon and move it to any empty cell in the desktop.Ivan loves to add some icons to his desktop and remove them from it, so he is asking you to answer $q$ queries: what is the minimum number of moves required to make the desktop good after adding/removing one icon?Note that queries are permanent and change the state of the desktop.</p><p><strong>input</strong></p><p>The first line of the input contains three integers $n$, $m$ and $q$ ($1 \le n, m \le 1000; 1 \le q \le 2 \cdot 10^5$) — the number of rows in the desktop, the number of columns in the desktop and the number of queries, respectively.The next $n$ lines contain the description of the desktop. The $i$-th of them contains $m$ characters ‘.’ and ‘*’ — the description of the $i$-th row of the desktop.The next $q$ lines describe queries. The $i$-th of them contains two integers $x_i$ and $y_i$ ($1 \le x_i \le n; 1 \le y_i \le m$) — the position of the cell which changes its state (if this cell contained the icon before, then this icon is removed, otherwise an icon appears in this cell).</p><p><strong>output</strong></p><p>Print $q$ integers. The $i$-th of them should be the minimum number of moves required to make the desktop good after applying the first $i$ queries.</p><p><strong>Samples</strong></p><p>in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 4 8</span><br><span class="line">..**</span><br><span class="line">.*..</span><br><span class="line">*...</span><br><span class="line">...*</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">3 1</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 3</span><br><span class="line">2 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><p>out</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>题意就是把杂乱的桌面换成,按照想从左往右放,在从上往下放</p><p>这一题模拟即可的,我是把矩阵转化成,一维的数组即可如下</p><p><img src="https://s2.loli.net/2022/05/07/hH43qlnEk6mv5t8.png" alt=""></p><p>每次我们可以计算整个图中有多少点图标要放,然后通过个数计算出对应的结尾坐标,看结尾坐标前有多少已经是图标了,<code>总的图标</code>减去<code>已经在区域内的图标</code>就是<code>需要移动的图标</code>,我是想到用前缀和维护以x为结尾下标前面图标的数量,值为<code>*</code>的我们让他的值为1,'.'的值为0,然后计算前缀和,又因为它还有修改,所以我们就想到了用**<mark class="hl-label red">树状数组</mark> ** 来维护单点修改的前缀和</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N], idx;</span><br><span class="line"><span class="type">char</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(x; x &lt;= N; x += x &amp; -x) tr[x] += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> res = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(x; x; x -= x &amp; -x) res += tr[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> g[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">cin &gt;&gt; g[i][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">a[++ idx] = g[i][j];</span><br><span class="line"><span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">add</span>(idx, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q --) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> t = (y - <span class="number">1</span>) * n + x;</span><br><span class="line"><span class="keyword">if</span> (a[t] == <span class="string">&#x27;*&#x27;</span>) <span class="built_in">add</span>(t, <span class="number">-1</span>), a[t] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(t, <span class="number">1</span>), a[t] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(idx) - <span class="built_in">query</span>(<span class="built_in">query</span>(idx)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言基础</title>
      <link href="/posts/25470.html"/>
      <url>/posts/25470.html</url>
      
        <content type="html"><![CDATA[<h2 id="swig￼16"><mark class="hl-label red">定义变量方式</mark> </h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定变量类型</span></span><br><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不指定变量类型, go语言自动推导类型</span></span><br><span class="line"><span class="keyword">var</span> level = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;666&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量申请变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">a <span class="type">int</span></span><br><span class="line">b <span class="type">float32</span></span><br><span class="line">c <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简短格式 :</span></span><br><span class="line"><span class="comment">// 必须初始化</span></span><br><span class="line"><span class="comment">// 定义在函数内部</span></span><br><span class="line"><span class="comment">// 不提供数据类型</span></span><br><span class="line">i := <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">var</span> level <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能重复定义, 下面是错误行为 XXX (特例下面会讲)</span></span><br><span class="line"><span class="keyword">var</span> level <span class="type">int</span> = <span class="number">1</span></span><br><span class="line">level := <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特例:(在多个短变量声明和赋值钟,至少有一个新声明的变量出现在左值中,其他的变量名即使是重复的也不会报错)</span></span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class="line">conn1, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量交换</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用多赋值时, 如果不需要在左值中接收变量,可以使用匿名变量(_)一个下划线符号,接收但不要它</span></span><br><span class="line"><span class="comment">// 匿名变量不可以直接开头(_ := 1) XXX</span></span><br><span class="line">conn, _ := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用域 </span></span><br><span class="line"><span class="comment">// 函数体外声明的变量就是全局变量,(一个源文件内定义就可以在所有的源文件内使用, 需import引入全局变量所在文件)</span></span><br><span class="line"><span class="comment">// 函数体内声明的就是局部变量</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> v <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明局部变量</span></span><br><span class="line"><span class="keyword">var</span> a, b <span class="type">int</span></span><br><span class="line"><span class="comment">// 初始化参数</span></span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d: %d\n&quot;</span>, a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swig￼17"><mark class="hl-label red">变量类型</mark> </h2><ul><li>有符号整型: <code>int</code>, <code>int8</code>,<code>int32</code>,<code>int64</code>.</li><li>无符号整型: <code>uint</code>,<code>uint8</code>,<code>uint64</code>,<code>uint32</code>,<code>uintptr</code></li><li><code>float32</code>:范围约为$1.4e-45$到$3.4e+38$</li><li><code>float64</code>:范围约为$4.9e-324$到$1.8e+308$(优先使用)</li><li><code>bool</code>(<code>==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>,<code>&amp;&amp;(AND)</code>, <code>||(OR)</code>)都会产生bool值(&amp;&amp;的优先级大于||)</li><li>字符类型:一种是无符号的<code>uint8</code>型,或者叫<code>byte</code>型,代表ASCII码的一个字符</li><li>字符类型:<code>rune</code>,代表一个<code>UTF-8</code>字符,处理中文及其他复合字符时使用时<code>rune</code>型,等价于<code>int32</code>型</li><li><mark class="hl-label red">注意:</mark> :`byte`类型是`uint8`的别名, `rune`类型是`int32`的别名</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单引号表示字符</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="type">byte</span> = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="comment">// 十进制的65</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="type">byte</span> = <span class="number">65</span></span><br><span class="line"><span class="comment">// 十六进制的65</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="type">byte</span> = <span class="string">&#x27;\x41&#x27;</span></span><br><span class="line"><span class="comment">// 八进制的65</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="type">byte</span> = <span class="string">&#x27;\101&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Unicode(UTF-8)是ASCII的超集,包括文字母, GO支持,<code>用rune表示</code>,在内存中用int</li><li>在书写Unicode时,需要在16进制数之前加上<code>\u</code>或<code>\U</code>, 四字节使用<code>\u</code>前缀,八字节使用<code>\U</code>前缀</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="type">rune</span> = <span class="string">&#x27;\u0041&#x27;</span> <span class="comment">// 也表示A字符</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="type">rune</span> = <span class="string">&#x27;\U00000041&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>判断是否是字母: unicode.Isletter(ch)</li><li>判断是否为数字:unicode.IsDigit(ch)</li><li>判断是否为空白字符:unicode.IsSpace(ch)</li></ul><p><strong>字符串</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello,你好世界&quot;</span></span><br><span class="line"><span class="keyword">var</span> str1 [<span class="number">5</span>]<span class="type">byte</span> = [<span class="number">5</span>]<span class="type">byte</span>&#123;<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><code>\n</code>换行,<code>\r</code>回车, <code>\t</code> tab键, <code>\u</code>或<code>\U</code>:Unicode字符</li><li>占用几个字节计算(一个字母占用1个字节,一个中文占用3个字节) (len(str)返回是18)</li></ul><p><strong><mark class="hl-label red">计算字符长度</mark> </strong></p><ul><li>ASCII字符使用<code>len()</code>函数</li><li>Unicode字符长度使用utf8.RuneCountInString()</li></ul><p><strong>字符串拼接</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s := s1 + s2</span><br><span class="line">s += s3 <span class="comment">// 效率较低</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一种</span></span><br><span class="line">s1 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">s2 := <span class="string">&quot;世界&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stringBuider bytes.Buffer</span><br><span class="line">stringBuider.WriteString(s1)</span><br><span class="line">stringBuider.WriteString(s2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, stringBuider.String())</span><br></pre></td></tr></table></figure><p>获取Unicode字符串的字方法</p><p>强制把string型转化成rune数组型,然后获取下标,在强制转化成串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s2 := <span class="string">&quot;lo,你好&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, <span class="type">string</span>([]<span class="type">rune</span>(s2)[<span class="number">4</span>]))</span><br><span class="line"><span class="comment">// 输出 :好</span></span><br></pre></td></tr></table></figure><p>go语言中字符串是不可变的我们可以强制转化成byte数组进行修改</p><p>把<code>好</code>换成<code>我</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;65463你好&quot;</span></span><br><span class="line">b := []<span class="type">rune</span>(str)</span><br><span class="line">b[utf8.RuneCountInString(str)<span class="number">-1</span>] = <span class="string">&#x27;我&#x27;</span></span><br><span class="line">str = <span class="type">string</span>(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把<code>5</code>换成<code>6</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;12345&quot;</span></span><br><span class="line">a := []<span class="type">byte</span>(s)</span><br><span class="line">a[<span class="built_in">len</span>(a)<span class="number">-1</span>] = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">st := <span class="type">string</span>(a)</span><br><span class="line">fmt.Println(st)</span><br></pre></td></tr></table></figure><p>将<code>hello world,我要学java语言</code>改成<code>hello world,我要学go语言</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;hello world,我要学java语言&quot;</span></span><br><span class="line">t := <span class="string">&quot;java&quot;</span></span><br><span class="line">two := <span class="string">&quot;go&quot;</span></span><br><span class="line"></span><br><span class="line">idx := strings.Index(str, t)</span><br><span class="line">one := str[:idx]</span><br><span class="line">three := str[idx+<span class="built_in">len</span>(t):]</span><br><span class="line"><span class="keyword">var</span> x bytes.Buffer</span><br><span class="line">x.WriteString(one)</span><br><span class="line">x.WriteString(two)</span><br><span class="line">x.WriteString(three)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s&quot;</span>, x.String())</span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">指针</mark> </strong></p><p>用法跟c一样给点代码理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">modify(&amp;a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(x *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">*x = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出200</span></span><br></pre></td></tr></table></figure><p>新的指针定义方式new()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptr := <span class="built_in">new</span>(<span class="type">string</span>) <span class="comment">// var ptr *string = new(string)</span></span><br><span class="line">*ptr = <span class="string">&quot;hello你好&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, *ptr)</span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">类型别名</mark> </strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewInt <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> New = <span class="type">int</span> </span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">字符串转数字</mark> </strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;666&quot;</span></span><br><span class="line">intValue, _ := strconv.Atoi(str)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, intValue)</span><br><span class="line"></span><br><span class="line">str := <span class="string">&quot;3.141592653589&quot;</span></span><br><span class="line">floatValue, _ := strconv.ParseFloat(str, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, floatValue)</span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">数字转字符串</mark> </strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">intValue := <span class="number">1</span></span><br><span class="line">strValue := strconv.Itoa(intValue)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, strValue)</span><br><span class="line"></span><br><span class="line">fValue := <span class="number">3.141592653589</span></span><br><span class="line">strValue := strconv.FormatFloat(fValue, <span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, strValue)</span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">标准输入</mark> </strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong><mark class="hl-label red">数组</mark> </strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// 一位数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, val := <span class="keyword">range</span> arr &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;索引 : %d, 值: %d\n&quot;</span>, idx, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, val := <span class="keyword">range</span> arr &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;索引 : %d, 值: %d\n&quot;</span>, idx, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简短初始化</span></span><br><span class="line">a := [...]<span class="type">int</span>&#123;<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化第三个是3</span></span><br><span class="line">a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">2</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line">str4 := [<span class="number">3</span>][<span class="number">2</span>]<span class="type">rune</span>&#123;&#123;<span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;真&#x27;</span>&#125;, &#123;<span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;好&#x27;</span>&#125;, &#123;<span class="string">&#x27;强&#x27;</span>, <span class="string">&#x27;啊&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> str4 &#123;</span><br><span class="line"><span class="keyword">for</span> _, val2 := <span class="keyword">range</span> val &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c &quot;</span>, val2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str2 [<span class="number">2</span>][<span class="number">2</span>]<span class="type">int</span> = [<span class="number">2</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line"><span class="comment">//str := [4][2]int&#123;&#123;1, 2&#125;, &#123;3, 4&#125;, &#123;5, 6&#125;, &#123;7, 8&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> str2 &#123;</span><br><span class="line"><span class="keyword">for</span> _, val2 := <span class="keyword">range</span> val &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, val2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kuangbin线段树专题</title>
      <link href="/posts/1020.html"/>
      <url>/posts/1020.html</url>
      
        <content type="html"><![CDATA[<h2 id="模板">模板</h2><p>先交出个人常用的线段树模板(<strong>单点修改</strong>与<strong>区间修改</strong>两种)</p><blockquote><p>pushup 子节点更新父节点</p><p>pushdown父节点更新子节点</p></blockquote><h4 id="单点修改">单点修改</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x) </span><br><span class="line"><span class="keyword">return</span> tr[u].val = tr[u].val + v, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res; </span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Segment_Tree st;</span><br></pre></td></tr></table></figure><h4 id="区间修改懒标记-优先级高">区间修改懒标记(优先级高)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, add = <span class="number">0</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].r - tr[u].l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(Node u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.r - u.l + <span class="number">1</span>;    <span class="comment">// sum = len * change(值)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (!u.add) <span class="keyword">return</span>;</span><br><span class="line">l.add += u.add, r.add += u.add;</span><br><span class="line">l.val += (<span class="type">long</span> <span class="type">long</span>) <span class="built_in">len</span>(l) * u.add;</span><br><span class="line">r.val += (<span class="type">long</span> <span class="type">long</span>) <span class="built_in">len</span>(r) * u.add;</span><br><span class="line">u.add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// do sth</span></span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">tr[u].add += c;</span><br><span class="line">tr[u].val += <span class="built_in">len</span>(u) * c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br></pre></td></tr></table></figure><h2 id="AcWing敌兵布阵-单点修改区间查询和"><a href="https://www.acwing.com/problem/content/4342/">AcWing敌兵布阵(单点修改区间查询和)</a></h2><p>敌人有 $N$ 个工兵营地，编号 $1∼N$。</p><p>初始时，第 $i$ 个营地有 $a_i$ 个人。</p><p>接下来有若干个命令，命令有 44 种形式：</p><ul><li><code>Add i j</code>，$i$ 和 $j$ 为正整数，表示第 $i$ 个营地增加 $j$ 个人。（$j$不超过 $30$）</li><li><code>Sub i j</code>，$i$ 和 $j$ 为正整数，表示第 $i$ 个营地减少 $j$ 个人。（$j$不超过 $30$）</li><li><code>Query i j</code>，$i$ 和 $j$ 为正整数（$i≤j$），表示询问第$i$ 到第 $j$ 个营地的总人数。</li><li><code>End</code>，表示结束，此命令只会作为<strong>最后一条</strong>命令出现。</li></ul><p>请你计算每个 <code>Query</code> 的答案。</p><p>板子不多说</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">u.val = l.val + r.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x) </span><br><span class="line"><span class="keyword">return</span> tr[u].val = tr[u].val + v, <span class="built_in">void</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res; </span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; t &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; tree.a[i];</span><br><span class="line">tree.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s, s != <span class="string">&quot;End&quot;</span>) &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="string">&quot;Add&quot;</span>) &#123;</span><br><span class="line">tree.<span class="built_in">modify</span>(<span class="number">1</span>, i, j);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;Sub&quot;</span>) &#123;</span><br><span class="line">tree.<span class="built_in">modify</span>(<span class="number">1</span>, i, -j);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; tree.<span class="built_in">query</span>(<span class="number">1</span>, i, j).val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> T, cnt = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T --) <span class="built_in">solve</span>(cnt), cnt ++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4340-我讨厌它-单点修改区间查询max"><a href="https://www.acwing.com/problem/content/4343/">AcWing 4340. 我讨厌它(单点修改区间查询max)</a></h2><p>很多学校流行一种比较的习惯。</p><p>老师们很喜欢询问，从某某到某某当中，分数最高的是多少。</p><p>这让很多学生很反感。</p><p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。</p><p>当然，老师有时候需要更新某位同学的成绩。</p><p><strong>输入格式</strong></p><p>本题目包含多组测试，请处理到文件结束。</p><p>在每个测试的第一行，有两个正整数 $N$ 和 $M$，分别代表学生的数目和操作的数目。</p><p>学生 ID 编号分别从 $1$ 编到 $N$。</p><p>第二行包含 $N$ 个整数，代表这 $N$ 个学生的初始成绩，其中第 $i$ 个数代表 ID 为 $i$ 的学生的成绩。</p><p>接下来有 $M$ 行。每一行有一个字符 $C$（只取 <code>Q</code> 或 <code>U</code>），和两个正整数 $A,B$。</p><p>当 $C$ 为 <code>Q</code> 的时候，表示这是一条询问操作，它询问 ID 从 $A$ 到 $B$（包括 $A,B$）的学生当中，成绩最高的是多少。</p><p>当 $C$ 为 <code>U</code> 的时候，表示这是一条更新操作，要求把 ID 为 $A$ 的学生的成绩更改为 $B$。</p><p><strong>输出格式</strong><br>对于每一次询问操作，在一行里面输出最高成绩。</p><p>pushup的时候按照最大值即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">u.val = <span class="built_in">max</span>(l.val, r.val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x) <span class="keyword">return</span> tr[u].val = v, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; st;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;Q&#x27;</span>) cout &lt;&lt; st.<span class="built_in">query</span>(<span class="number">1</span>, x, y).val &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> st.<span class="built_in">modify</span>(<span class="number">1</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-243-一个简单的整数问题2-区间修改-区间查询和"><a href="https://www.acwing.com/problem/content/244/">AcWing 243. 一个简单的整数问题2(区间修改+,区间查询和)</a></h2><p>给定一个长度为 <em>N</em> 的数列 <em>A</em>，以及 <em>M</em> 条指令，每条指令可能是以下两种之一：</p><ol><li><code>C l r d</code>，表示把 <em>A</em>[<em>l</em>],<em>A</em>[<em>l</em>+1],…,<em>A</em>[<em>r</em>] 都加上 <em>d</em>。</li><li><code>Q l r</code>，表示询问数列中第 <em>l</em>∼<em>r</em> 个数的和。</li></ol><p>对于每个询问，输出一个整数表示答案。</p><p>区间修改的板子</p><p>pushdown操作的解释:</p><p>将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</p><p>分为：产生影响+懒标记下放</p><p>产生的影响是儿子区间内所有的数的总和增加了$区间的长度×增加值$</p><p>根的懒标记清空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val, add = <span class="number">0</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line">u.val = l.val + r.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (!u.add) <span class="keyword">return</span>;</span><br><span class="line">l.add += u.add, r.add += u.add;</span><br><span class="line">l.val += (<span class="type">long</span> <span class="type">long</span>) (l.r - l.l + <span class="number">1</span>) * u.add;</span><br><span class="line">r.val += (<span class="type">long</span> <span class="type">long</span>) (r.r - r.l + <span class="number">1</span>) * u.add;</span><br><span class="line">u.add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">tr[u].add += c;</span><br><span class="line">tr[u].val += (tr[u].r - tr[u].l + <span class="number">1</span>) * c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span><br><span class="line"></span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">query</span>(<span class="number">1</span>, l, r).val &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4341-市长海报-离散化-区间修改成某个数字查询数字种类个数"><a href="https://www.acwing.com/problem/content/4344/">AcWing 4341. 市长海报(离散化+区间修改成某个数字查询数字种类个数)</a></h2><p>在一个市长选举宣传墙上，有 $n$ 张海报正等待着秘书依次张贴。</p><p>所有海报都与墙面等高。</p><p>整个墙面被等分为若干段，从左到右依次编号为 $1,2,3…$。</p><p>每张海报都恰好完全覆盖连续若干段墙面，其中第 ii 张海报覆盖第$l_i∼r_i$段墙面。</p><p>当所有海报都张贴完毕以后，其中一些海报可能会被后面的海报覆盖掉。</p><p>请你计算，最终一共有多少张海报（完全或部分）可见。</p><p><strong>输入格式</strong></p><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。</p><p>每组数据第一行包含整数 $n$。</p><p>接下来  $n$ 行，每行包含两个整数 $l_i,r_i$，表示一张海报的覆盖区域。</p><p><strong>输出格式</strong></p><p>每组数据输出一行结果，一个整数，表示最终可见的海报数量。</p><p>思路:</p><blockquote><p>每次把修改的区间标记成当前的编号,看最后区间内还剩下多少个编号种类可以看见,数据范围太大,而且数据量不大,离散化即可.</p><p>这里还有一个特殊的情况就是处理一号$23$区间,二号45区间和三号$25$区间,按照正常的区间修改,最后是能看见第一个和第二个区间,然而事实上第三个区间也能看到,所以我们可以把$r + 1$也进行离散化及分别对$l,r,r+1$进行离散化,利用$r+1$判断是否是这种情况</p><p>这里的pushdown操作解释:</p><p>产生影响+懒标记下放</p><p>产生的影响</p><blockquote><p>把儿子节点的编号全部染成父节点的编号,然后在给儿子标记再往下递归</p></blockquote><p>根的懒标记清空</p></blockquote><p><img src="https://s2.loli.net/2022/05/04/FzJASETCXUPWgIK.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"><span class="type">bool</span> ok[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, add = <span class="number">0</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (!u.add) <span class="keyword">return</span>;</span><br><span class="line">l.add = u.add;</span><br><span class="line">r.add = u.add;</span><br><span class="line">l.val = u.add;</span><br><span class="line">r.val = u.add;</span><br><span class="line">u.add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = <span class="number">0</span>, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">tr[u].add = c;</span><br><span class="line">tr[u].val = c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) &#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>(), x) - alls.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T --) &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;PII&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">alls.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">memset</span>(st.tr, <span class="number">0</span>, <span class="keyword">sizeof</span> st.tr);</span><br><span class="line"><span class="built_in">memset</span>(ok, <span class="literal">false</span>, <span class="keyword">sizeof</span> ok);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : a) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(y);</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(y + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (auto x : alls) cout &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, alls.<span class="built_in">size</span>() + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> L = <span class="built_in">get_id</span>(a[i].first), R = <span class="built_in">get_id</span>(a[i].second);</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, L, R, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= alls.<span class="built_in">size</span>(); i ++)  &#123;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">query</span>(<span class="number">1</span>, i, i)) S.<span class="built_in">insert</span>(st.<span class="built_in">query</span>(<span class="number">1</span>, i, i));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; S.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4342-就一勾子-区间修改数字-区间查询和"><a href="https://www.acwing.com/problem/content/4345/">AcWing 4342. 就一勾子(区间修改数字,区间查询和)</a></h2><p>在 DotA 这个游戏中，帕吉（屠夫、胖子）的钩子让很多英雄闻风丧胆。</p><p><img src="https://cdn.acwing.com/media/article/image/2022/03/01/19_1cc0a8c299-1.jpg" alt="1.jpg"></p><p>帕吉的钩子是由 nn 个连续的等长金属棒拼接而成。</p><p>这些金属棒不妨编号为 $1∼n$。</p><p>最开始时，所有金属棒都是铜棒。</p><p>现在，帕吉要对他的钩子进行 $Q$ 次更改操作，操作分为以下三种：</p><ul><li><code>l r 1</code>，表示将第 $l∼r$ 个金属棒换成铜棒。</li><li><code>l r 2</code>，表示将第 $l∼r$ 个金属棒换成银棒。</li><li><code>l r 3</code>，表示将第 $l∼r$ 个金属棒换成金棒。</li></ul><p>每根铜棒的价值为 $1$，每根银棒的价值为 $2$，每根金棒的价值为 $3$。</p><p>钩子的总价值等于 $n$ 个金属棒的价值之和。</p><p>请你计算所有操作完成以后，钩子的总价值。</p><p>pushdown操作解释</p><blockquote><p>分为：产生影响+懒标记下放</p><p>产生的影响是 维护的区间和就是$区间的长度×修改的价值$</p><p>根的懒标记清空</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, add = <span class="number">0</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="keyword">return</span> tr[u].r - tr[u].l + <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(Node u)</span> </span>&#123; <span class="keyword">return</span> u.r - u.l + <span class="number">1</span>; &#125; <span class="comment">// sum = len * change(值)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">u.val = l.val + r.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (!u.add) <span class="keyword">return</span>;</span><br><span class="line">l.add = u.add, r.add = u.add;</span><br><span class="line">l.val = <span class="built_in">len</span>(l) * u.add, r.val = <span class="built_in">len</span>(r) * u.add;</span><br><span class="line">u.add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = <span class="number">1</span>, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">tr[u].add = c;</span><br><span class="line">tr[u].val = <span class="built_in">len</span>(u) * c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">memset</span>(st.tr, <span class="number">0</span>, <span class="keyword">sizeof</span> st.tr);</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">int</span> l, r, c;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, l, r, c);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;: The total value of the hook is &quot;</span></span><br><span class="line"> &lt;&lt; st.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n).val &lt;&lt; <span class="string">&#x27;.&#x27;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= T; i ++) <span class="built_in">solve</span>(i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4343-数颜色-区间修改"><a href="https://www.acwing.com/problem/content/4346/">AcWing 4343. 数颜色(区间修改)</a></h2><p>我们要在一个数轴上绘制 $n$ 个彩色线段。</p><p>先绘制的线段可能会被后绘制的线段覆盖。</p><p>你的任务是统计最终可以看到的不同颜色的线段。</p><p><strong>输入格式</strong></p><p>输入包含多组测试数据。</p><p>每组数据第一行包含整数 $n$。</p><p>接下来 $n$ 行，每行包含三个整数 $l,r,c$，表示绘制左右端点坐标分别为$l,r$ 的颜色为 $c$ 的线段。</p><p>思路</p><p><strong>思路:</strong></p><p><img src="C:%5CUsers%5C%E6%81%8B%E6%81%8B%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220504211426022.png" alt=""></p><p>根据此图我们可以看到一个小技巧就是把做区间$l + 1$</p><p>这样区间$0-4$就可以表示成第1,2,3,4段,然后在进行区间修改查询即可</p><p>附:这里的懒标记以及原始数组要初始化成-1因为0有意义(还有一点就是连续相等的区间算一段不算多段)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">8e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, add = <span class="number">-1</span>; <span class="comment">// val:维护的数据</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].r - tr[u].l + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(Node u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u.r - u.l + <span class="number">1</span>;    <span class="comment">// sum = len * change(值)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将线段树的节点的懒标记下放到儿子上，根节点的懒标记清空</span></span><br><span class="line"><span class="comment">// 分为：产生影响+懒标记下放</span></span><br><span class="line"><span class="comment">// 根的懒标记清空</span></span><br><span class="line"><span class="keyword">if</span> (u.add == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">l.add = u.add, r.add = u.add;</span><br><span class="line">l.val = u.add;</span><br><span class="line">r.val = u.add;</span><br><span class="line">u.add = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// do sth</span></span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = <span class="number">-1</span>, <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line"><span class="comment">// do sth</span></span><br><span class="line">tr[u].add = c;</span><br><span class="line">tr[u].val = c;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, c);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">memset</span>(st.tr, <span class="number">-1</span>, <span class="keyword">sizeof</span> st.tr);</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> l, r, c;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">l ++;</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, l, r, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> pre = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i ++) &#123;</span><br><span class="line"><span class="type">int</span> t = st.<span class="built_in">query</span>(<span class="number">1</span>, i, i).val;</span><br><span class="line"><span class="comment">// cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (t != pre) ans[t] ++;</span><br><span class="line">pre = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-1274-奶牛排队-区间max-min"><a href="https://www.acwing.com/problem/content/1276/">AcWing 1274. 奶牛排队(区间max,min)</a></h2><p>每天，农夫 John 的 $N$ 头牛总是按同一序列排队。</p><p>有一天，John 决定让一些牛玩一场飞盘比赛。</p><p>他准备找一群在队列中位置连续的牛来进行比赛，但是为了避免水平悬殊，牛的身高不应该相差太大。</p><p>John 准备了 $Q$ 个可能的牛的选择和所有牛的身高。</p><p>他想知道每一组里面最高和最矮的牛的身高差别。</p><p><strong>模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> val, valn; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">u.val = <span class="built_in">max</span>(l.val, r.val);</span><br><span class="line">u.valn = <span class="built_in">min</span>(l.valn, r.valn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = tr[u].valn = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res; </span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q --) &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">auto</span> t = st.<span class="built_in">query</span>(<span class="number">1</span>, l, r);</span><br><span class="line"><span class="comment">// cout &lt;&lt; t.val &lt;&lt; &#x27; &#x27; &lt;&lt; t.valn &lt;&lt; endl;</span></span><br><span class="line">cout &lt;&lt; t.val - t.valn &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4344-你能回答这些问题吗-区间开平方-区间查询和"><a href="https://www.acwing.com/problem/content/4347/">AcWing 4344. 你能回答这些问题吗(区间开平方,区间查询和)</a></h2><p>$n$ 个敌方战舰排成一排，依次编号 $1∼n$。</p><p>第 $i$ 个敌方战舰的初始血量为 $ei$。</p><p>下面，我方将对敌方战舰采取 $m$ 个操作，操作分为以下两种：</p><ul><li><code>0 x y</code>，将第 $x$ 个战舰和第 $y$ 个战舰之间的所有战舰（包含两端战舰）的血量开平方（平方根运算应向下取整）。</li><li><code>1 x y</code>，询问第 $x$ 个战舰和第 $y$ 个战舰之间的所有战舰（包含两端战舰）的现有血量之和。</li></ul><p>请你计算并回答所有询问操作。</p><p>这题直接进行进行懒标记应该不太能直接处理(我是真真想不出T_T),所以看别人的题解才会0.0,/优美的暴力</p><p>因为这一题是开根号所以一个点最多改8次,所以当我们区间查询和与长度一样的时候答案是不会在变了,所以直接return(太妙了0.0我反正想不出)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r - tr[u].l + <span class="number">1</span> == tr[u].val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r &amp;&amp; tr[u].l == tr[u].r) &#123;</span><br><span class="line">tr[u].val = <span class="built_in">sqrt</span>(tr[u].val); <span class="comment">// 相当于全部递归成单点修改O(n)复杂度</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)<span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segment_Tree</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">LL val; <span class="comment">//</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;u, Node &amp;l, Node &amp;r)</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">u.val = l.val + r.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">tr[u].r = r, tr[u].l = l;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[u].val = a[l], <span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r - tr[u].l + <span class="number">1</span> == tr[u].val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r &amp;&amp; tr[u].l == tr[u].r) &#123;</span><br><span class="line">tr[u].val = <span class="built_in">sqrt</span>(tr[u].val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)<span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[u].r &lt;= r &amp;&amp; tr[u].l &gt;= l) <span class="keyword">return</span> tr[u];</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">Node res;</span><br><span class="line"><span class="built_in">pushup</span>(res, left, right);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n, T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; T &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; st.a[i];</span><br><span class="line">st.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="type">int</span> m, op, x, y;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">if</span> (op) &#123;</span><br><span class="line">cout &lt;&lt; st.<span class="built_in">query</span>(<span class="number">1</span>, x, y).val &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">st.<span class="built_in">modify</span>(<span class="number">1</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T ++;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kuangbin题单 </tag>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第49场周赛</title>
      <link href="/posts/18043.html"/>
      <url>/posts/18043.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4413-组队"><a href="">AcWing 4413. 组队</a></h2><h4 id="题目描述">题目描述</h4><p>给定 $n$ 个整数 $y1,y2,…,yn$，及一个整数$k$。</p><p>先求出有多少个 $yi$ 满足 $yi+k≤5$，然后输出满足要求的 $yi$ 的个数除以 $3$ 下取整的值。</p><p><strong>模拟即可</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x + k &lt;= <span class="number">5</span>) ans ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans / <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4414-子序列"><a href="https://www.acwing.com/problem/content/4417/">AcWing 4414. 子序列</a></h2><h4 id="题目描述-2">题目描述</h4><p>给定一个长度为 $n$ 的整数序列 $a1,a2,…,an$。</p><p>请你找到一个该序列的子序列，要求：</p><ol><li>该子序列的所有元素之和必须是奇数。</li><li>在满足条件 $1$ 的前提下，该子序列的所有元素之和应尽可能大。</li></ol><p>输出你找到的满足条件的子序列的所有元素之和。</p><p>保证至少存在一个满足条件的子序列。</p><p>注意，子序列不一定连续。</p><h4 id="解题思路">解题思路</h4><p>只要因为大于零想加是单调递增的, 那么就可以吧把所有的大于零的全部加起来,小于零的只会越加越小,如果答案是奇数直接输出即可,如果是偶数,记录小于零的最大的奇数,和大于零的最小的奇数,因为偶数加减奇数都是奇数,两种去一种答案大的即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> minji1 = <span class="number">0x3f3f3f3f</span>, minji2 = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">sum += a[i];</span><br><span class="line"><span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>) minji1 = <span class="built_in">min</span>(minji1, a[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((a[i] % <span class="number">2</span> + <span class="number">2</span>) % <span class="number">2</span> == <span class="number">1</span>) minji2 = <span class="built_in">max</span>(minji2, a[i]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(sum - minji1, sum + minji2) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4415-点的赋值"><a href="https://www.acwing.com/problem/content/4418/">AcWing 4415. 点的赋值</a></h2><h4 id="题目描述-3">题目描述</h4><p>给定一个 $n$个点 $m$ 条边的无向无权图。</p><p>点的编号为 $1∼n$。</p><p>图中不含重边和自环。</p><p>现在，请你给图中的每个点进行赋值，要求：</p><ol><li>每个点的权值只能是 $1$ 或 $2$ 或 $3$。</li><li>对于图中的每一条边，其两端点的权值之和都必须是奇数。</li></ol><p>请问，共有多少种不同的赋值方法。</p><p>由于结果可能很大，你只需要输出对 $998244353$ 取模后的结果。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 $T$，表示共有 $T$组测试数据。</p><p>每组数据第一行包含两个整数$n,m$。</p><p>接下来 $m$ 行，每行包含两个整数 $u,v$表示点 $u$ 和点 $v$ 之间存在一条边。</p><h4 id="输出格式">输出格式</h4><p>一个整数，表示不同赋值方法的数量对 $998244353$ 取模后的结果。</p><p>$1 \leq n \leq 3e5$</p><h4 id="解题思路-2">解题思路</h4><p>要求边的两面是奇数,那么只有可能一奇一偶,这样就可以把一个图分成两边左半边右半边(奇数偶数或偶数奇数),一定是一个二分图(不包含奇数个环的图)才能是答案</p><p><img src="https://s2.loli.net/2022/05/02/1NbWUrQYDIOcAhS.png" alt=""></p><p>奇偶的位置可以互换,偶数只有一个选择,奇数有$1$和$3$两种选择就是$2 ^ {左}$ + $2 ^ {右}$</p><p>如果不是二分图答案就是零, 如果有很多块图组成,乘数原理计算每块的和即可</p><h4 id="代码实现">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>, M = N * <span class="number">2</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> col[N], ans;</span><br><span class="line"><span class="type">int</span> n, m, cnt_0, cnt_1;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">col[u] = c;</span><br><span class="line">cnt_0 += c == <span class="number">1</span>;</span><br><span class="line">cnt_1 += c == <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (col[j] &amp;&amp; col[j] != <span class="number">3</span> - c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!col[j] &amp;&amp; !<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qmi</span><span class="params">(ll a, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">a = a * a % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>)  &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(col, <span class="number">0</span>, (n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">add</span>(x, y), <span class="built_in">add</span>(y, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!col[i]) &#123;</span><br><span class="line">cnt_0 = cnt_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(i, <span class="number">1</span>)) ans = ans * (<span class="built_in">qmi</span>(<span class="number">2</span>, cnt_1) + <span class="built_in">qmi</span>(<span class="number">2</span>, cnt_0)) % mod;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; ___;</span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kuangbin题单并查集专题</title>
      <link href="/posts/19243.html"/>
      <url>/posts/19243.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-4266-无线网络"><a href="https://www.acwing.com/problem/content/4269/">AcWing 4266. 无线网络</a></h2><p>一个二维平面中放着 $n$ 台电脑。</p><p>电脑编号 $1∼n$。</p><p>每台电脑的具体位置已知。</p><p>初始时，所有电脑都是关机状态。</p><p>两台电脑可以直接通信当且仅当两台电脑都处于开机状态，并且两电脑之间距离不超过 $d$。</p><p>电脑之间还可以通过中介电脑实现间接通信。</p><p>例如，电脑 $A$ 既可以与电脑 $B$ 实现直接通信，也可以与电脑 $C$实现直接通信，那么电脑 $B$ 和电脑 $C $就可以借助电脑 $A$ 实现间接通信。</p><p>现在，要按顺序进行若干个操作，操作共分为两种：</p><ul><li><code>O p</code>，将电脑 $p$ 开机。</li><li><code>S p q</code>，询问电脑 $p$ 和电脑 $q$ 之间能否实现通信。</li></ul><h4 id="输入格式">输入格式</h4><p>第一行包含两个整数 $n,d$。</p><p>接下来 $n$ 行，每行包含两个整数 $xi,yi$，表示一台电脑的位置坐标。</p><p>接下来若干行，每行包含一个操作命令，格式入题面所述。</p><h4 id="输出格式">输出格式</h4><p>对于每个询问指令，输出一行答案，如果可以实现通信，则输出 <code>SUCCESS</code>，否则输出 <code>FAIL</code>。</p><p>$1\leq n\leq 1001$,<br>$0\leq d \leq20000$,<br>$0\leq xi,yi \leq10000$,<br>$1\leq p,q\leq n,q\neq p$<br>最多包含 $3×10^5$ 个操作指令。</p><h4 id="输入样例：">输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">0 3</span><br><span class="line">0 4</span><br><span class="line">O 1</span><br><span class="line">O 2</span><br><span class="line">O 4</span><br><span class="line">S 1 4</span><br><span class="line">O 3</span><br><span class="line">S 1 4</span><br></pre></td></tr></table></figure><h4 id="输出样例：">输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FAIL</span><br><span class="line">SUCCESS</span><br></pre></td></tr></table></figure><h4 id="个人思路">个人思路</h4><p>因为只要两台之间不超过$d$时,两个之间就能通信,所以每当开机的时候把所有能通信的都并入一个集合即可.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(PII x, PII y)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sx = x.fi - y.fi;</span><br><span class="line"><span class="type">int</span> sy = x.se - y.se;</span><br><span class="line"><span class="keyword">return</span> sx * sx + sy * sy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, d;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line"><span class="function">vector&lt;PII&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) p[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i].fi &gt;&gt; a[i].se;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; c) &#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cal</span>(a[res[i]], a[x]) &lt;= d * d) &#123;</span><br><span class="line">p[<span class="built_in">find</span>(res[i])] = x;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">res.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> x, q;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(q)) cout &lt;&lt; <span class="string">&quot;SUCCESS&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;FAIL&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4267-可疑人员"><a href="https://www.acwing.com/problem/content/4270/">AcWing 4267. 可疑人员</a></h2>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kuangbin题单 </tag>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing每日一题2022-4月25日~5月1日</title>
      <link href="/posts/4841.html"/>
      <url>/posts/4841.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-2003-找到牛！"><a href="https://www.acwing.com/problem/content/2005/">AcWing 2003. 找到牛！</a></h2><p>奶牛贝茜逃跑了，躲在了长满高草的山脊上。</p><p>农夫约翰为了抓回贝茜，决定在草地中匍匐前行，从而不被贝茜发现。</p><p>不幸的是，发现贝茜并没有那么容易。</p><p>约翰面前的草看起来像是一个长度为 NN 的括号字符串，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">)((()())())</span><br></pre></td></tr></table></figure><p>约翰清楚贝茜的后腿看上去就像一对相邻的左括号 <code>((</code>，她的前腿看上去就像一对相邻的右括号 <code>))</code>。</p><p>因此，贝茜的位置可以用一对索引 x&lt;y 来描述，使得 <code>((</code> 在位置 x 处被找到，<code>))</code> 在位置 yy 处被找到。</p><p>请计算贝茜可能站立的不同位置的数量。</p><h4 id="思路">思路</h4><p>枚举))然后记录前面出现多少个((即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">sz</span>(s); i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) l ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) sum += l;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-1995-见面与问候"><a href="https://www.acwing.com/problem/content/1997/">AcWing 1995. 见面与问候</a></h2><p>众所周知，奶牛是非常有社交礼貌的动物：每当两头奶牛分开后相遇，它们都会用友好的“哞哞”声互相问候。</p><p>奶牛贝茜和她的朋友艾希正在农夫约翰的农场中的一条很长的道路上散步。</p><p>我们可以将此道路视为一个一维数轴。</p><p>贝茜和艾希都从原点出发，以相同的速度（$1 $单位距离/单位时间）行走一段时间。</p><p>请根据每头奶牛的运动情况描述，确定它们相互打招呼的次数。</p><p>贝茜和艾希可以在不同的时间点停止移动，并且她们的移动时间都不会超过 $1000000$ 单位。</p><h4 id="解题思路">解题思路</h4><p>枚举每一秒时刻所走的方向往右走为1往左走为-1这样算的前缀和就是所走到的位置</p><p>然后枚举所有时刻然后判断位置是否相同即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> b, e;</span><br><span class="line">cin &gt;&gt; b &gt;&gt; e;</span><br><span class="line"><span class="type">int</span> p1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mp1[N], mp2[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">char</span>&gt;&gt; <span class="built_in">x</span>(b), <span class="built_in">y</span>(e);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[q, w] : x) &#123;</span><br><span class="line">cin &gt;&gt; q &gt;&gt; w;</span><br><span class="line"><span class="type">int</span> t = q;</span><br><span class="line"><span class="keyword">while</span>(t --) &#123;</span><br><span class="line"><span class="keyword">if</span> (w == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">mp1[p1 ++] = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mp1[p1 ++] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> p2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[q, w] : y) &#123;</span><br><span class="line">cin &gt;&gt; q &gt;&gt; w;</span><br><span class="line"><span class="type">int</span> t = q;</span><br><span class="line"><span class="keyword">while</span>(t --) &#123;</span><br><span class="line"><span class="keyword">if</span> (w == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">mp2[p2 ++] = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mp2[p2 ++] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bei = <span class="number">0</span>, ai = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1e6</span> + <span class="number">10</span> &amp;&amp; i &lt; <span class="built_in">max</span>(p1, p2); i ++) &#123;</span><br><span class="line">bei += mp1[i];</span><br><span class="line">ai += mp2[i];</span><br><span class="line"><span class="keyword">if</span> (bei == ai &amp;&amp; (bei - mp1[i] != ai - mp2[i])) ans ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-1977-信息中继"><a href="https://www.acwing.com/problem/content/1979/">AcWing 1977. 信息中继</a></h2><p>农夫约翰有 $N$ 头奶牛，编号 $1∼N$。</p><p>通过使用易拉罐和绳子构成的土制电话，它们会在约翰不注意的时候相互通信。</p><p>每头奶牛最多可以将消息转发给另一头奶牛：</p><p>对于奶牛 $i$，它会将自己收到的任何信息转发给奶牛 $Fi$（$Fi$ 与 $i$ 一定不同）。</p><p>如果 $Fi$ 为 $0$，则奶牛 $i$ 不转发消息。</p><p>不幸的是，奶牛们意识到来自某些奶牛的消息可能最终陷入循环之中，不断地被转发。</p><p>请确定所有奶牛中有多少只奶牛发出的消息不会永远陷入循环之中。</p><p>$1≤N≤1000$<br>$0\leq Fi \leq N$</p><h4 id="解题思路-2">解题思路</h4><p>N的范围只有1000所以只需要枚举所有的点开始传信息是否能传到一个牛2次,如果能传到2次那么就一定是个环</p><h4 id="代码">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> st[N / <span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="type">int</span> t = i, f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">st[t] ++;</span><br><span class="line"><span class="keyword">if</span> (st[t] == <span class="number">2</span>) &#123;</span><br><span class="line">f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">t = a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!f) ans ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第48场周赛</title>
      <link href="/posts/33578.html"/>
      <url>/posts/33578.html</url>
      
        <content type="html"><![CDATA[<p>较为简单</p><h2 id="AcWing-4410-吃鸡蛋"><a href="https://www.acwing.com/problem/content/4413/">AcWing 4410. 吃鸡蛋</a></h2><h4 id="题目描述">题目描述</h4><p>小明家里有 <strong>n</strong> 个鸡蛋。</p><p>每天早上，小明都要吃 <strong>1</strong> 个鸡蛋作为早餐。</p><p>小明家里还有一个母鸡。</p><p>母鸡会在第 $m$,$2m$,$3m$$…m,2m,3m…$ 天的<strong>晚上</strong>下蛋，每次只下 <strong>1</strong> 个蛋。</p><p>请问，连续多少天以后，小明就没有早餐鸡蛋吃了？</p><h4 id="输入格式">输入格式</h4><p>一行两个整数 <strong>n</strong>,<strong>m</strong>。</p><h4 id="输出格式">输出格式</h4><p>一个整数，表示答案。</p><h4 id="数据范围">数据范围</h4><p>所有测试点满足 1$\leq$n$\leq$100，2$\leq$ m$\leq$100。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>$ 直接模拟即可$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> m, n, cnt = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">cnt ++;</span><br><span class="line">n -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt % m == <span class="number">0</span>) n ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4411-三仙归洞"><a href="https://www.acwing.com/problem/content/4414/">AcWing 4411. 三仙归洞</a></h2><p>三个倒扣着的不透明小碗排成一排。</p><p>随机挑选一个小碗，将一个小球置于碗中。</p><p>然后进行 n 次操作，编号 1∼n。</p><p>对于第 i 次操作：</p><ul><li>如果 $imod2 = 1$，则操作内容为将位于中间的碗和位于左边的碗交换位置。</li><li>如果 $ imod2 = 0 $ ，则操作内容为将位于中间的碗和位于右边的碗交换位置。</li></ul><p>我们不妨用 0,1,2 来表示左、中、右三个位置。</p><p>n 次操作全部完成以后，装有小球的碗位于位置 x。</p><p>请你计算，所有操作开始前，装有小球的碗所在的初始位置。</p><p>1$\leq$n$\leq$2×$10^9$</p><p>我们可以发现规律,答案为6的周期循环,取模计算即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, x;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">n --;</span><br><span class="line"><span class="type">int</span> r = <span class="number">0</span>, l = <span class="number">0</span>, mid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) l = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">1</span>) mid = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = <span class="number">1</span>;</span><br><span class="line">n %= <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="built_in">swap</span>(mid, l);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">swap</span>(mid, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="number">1</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mid == <span class="number">1</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4412-构造数组"><a href="https://www.acwing.com/problem/content/description/4415/">AcWing 4412. 构造数组</a></h2><h4 id="题目描述-2">题目描述</h4><p>给定一个长度为 n 的整数数组$a1,a2,…,an$。</p><p>请你构造长度为 n 的整数数组$b1,b2,…,bn$，要求数组 $b $满足：</p><ol><li>$b1=0$。</li><li>对于任意一对索引 $i$ 和 $j$（1≤i,j≤n），如果 $ai=aj$ 则$bi=bj$ （注意，如果 $ai{\neq}aj$，则 $bi $和$ bj$ 相等与否随意）。</li><li>对于任意索引 $i$（$i∈[1,n−1]$），要么满足$bi=bi+1$，要么满足$bi+1=b_{i+1}$。</li></ol><p>请计算，一共可以构造出多少个不同的满足条件的数组 bb。</p><p>由于答案可能很大，你只需要输出对<strong>998244353</strong> 取模后的结果。</p><p>例如，如果<strong>a=[1,2,1,2,3]</strong>，则一共有 2 个满足条件的数组 b，分别是$b=[0,0,0,0,0]$ 和 $b=[0,0,0,0,1]$。</p><h4 id="思路">思路</h4><p>有题意相等的两个数之间任意所有的数都要相同才能满足</p><p>找当前数字最大能往后走多少, 看最后能贡献多少个区间,每个区间有两种选择往后数+1或不变</p><p>类似于区间合并,把相交的区间合并到一起,然后看</p><p>记录最早出现的下标和最晚出现的下标, 然后枚举两个之间是否有数最晚出现的下标在枚举当前最晚出现的后面,有的话就更新,直到枚举完所有不相邻的区间即可.</p><p>枚举完一个区间ans++, 最后$2^{ans - 1}$就是答案</p><h4 id="代码">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i], last[a[i]] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> maxr = last[a[i]];</span><br><span class="line"><span class="keyword">while</span> (i &lt;= maxr) maxr = <span class="built_in">max</span>(maxr, last[a[i ++]]);</span><br><span class="line">ans ++, i --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> qmi = [&amp;](ll a, <span class="type">int</span> k, ll res = <span class="number">1</span>) -&gt; <span class="type">int</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">a = a * a % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">qmi</span>(<span class="number">2</span>, ans - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing每日一题2022(4月18日 ~ 4月24日)</title>
      <link href="/posts/51071.html"/>
      <url>/posts/51071.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-1353-滑雪场设计"><a href="https://www.acwing.com/problem/content/description/1355/">AcWing 1353. 滑雪场设计</a></h2><h5 id="题目描述">题目描述</h5><p>农夫约翰的农场上有 N 个山峰，每座山的高度都是整数。</p><p>在冬天，约翰经常在这些山上举办滑雪训练营。</p><p>不幸的是，从明年开始，国家将实行一个关于滑雪场的新税法。</p><p>如果滑雪场的最高峰与最低峰的高度差大于17，国家就要收税。</p><p>为了避免纳税，约翰决定对这些山峰的高度进行修整。</p><p>已知，增加或减少一座山峰 x 单位的高度，需要花费 x2 的金钱。</p><p>约翰<strong>只愿意改变整数单位</strong>的高度，且每座山峰<strong>只能修改一次</strong>。</p><p>请问，约翰最少需要花费多少钱，才能够使得最高峰与最低峰的高度差不大于17。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 N。</p><p>接下来 N 行，每行包含一个整数，表示一座山的高度。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最少花费的金钱。</p><h4 id="数据范围">数据范围</h4><p>1≤N≤1000,<br>数据保证，每座山的初始高度都在 0∼100 之间。</p><h4 id="输入样例：">输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">20</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">24</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h4 id="输出样例：">输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><h4 id="样例解释">样例解释</h4><p>最佳方案为，将高度为 1 的山峰，增加 3 个单位高度，将高度为 24 的山峰，减少 3 个单位高度。</p><h4 id="思路">思路</h4><p>一看数据范围,山的高度只有100, 所以我们枚举所有可行的区间即可0-17,1-18…</p><p>计算区间内所有的山的花费</p><h4 id="代码">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int ans = INF;</span></span></span><br><span class="line"><span class="string"><span class="meta">int n; cin &gt;&gt; n;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;int&gt; a(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int &amp;x : a) cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i + 17 &lt;= 100; i ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">int j = i + 17, res = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int k = 0; k &lt; n; k ++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[k] &gt;= i &amp;&amp; a[k] &lt;= j) continue;</span></span></span><br><span class="line"><span class="string"><span class="meta">if (a[k] &lt; i) res += (i - a[k]) * (i - a[k]);</span></span></span><br><span class="line"><span class="string"><span class="meta">else if (a[k] &gt; j) res += (a[k] - j) * (a[k] - j);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = min(ans, res);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="AcWing-1929-镜子田地"><a href="https://www.acwing.com/problem/content/description/1931/">AcWing 1929. 镜子田地</a></h2><h4 id="题目描述-2">题目描述</h4><p>农夫约翰在屋子外面放了一些旧镜子，他的奶牛们像往常一样调皮地偷走了它们！</p><p>奶牛们将镜子放置在了一个矩形田地中，该田地可被划分为 N×M 个方格区域。</p><p>在每个方格区域中，奶牛在其某对对角之间放置一个双面镜，因此，共有两种放法，一种为 <code>/</code> 放置（镜子连接方格左下角和右上角），另一种为 <code>\</code> 放置（镜子连接方格左上角和右下角）。</p><p>一天晚上，奶牛贝茜将激光发射器带到了该田地中。</p><p>她站在田地外面，沿着田地的行或列水平或垂直照射光束，使光束反射一定数量的镜子。</p><p>由于镜子都是沿对角线摆放，因此经反射镜反射的水平光束最终将垂直传播，反之亦然。</p><p>贝茜想知道从田地之外射入的水平或垂直光束最多可以在田地中被反射多少次。</p><p>给定镜子田地的布局，请帮助贝茜计算这个数字。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含 N 和 M。</p><p>接下来 N 行，每行包含 M 个 <code>/</code> 或 <code>\</code> 字符，表示田地中镜子的具体摆放方式。</p><h4 id="输出格式-2">输出格式</h4><p>输出田地之外的水平或垂直光束能够被反射的最大次数。</p><p>如果可以无限反射，则输出 −1−1。</p><h4 id="数据范围-2">数据范围</h4><p>1≤N,M≤1000</p><h4 id="输入样例：-2">输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">/\\</span><br><span class="line">\\\</span><br><span class="line">/\/</span><br></pre></td></tr></table></figure><h4 id="输出样例：-2">输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="思路-2">思路</h4><p>一共有4中进入农田的可能从上面, 下面, 左面,右面,</p><p>设置偏移方向$dx[4] =$ {-1, 0, 1, 0}$, $$dy[4]$ = {0, 1, 0, -1}</p><p>$0, 1, 2, 3$ 分别代表 上,右, 下, 左</p><p>一个光线照在<code>\</code> 上</p><ul><li>(从上方射入<strong>0</strong>),从右方射出<strong>1</strong></li><li>(从下方射入<strong>2</strong>),从左方射出<strong>3</strong></li><li>(从左方射入<strong>3</strong>),从右方射出<strong>2</strong></li><li>(从右方射入<strong>1</strong>),从上方射出<strong>0</strong></li></ul><p>可以看出原来的方向,转变后为 ^1 的值</p><p>光线照在<code>/</code>上</p><ul><li>(从上方射入<strong>0</strong>),从左方射出<strong>3</strong></li><li>(从下方射入<strong>2</strong>),从右方射出<strong>1</strong></li><li>(从左方射入<strong>3</strong>),从上方射出<strong>0</strong></li><li>(从右方射入<strong>1</strong>),从上方射出<strong>2</strong></li></ul><p>可以看出原来的方向,转变后为 ^3 的值</p><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 1e3 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">int n, m;</span></span></span><br><span class="line"><span class="string"><span class="meta">vector&lt;string&gt; g;</span></span></span><br><span class="line"><span class="string"><span class="meta">int ans = 0, dx[] = &#123;-1, 0, 1, 0&#125;, dy[] = &#123;0, 1, 0, -1&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void dfs(int x, int y, int d, int cnt) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ans = max(cnt, ans);</span></span></span><br><span class="line"><span class="string"><span class="meta">if (g[x][y] == &#x27;/&#x27;) d ^= 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">else d ^= 3;</span></span></span><br><span class="line"><span class="string"><span class="meta">int nx = x + dx[d], ny = y + dy[d];</span></span></span><br><span class="line"><span class="string"><span class="meta">if (nx &lt; n and ny &lt; m and (ny &gt;= 0) and nx &gt;= 0) dfs(nx, ny, d, cnt + 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cin &gt;&gt; n &gt;&gt; m;</span></span></span><br><span class="line"><span class="string"><span class="meta">g.resize(n);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (string &amp;x : g) cin &gt;&gt; x;</span></span></span><br><span class="line"><span class="string"><span class="meta">// 上, 右, 下, 左</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; m; i ++) dfs(0, i, 2, 1), dfs(n - 1, i, 0, 1);</span></span></span><br><span class="line"><span class="string"><span class="meta">for (int i = 0; i &lt; n; i ++) dfs(i, m - 1, 3, 1), dfs(i, 0, 1, 1);</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">cout &lt;&lt; ans &lt;&lt; endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="AcWing-1912-里程表"><a href="https://www.acwing.com/activity/content/code/content/3308420/">AcWing 1912. 里程表</a></h2><p>约翰的奶牛正在公路上旅行。</p><p>他们汽车上的里程表显示的是整数里程值。</p><p>旅途开始时里程表显示的里程值为 X，旅途结束时里程表显示的里程值为 Y。</p><p>每当里程表显示“有趣的”数字（包括开始和结束时显示的数字）时，奶牛们就会发出愉快的叫声。</p><p>如果一个数除去前导零以外的所有数字中，除了一个数字不同以外，其他所有数字都是相同的，那么这个数就是“有趣的”。</p><p>例如，3332333323 和 110110 是有趣的，而 97799779 和 5555555555 不是有趣的。</p><p>请帮助约翰计算奶牛们在旅途中发出叫声的次数。</p><p>100$\leq$ X$\leq$ Y $\leq$ $10^{16}$</p><h4 id="解题思路">解题思路</h4><p>一看数据范围暴力枚举是显然不行的, 只需要枚举所有的答案即可,范围大,但是答案少,枚举答案判断答案是否合法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l, r, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">17</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(i, <span class="string">&#x27;0&#x27;</span> + j)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; i; z ++) &#123;</span><br><span class="line">string t = s;</span><br><span class="line">t[z] = <span class="string">&#x27;0&#x27;</span> + k;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; i; w ++) p = p * <span class="number">10</span> + t[w] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (t[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= p &amp;&amp; r &gt;= p) ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第47场周赛</title>
      <link href="/posts/45850.html"/>
      <url>/posts/45850.html</url>
      
        <content type="html"><![CDATA[<p>总体较为简单</p><h2 id="AcWing-4399-数字母"><a href="https://www.acwing.com/activity/content/problem/content/6841/">AcWing 4399. 数字母</a></h2><h4 id="题目描述">题目描述</h4><p>给定一个仅包含小写字母的集合。</p><p>请你判断，集合中不同字母的数量。</p><h4 id="输入格式">输入格式</h4><p>输入一行字符串，用以描述这个小写字母集合。</p><p>字符串以 <code>&#123;</code> 开始，以 <code>&#125;</code> 结束，中间列出所有集合中包含的小写字母，小写字母两两之间用逗号（<code>,</code>）加空格（<code> </code>）隔开。</p><h4 id="输出格式">输出格式</h4><p>一个整数，表示集合中不同字母的数量。</p><h4 id="数据范围">数据范围</h4><p>前 55 个测试点满足，集合中包含的字母数量在$ [0,10] $范围内。 所有测试点满足，集合中包含的字母数量在$ [0,333] $范围内。</p><h4 id="输入样例1：">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;a, b, c&#125;</span><br></pre></td></tr></table></figure><h4 id="输出样例1：">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输入样例2：">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;b, a, b, a&#125;</span><br></pre></td></tr></table></figure><h4 id="输出样例2：">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="输入样例3：">输入样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="输出样例3：">输出样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="代码">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br><span class="line">set&lt;<span class="type">char</span>&gt; S;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">sz</span>(s) - <span class="number">1</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span> || s[i] == <span class="string">&#x27;,&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">S.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; S.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4400-玩游戏"><a href="https://www.acwing.com/problem/content/4403/">AcWing 4400. 玩游戏</a></h2><h4 id="描述">描述</h4><p><strong>n</strong> 个小朋友围成一圈，玩数数游戏。</p><p>小朋友们按顺时针顺序，依次编号为 <strong>1∼n</strong>。</p><p>初始时，<strong>1</strong> 号小朋友被指定为领头人。</p><p>游戏一共会行进 <strong>k</strong> 轮。</p><p>在第 <strong>i</strong> 轮中，领头人会从他的顺时针方向的下一个人开始，按顺时针顺序数 <strong>ai</strong> 个人。</p><p>其中，最后一个被领头人数到的人被淘汰出局，这也意味着该轮游戏结束。</p><p>出局者的顺时针方向的下一个人被指定为新领头人，引领新一轮游戏。</p><p>例如，假设当游戏即将开始第 i 轮时，还剩下 <strong>5</strong> 个小朋友，编号按顺时针顺序依次为 <strong>8,10,13,14,16</strong>，并且当前领头人为 <strong>13</strong> 号小朋友，<strong>ai=12</strong>，则第 i 轮游戏结束后，最后一个被数到的小朋友为 <strong>16</strong> 号小朋友，他将被淘汰出局，并且处于其下一位的第 8 号小朋友将被指定为新领头人。</p><p>现在，请你求出每一轮次被淘汰的小朋友的编号。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含两个整数 <strong>n</strong>,<strong>k</strong>。</p><p>第二行包含 <strong>k</strong> 个整数 <strong>a1,a2,…,ak</strong>。</p><h4 id="输出格式-2">输出格式</h4><p>一行，<strong>k</strong> 个整数，其中第 <strong>i</strong> 个整数表示在第 <strong>i</strong>轮中被淘汰的小朋友的编号。</p><h4 id="数据范围-2">数据范围</h4><p>前三个测试点满足 2≤n≤10。<br>所有测试点满足 2≤n≤100，1≤k≤n−1，1≤ai≤109。</p><h4 id="输入样例1：-2">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 5</span><br><span class="line">10 4 11 4 1</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-2">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 2 5 6 1</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-2">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">2 5</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-2">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br></pre></td></tr></table></figure><hr><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/3857719?fromtitle=%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF&amp;fromid=348830&amp;fr=aladdin">约瑟夫环</a>系列问题, vector模拟删除就行了,每次加偏移量然后取模长度即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) b.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line"><span class="type">int</span> j = (s + a[i]) % (<span class="built_in">sz</span>(b));</span><br><span class="line">cout &lt;&lt; (*(b.<span class="built_in">begin</span>() + j)) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">b.<span class="built_in">erase</span>(b.<span class="built_in">begin</span>() + j);</span><br><span class="line">s = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-4401-找回数组"><a href="https://www.acwing.com/problem/content/4404/">AcWing 4401. 找回数组</a></h2><h4 id="描述-2">描述</h4><p>有一个长度为 k 的整数数组 x0,x1,…,xk−1。</p><p>不幸的是，这个数组已经丢失了，我们甚至不知道 k 的具体值。</p><p>幸运的是，我们找到了另一个利用数组 x 生成的长度为 n+1 的数组 a0,a1,…,an。</p><p>数组 a 的正式描述如下：</p><ul><li>a0=0。</li><li>对于 1≤i≤n，ai=x(i−1)modk+ai−1ai=x(i−1)modk+ai−1。</li></ul><p>例如，当 x=[1,2,3]x=[1,2,3] 并且 n=5n=5 时，生成数组 aa 的过程如下：</p><ul><li>a0=0a0=0</li><li>a1=x0mod3+a0=x0+0=1</li><li>a2=x1mod3+a1=x1+1=3</li><li>a3=x2mod3+a2=x2+3=6</li><li>a4=x3mod3+a3=x0+6=7</li><li>a5=x4mod3+a4=x1+7=9</li></ul><p>所以，当 x=[1,2,3]并且 n=5 时，可以生成数组a=[0,1,3,6,7,9]。</p><p>现在，我们希望你通过数组 a 找回数组 x。</p><p>更具体地说，已知 1≤k≤n，请你找到所有可能的 k 值，即数组 x 的所有可能长度。</p><h4 id="输入格式-3">输入格式</h4><p>第一行包含整数 n。</p><p>第二行包含 n 个整数 a1,a2,…,an。</p><p>注意，由于 a0 一定等于 0，所以在输入中并未给出。</p><h4 id="输出格式-3">输出格式</h4><p>第一行输出一个整数 l，表示数组 x 的所有可能长度的数量。</p><p>第二行按升序输出 l 个整数，表示数组 x 的所有可能长度。</p><h4 id="数据范围-3">数据范围</h4><p>前四个测试点满足 1≤n≤5，<br>所以测试点满足 1≤n≤1000，1≤ai≤106。</p><h4 id="输入样例1：-3">输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-3">输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-3">输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 5 6 8</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-3">输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h4 id="输入样例3：-2">输入样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 5 3</span><br></pre></td></tr></table></figure><h4 id="输出样例3：-2">输出样例3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>数据范围&lt; 1000 所以暴力枚举所有的长度即可,然后判断该长度是否合法<br>$a[i] - a[i - 1] $= $x_{imod k}$<br>$a[i + 1] - a[i] $=$x_{i + 1mod k}$</p><p>…</p><p>如果x[i + k] 不等于x[i]就是不合法的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, ans</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) &#123;</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] - a[i - <span class="number">1</span>] != a[i - k] - a[i - k - <span class="number">1</span>]) &#123;</span><br><span class="line">ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ok) ans.<span class="built_in">emplace_back</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sz</span>(ans) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> AcWing </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码源每日一题</title>
      <link href="/posts/51727.html"/>
      <url>/posts/51727.html</url>
      
        <content type="html"><![CDATA[<h2 id="特殊正方形"><a href="http://oj.daimayuan.top/course/11/problem/386">特殊正方形</a></h2><p>​</p><h3 id="题目描述">题目描述</h3><p>输入$n$，输出$n$行$n$列的由<code>+</code>和<code>.</code>组成的正方形，其中最外面一圈全是<code>+</code>，第二圈全是<code>.</code>，…，对于第$i$圈，如果$i$是奇数，那么全是<code>+</code>，否则全是<code>.</code>。</p><p><strong>输入样例</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">++++++++++</span><br><span class="line">+........+</span><br><span class="line">+.++++++.+</span><br><span class="line">+.+....+.+</span><br><span class="line">+.+.++.+.+</span><br><span class="line">+.+.++.+.+</span><br><span class="line">+.+....+.+</span><br><span class="line">+.++++++.+</span><br><span class="line">+........+</span><br><span class="line">++++++++++</span><br></pre></td></tr></table></figure><h3 id="思路">思路</h3><p>这里我们只需要一圈一圈的枚举即可,三维循环,第一维枚举层数,这里层数偶数直接$n/2$ 奇数要$+1$, 二三维枚举环形.</p><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> t = n / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) t ++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = i; x &lt;= n - i + <span class="number">1</span>; x ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = i; y &lt;= n - i + <span class="number">1</span>; y ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span>) s[x][y] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> s[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">cout &lt;&lt; s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2022-4-14，走楼梯进阶版">2022/4/14，<a href="http://oj.daimayuan.top/problem/129">走楼梯进阶版</a></h2><h3 id="题目描述-2">题目描述</h3><p>楼梯有 <strong>n</strong> 阶，上楼可以一步上一阶，也可以一步上二阶。</p><p>但你不能连续三步都走两阶，计算走到第<strong>n</strong>阶共有多少种不同的走法。</p><p><strong>输入样例</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>(n &lt; 50)</p><h3 id="解题思路">解题思路</h3><p>考虑动态规划,先凭题意跟感觉,写出我们的状态表达方式,选择恰当的表示方式,这里我想的是</p><blockquote><p>走了i步, 到这一步走,前面的连续的2步的次数</p><p>当前这一步选择走一步 f[i + 1] [0] += f[i] [j]</p><p>当前这一步走两步 f[i + 2] [j + 1] += f[i] [j], (j &lt; 3), 因为不能超过3步</p><p>初始化, f[0] [0] = 1</p><p>答案就是f[n] [0] + f[n] [1] + f[n] [2]</p></blockquote><h3 id="代码-2">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line">ll f[N][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j ++) &#123;</span><br><span class="line">f[i + <span class="number">1</span>][<span class="number">0</span>] += f[i][j];</span><br><span class="line"><span class="keyword">if</span> (j &lt;= <span class="number">2</span>) f[i + <span class="number">2</span>][j + <span class="number">1</span>] += f[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[n][<span class="number">0</span>] + f[n][<span class="number">1</span>] + f[n][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="走路"><a href="http://oj.daimayuan.top/problem/460">走路</a></h2><h3 id="题目描述-3">题目描述</h3><p>有一条很长的数轴，一开始你在$0$的位置。接下来你要走$n$步，第$i$步你可以往右走$a_i$或者$b_i$。</p><p>问$n$步之后，$0$到$m$的每个位置，能不能走到？</p><p><strong>输入样例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 2</span><br><span class="line">2 6</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000011001</span><br></pre></td></tr></table></figure><h3 id="思路-2">思路</h3><p>正常思维:</p><blockquote><p>考虑动态规划, 状态方程的含义:考虑前$i$ 次, 能走到第$j$个地方</p><p>假如当前选择走a步, f[i] [j] -&gt; f[i + 1] [j + a], f[i] [j]能走到的地方f[i + 1] [j] 都能走到.      (j + a $\leqslant$ m)</p><p>走$b$步同理.</p></blockquote><h3 id="代码-3">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">105</span>][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a + j &lt;= m) f[i + <span class="number">1</span>][j + a] |= f[i][j];</span><br><span class="line"><span class="keyword">if</span> (b + j &lt;= m) f[i + <span class="number">1</span>][j + b] |= f[i][j]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) cout &lt;&lt; f[n][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下面将非正常实现">下面将非正常实现</h3><p>这里我们利用bitset来实现状态转移, 看下面<s>骚操作</s></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;N&gt; f;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 刚开始0能到0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, b; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">f = (f &lt;&lt; a) | (f &lt;&lt; b); <span class="comment">//上一步能到所有点的基础上走a步和走b步</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) cout &lt;&lt; f[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大和上升子序列"><a href="http://oj.daimayuan.top/problem/289">最大和上升子序列</a></h2><h3 id="题目描述-4">题目描述</h3><p>给定一个长度为 nn 的数组 a1,a2,…,ana1,a2,…,an，问其中的和最大的上升子序列。也就是说，我们要找到数组 $p_1$,$p_2$,…,$p_m$，满足 $1$≤$p_1$&lt;$p_2$&lt;⋯&lt;$p_m$≤ $n$并且 $a_{p_1}$&lt;$a_{p_2}$&lt;⋯&lt;$a_{p_m}$，使得$a_{p_1}$+$a_{p_2}$+⋯+$a_{p_m}$最大。</p><p><strong>样例输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 7 4 2 6 8</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><h3 id="解题思路-2">解题思路</h3><p>就是最长上升子序列的模型, 这里维护的不是长度了而是, 维护的以当前结尾的和最大的最长上升子序列.</p><h3 id="代码-4">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">f[i] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[j]) f[i] = <span class="built_in">max</span>(f[i], f[j] + a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; *<span class="built_in">max_element</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>()) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路径计数"><a href="http://oj.daimayuan.top/problem/126">路径计数</a></h3><h3 id="题目描述-5">题目描述</h3><p>有一个n×n的网格，有些格子是可以通行的，有些格子是障碍。</p><p>一开始你在左上角的位置，你可以每一步往下或者往右走，问有多少种走到右下角的方案。</p><p>由于答案很大，输出对109+7取模的结果。</p><p>转移太简单了了直接放代码了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) </span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &lt;= n &amp;&amp; a[i + <span class="number">1</span>][j] == <span class="number">1</span>) </span><br><span class="line">f[i + <span class="number">1</span>][j] += f[i][j], f[i + <span class="number">1</span>][j] %= mod;</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt;= n &amp;&amp; a[i][j + <span class="number">1</span>] == <span class="number">1</span>) </span><br><span class="line">f[i][j + <span class="number">1</span>] += f[i][j], f[i][j + <span class="number">1</span>] %= mod;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[n][n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ___ = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cin &gt;&gt; ___;</span></span><br><span class="line"><span class="keyword">for</span> (; ___ -- ;) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing春季每日一题4月11-4月17</title>
      <link href="/posts/54817.html"/>
      <url>/posts/54817.html</url>
      
        <content type="html"><![CDATA[<h1>2022年4月12日</h1><h2 id="AcWing-1824-钻石收藏家">AcWing 1824. 钻石收藏家</h2><h3 id="题目描述">题目描述</h3><p>奶牛贝茜非常喜欢闪闪发光的东西，她会在业余时间开采钻石。</p><p>她收藏了 $N$ 颗大小不等的钻石，她想将其中的一些摆放在牛棚的展示柜当中。</p><p>为了使展示柜中的钻石尺寸大小相似，她不会将两颗尺寸大小相差超过 $K$ 的钻石同时放在柜子中（刚好相差 $K$，则没有问题）。</p><p>给定 $K$，请帮助贝茜计算在展示柜中最多可以摆放多少颗钻石。</p><h4 id="输入格式">输入格式</h4><p>第一行包含两个整数 $N$,$K$。($1$$\leqslant$N$\leqslant$ 1000，$1$$\leqslant$K$\leqslant$ 10000 )</p><p>接下来 $N$ 行，每行包含一个整数，表示一颗钻石的尺寸。</p><h4 id="输出格式">输出格式</h4><p>输出贝茜可以在展示柜中展示的钻石最大数量。</p><p>输入样例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>这个题我的第一反映是先进行排序（得想让他连续），然后枚举所有起点， 然后往后放最大放到第几个，这里j不需要回溯，只要遍历一遍即可。进行双指针操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[j] - a[i] &lt;= k &amp;&amp; j &lt; n) j ++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, j - i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删减"><a href="https://www.acwing.com/problem/content/description/1885/">删减</a></h2><h3 id="题目描述-2">题目描述</h3><p>农夫约翰把杂志上所有的文章摘抄了下来并把它变成了一个长度不超过 $10^6$ 的字符串 S。</p><p>他希望从 S 中删除子串 T。</p><p>农夫约翰在 S 中从头开始寻找子串 T，一旦找到，就将它从 S 中删除，然后再次从头开始寻找（而不是接着往下找）。</p><p>他重复这个操作直到 S 中没有子串 T 为止。</p><p>注意，删除一个子串 T 可能会导致一个新的子串 T 的出现。</p><p>请帮助约翰完成这些操作并输出最后的 S。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含字符串 S。</p><p>第二行包含字符串 T。</p><h4 id="输出格式-2">输出格式</h4><p>输出操作完成后的 S。</p><p>保证最终字符串 S 不为空。</p><p>样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whatthemomooofun</span><br><span class="line">moo</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatthefun</span><br></pre></td></tr></table></figure><p>解题思路</p><p>如果直接暴力string的话肯定会tle, 然后我们想着优化一下,设置一个答案string,一个一个的插入原来的s的字符, 如果出现了在删,这样大量的省去了string删除O(n * m) 的复杂度.</p><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string s, t, ans;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">ans += s[i];</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= t.<span class="built_in">size</span>() &amp;&amp; ans.<span class="built_in">substr</span>(ans.<span class="built_in">size</span>() - t.<span class="built_in">size</span>(), t.<span class="built_in">size</span>()) == t) &#123;</span><br><span class="line">ans.<span class="built_in">erase</span>(ans.<span class="built_in">begin</span>() + ans.<span class="built_in">size</span>() - t.<span class="built_in">size</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三届蓝桥杯后感</title>
      <link href="/posts/50984.html"/>
      <url>/posts/50984.html</url>
      
        <content type="html"><![CDATA[<h3 id="2022年4月9日蓝桥杯拉下帷幕">2022年4月9日蓝桥杯拉下帷幕</h3><h3 id="赛前">赛前</h3><p>  回望一下自己比赛是的状态，整个人看上去状态及其的不好，可能与这两天的休息情况有关， 也因为自己想着快点把博客完善好，就爆淦了几个夜里（都是早上 一大早/五点睡觉。。。 ）， 然后因为自己疫情隔离在家里，所以还得上学校的网课，早上8点半就得起来上网课，所以这几天头脑都是混混的，不知道咋过的0.0。</p><h3 id="赛时复盘">赛时复盘</h3><p>       赛前我专门去把图论以及常用的数论全部复习了一边在acwing上打了几遍，，让我感到崩溃的是初赛一个图论和数论都没考到（T_T, 唔~~我太难了）。</p><p>        还有就是刚开始考试，我本人喜欢切屏幕。。。上来给我发了7张黄牌，吓得我一哆嗦。（后来说是没有问题，让我们继续做）</p><p>       刚开始做前几道题的时候还算顺利，还有就是有争议的第二题，样例给的是20220123，是顺序日期， 因为其中<strong>一个</strong>顺序是123 (?, 我心想012不也是一个么)  ， 后来我还是把012算上了，因为自己脑抽了把一月份少算了，白给了5分， 写着写着题突然意识到了OI赛制的恐怖， 没有一题我感觉我是全对的。 我之前写题比赛基本都会错一点细节，（这次蓝桥也没有意外 /大哭特哭）。击倒水题，我就全对了一到题0.0，芭比Q了, 进决赛都悬了, 本次比赛的罪魁祸首(X进制减法), 好家伙,我分析了一小时左右的样例,竟然不知道他咋转化成十进制的,我想着这个中等一点(放中间的)的题,我都看不懂,完了完了,脑子里又开始乱想, (不会吧不会吧,这都做不出来么,还剩2小时了),后来真的想不出了,就跳过了, 后面基本全乱了阵脚, 枚举子矩阵,按道理枚举三维,剩下的尺取法应该能拿满分的, 我嫌时间可能不够用,就直接无脑上了O($n ^ 4$) 的暴力, 想着先过70%剩下, 回来再优化,  下一题一看是填方格,一眼看过去就是个非常<strong>简单</strong>的状压dp其实这一题是我最遗憾的一题,  刚开始列图表写递推找规律,  总感觉答案就在眼前,(我从此深知自己的状压dp是有多菜了),可能是太久没做过状压dp了,  后来还是没推出来, 后来看大佬题解,发现我真是个<s>sb</s>小可爱, 做到这里还剩1一小时我崩了,李白那题我暴力分很好骗而且有40%的分数,怕没时间了我就是直接dfs爆搜,想这事有时间回来再加一个记忆化应该也可以过…(然而现实总是残酷的, 并没有如我所愿), 下面那一题排雷,我没算时间复杂对, 看完题就思考了一会子, 想着好像多源的bfs,好像是$n ^ 2$ 的复杂度后期再测试 ,这代码也挺长…写了有一会子和调bug, 写完还剩二十分钟左右, 急匆匆的看了 最后一题, 好家伙你让我不会多好,还让我会了,看题意肯定是先从大的往下切, 然后碰见相邻的合并一下,priority搞一下没有问题,</p><p>      还剩5分钟的时候心态已经炸裂,合并的细节不知道咋写了(太急了), 后来没调出来, 后期卡别的大佬也是这样贪心的,  悲伤那么大, 前面的题也没优化…这波裂开。</p><h3 id="总结">总结</h3><p>        其实这场比赛明显的看出来自己有很大的问题，复习的方面太过于狭窄， 还有自己不会的地方，由思想快速转化成代码的能力还有待提升，看来后面要加练了， 还有自己的解题的顺序, 卡主的一定一定一定要跳过, 这样只会拣了芝麻丢了西瓜(虽然我芝麻也没捡到T_T)！！！。过去的我也管不了了，只能期盼之后少犯些低级的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 生活琐碎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces#779(Div2)</title>
      <link href="/posts/17674.html"/>
      <url>/posts/17674.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1658">比赛链接</a></p><p>A-B就略了</p><p>思路+补题</p><h2 id="C-Shinju-and-the-Lost-Permutation">C <a href="https://codeforces.com/contest/1658/problem/C">Shinju and the Lost Permutation</a></h2><h3 id="题目描述">题目描述</h3><p>Shinju loves permutations very much! Today, she has borrowed a permutation $p$ from Juju to play with.The $i$-th cyclic shift of a permutation $p$ is a transformation on the permutation such that  $p=[p_1, p_2, \ldots, p_n]$ will now become $p=[p_{n-i+1}, \ldots, p_n, p_1,p_2, \ldots, p_{n-i}]$.Let’s define the power of permutation $p$ as the number of distinct elements in the prefix maximums array $b$ of the permutation. The prefix maximums array $b$ is the array of length $n$ such that $b_i = \max(p_1, p_2, \ldots, p_i)$. For example, the power of $[1, 2, 5, 4, 6, 3]$ is $4$ since $b=[1,2,5,5,6,6]$ and there are $4$ distinct elements in $b$.Unfortunately, Shinju has lost the permutation $p$! The only information she remembers is an array $c$, where $c_i$ is the power of the $(i-1)$-th cyclic shift of the permutation $p$. She’s also not confident that she remembers it correctly, so she wants to know if her memory is good enough.Given the array $c$, determine if there exists a permutation $p$ that is consistent with $c$. You do not have to construct the permutation $p$.A permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3, 4]$ is also not a permutation ($n=3$ but there is $4$ in the array).</p><h3 id="题意">题意</h3><p>是原来有一个序列,每次能把最后一个放到第一个的位置,即数列右移得到的max前缀的数量max前缀就是2, 3, 1, 5 ,4得到的就是2, 3, 3, 5, 5, 其中有三个max数量[2, 3, 5], 题目给出的是是数量数组</p><h3 id="思路">思路</h3><p>我们可以看出, 从最后一个放到第一个其中max的最大的增量是一个, 而下降可能很多也肯很少, 所以突破口在这里就是,后一个减去前一个的增量大于1个的时候,一定是不成立的,其中1只能出现一次,就是最大的放在第一个的时候</p><p>###z 代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">a[i + n] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp;&amp; a[i] - a[i - <span class="number">1</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cnt += a[i] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt;  (cnt == <span class="number">2</span> ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> tt;</span><br><span class="line">cin &gt;&gt; tt;</span><br><span class="line"><span class="keyword">while</span> (tt -- ) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="388535-Easy-Version"><a href="https://codeforces.com/contest/1658/problem/D1">388535 (Easy Version)</a></h2><h3 id="题目描述-2">题目描述</h3><p>This is the easy version of the problem. The difference in the constraints between both versions is colored below in red. You can make hacks only if all versions of the problem are solved.Marin and Gojou are playing hide-and-seek with an array.Gojou initially performs the following steps:</p><ul><li>First, Gojou chooses $2$ integers $l$ and $r$ such that $l \leq r$.</li><li>Then, Gojou makes an array $a$ of length $r-l+1$ which is a permutation of the array $[l,l+1,\ldots,r]$.</li><li>Finally, Gojou chooses a secret integer $x$ and sets $a_i$ to $a_i \oplus x$ for all $i$ (where $\oplus$ denotes the bitwise XOR operation).</li></ul><p>Marin is then given the values of $l,r$ and the final array $a$. She needs to find the secret integer $x$ to win. Can you help her?Note that there may be multiple possible $x$ that Gojou could have chosen. Marin can find any possible $x$ that could have resulted in the final value of $a$.</p><h3 id="题意-2">题意</h3><p>给你一个区间 $l$ - $r$ , 然后让你输入$r$ - $l$ + $1$ 个数, 让你求一个x能异或这些数,然后所有数都在 $l$ - $r$ 的范围内. (easy版本l固定是0)</p><h3 id="思路-2">思路</h3><p>给出前几个数前缀</p><p>0 0 0</p><p>0 0 1</p><p>0 1 0</p><p>0 1 1</p><p>1 0 0</p><p>1 0 1</p><p>1 1 0</p><p>1 1 1</p><p><s>可以</s>看出规律观察每一列, 前这些数中每一列0的数量都是大于等与1的数量,因为他是保证有解的, 这样才能保证数更小, 如果这一列的1的数量大于0的数量异或一下1即可.</p><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class="string">&#x27;=&#x27;</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> col_0[<span class="number">64</span>], col_1[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="built_in">memset</span>(col_0, <span class="number">0</span>, <span class="keyword">sizeof</span> col_0);</span><br><span class="line"><span class="built_in">memset</span>(col_1, <span class="number">0</span>, <span class="keyword">sizeof</span> col_1);</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="type">int</span> n = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">18</span>; j ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;&gt; j &amp; <span class="number">1</span>) col_1[j] ++;</span><br><span class="line"><span class="keyword">else</span> col_0[j] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (col_1[i] &gt; col_0[i]) ans += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tt;</span><br><span class="line">cin &gt;&gt; tt;</span><br><span class="line"><span class="keyword">while</span> (tt -- ) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="388535-Hard-Version"><a href="https://codeforces.com/contest/1658/problem/D2">388535 (Hard Version)</a></h2><p>此题为上一题的加强版本其中$l$ 的范围随机,不一定是0</p><p>这里提供一种解题思路, 跑01字典树模板<a href="https://www.acwing.com/problem/content/145/">ACWing最大异或对</a>. $a[i]$ $\bigoplus$ $x$  一个数, 假设我们把所有的a[i]拆成二进制放到一棵字典树上, 如果x与异或树上异或的最大值是r且x与异或树上异或的最小值是l, 那么其他数异或x的一定都在是在这样一个区间内,又因为a[i] $\neq$ a[j] (i $\neq$ j), 两个不相等的数异或之后还是不相同的。</p><p>所以只要枚举所有的x即可， 然而0.0枚举所有的x会TLE的，还得想着优化一下， 因为答案一定有解，所以a[i] $\bigoplus$x 肯定有一个是$r$或者$l$的， 所以只要枚举a[i]  $\bigoplus$ l或者 a[i] $\bigoplus$ r即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">    <span class="type">int</span> x = a[i] ^ R; <span class="comment">// a[i] ^ L 都行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ask_mx</span>(x) == R &amp;&amp; <span class="built_in">ask_mi</span>(x) == L) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这一题memset也会tle因为范围很大，memset也挺耗时，还是会TLE</p><p>下面附一张，一边插入一边初始化（忘了看哪个博客还是啥的时候看大佬这样写的）太秀了<s>之后就是我的了</s></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tr[N * <span class="number">30</span>][<span class="number">2</span>], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tr[<span class="number">0</span>][<span class="number">0</span>] = tr[<span class="number">0</span>][<span class="number">1</span>] = idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="type">int</span> j = (n &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tr[p][j]) &#123;</span><br><span class="line">            tr[idx + <span class="number">1</span>][<span class="number">0</span>] = tr[idx + <span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            tr[p][j] = ++ idx;</span><br><span class="line">        &#125;</span><br><span class="line">        p = tr[p][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码">完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tr[N * <span class="number">30</span>][<span class="number">2</span>], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tr[<span class="number">0</span>][<span class="number">0</span>] = tr[<span class="number">0</span>][<span class="number">1</span>] = idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="type">int</span> j = (n &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tr[p][j]) &#123;</span><br><span class="line">            tr[idx + <span class="number">1</span>][<span class="number">0</span>] = tr[idx + <span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            tr[p][j] = ++ idx;</span><br><span class="line">        &#125;</span><br><span class="line">        p = tr[p][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask_mx</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> j = ((x &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tr[u][j ^ <span class="number">1</span>]) u = tr[u][j ^ <span class="number">1</span>], res |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">        <span class="keyword">else</span> u = tr[u][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask_mi</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> j = ((x &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tr[p][j]) p = tr[p][j];</span><br><span class="line">        <span class="keyword">else</span> p = tr[p][j ^ <span class="number">1</span>], res |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L, R, a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tr[<span class="number">0</span>][<span class="number">0</span>] = tr[<span class="number">0</span>][<span class="number">1</span>] = idx = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i] ^ R;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ask_mx</span>(x) == R &amp;&amp; <span class="built_in">ask_mi</span>(x) == L) &#123;</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    cin &gt;&gt; tt;</span><br><span class="line">    <span class="keyword">while</span> (tt -- ) &#123;</span><br><span class="line">        <span class="built_in">slove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面淦不动了, 就这些吧 T_T.</p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一切的开始</title>
      <link href="/posts/12799.html"/>
      <url>/posts/12799.html</url>
      
        <content type="html"><![CDATA[<p>这里记录了一些近一年所积累的代码基础的模板,和一些实用的技巧</p><h2 id="本人常用模板">本人常用模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x...) cerr <span class="string">&lt;&lt; (#x) &lt;&lt;&quot; -&gt;</span> <span class="string">&quot;, err(x)</span></span></span><br><span class="line"><span class="string"><span class="meta">#define all(x) (x).begin(), (x).end()</span></span></span><br><span class="line"><span class="string"><span class="meta">#define sz(x) ((int)(x).size())</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#define fi first</span></span></span><br><span class="line"><span class="string"><span class="meta">#define se second</span></span></span><br><span class="line"><span class="string"><span class="meta">#define endl &#x27;\n&#x27;</span></span></span><br><span class="line"><span class="string"><span class="meta">// #define int long long</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void err() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; &#x27;\n&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">template&lt;class T, class... Ts&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">void err(const T &amp;A, const Ts &amp;... other) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">cerr &lt;&lt; (A) &lt;&lt; &#x27; &#x27;;</span></span></span><br><span class="line"><span class="string"><span class="meta">err(other...);</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">using PII = pair&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="string"><span class="meta">using ll = long long;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">const int N = 2e6 + 10, INF = 0x3f3f3f3f;</span></span></span><br><span class="line"><span class="string"><span class="meta">const int mod = 998244353;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void solve() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">signed main() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">ios::sync_with_stdio(false);</span></span></span><br><span class="line"><span class="string"><span class="meta">cin.tie(nullptr);</span></span></span><br><span class="line"><span class="string"><span class="meta">int ___ = 1;</span></span></span><br><span class="line"><span class="string"><span class="meta">// cin &gt;&gt; ___;</span></span></span><br><span class="line"><span class="string"><span class="meta">for (; ___ -- ;) solve();</span></span></span><br><span class="line"><span class="string"><span class="meta">return 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="解除cin-cout同步流">解除cin, cout同步流</h2><blockquote><p><em>cin</em>， <em>cout</em>  之所以效率低，是因为先把要输出的东西存入缓冲区，再输出，导致效率降低<br>而下面的语句可以来解除iostream的输入和输出缓存, 解除之后的速度跟scanf与printf差不多</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><h2 id="快速读入与快速写出">快速读入与快速写出</h2><blockquote><p>可以有效的解决<code>卡常</code>的问题  <s>0.0 看上去很牛*的样子</s></p><p>其实只是通过读入字符而后来转成数字，而原理就是读入字符比数字快</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="keyword">inline</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    T f = <span class="number">1</span>; x = <span class="number">0</span>; <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... other&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T&amp; x, other&amp;... y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(y...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>); </span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T x, <span class="type">char</span> ch)</span> </span>&#123; </span><br><span class="line"><span class="built_in">print</span>(x), <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swig￼3"><mark class="hl-label blue">测试</mark> </h2>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学公式LaTeX以及网站语法</title>
      <link href="/posts/25766.html"/>
      <url>/posts/25766.html</url>
      
        <content type="html"><![CDATA[<p>仅限于使用<a href="">butterfly</a>主题的网站</p><h1><a href="https://markdown-it.github.io/">Markdown的用法大全</a></h1><h1>最简单常用的数学符号 (后续慢慢更新…)</h1><table><thead><tr><th>公式</th><th>效果</th></tr></thead><tbody><tr><td>\leq</td><td>$\le$</td></tr><tr><td>\geq</td><td>$\geq$</td></tr><tr><td>\neq</td><td>$\neq$</td></tr><tr><td>\times</td><td>$\times$</td></tr><tr><td>\div</td><td>$\div$</td></tr><tr><td>\pm</td><td>$\pm$</td></tr><tr><td>\sqrt{2}</td><td>$\sqrt{2}$</td></tr><tr><td>\sqrt[n]{3}</td><td>$\sqrt[n]{3}$</td></tr><tr><td>\frac{7x+5}{1+y^2}</td><td>$\frac{7x+5}{1+y^2}$</td></tr><tr><td>\sin</td><td>$\sin$</td></tr><tr><td>\log_2 10</td><td>$\log_2 10$</td></tr><tr><td>\sum</td><td>$\sum$</td></tr><tr><td>\prod</td><td>$\prod$</td></tr><tr><td>\vec{a} \cdot \vec{b}=0</td><td>$\vec{a} \cdot \vec{b}=0$</td></tr><tr><td>\lfloor x \rfloor</td><td>$\lfloor x \rfloor$</td></tr><tr><td>\lceil \frac{x}{2} \rceil</td><td>$\lceil \frac{x}{2} \rceil$</td></tr><tr><td>\lbrace a+x \rbrace</td><td>$\lbrace a+x \rbrace$</td></tr><tr><td></td><td></td></tr></tbody></table><p>带括号矩阵</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span>[</span><br><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span></span><br><span class="line">7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9 </span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125; <span class="keyword">\right</span>]<span class="keyword">\tag</span>&#123;2&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix} \right]\tag{2}<br>$$</p><h1>label (高亮所需要的文字)</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>text</td><td>文本</td></tr><tr><td>color</td><td>default/blue/pink/red/purple/orange/green</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>]]></content>
      
      
      <categories>
          
          <category> 考研模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小工具 </tag>
            
            <tag> latex </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/posts/22462.html"/>
      <url>/posts/22462.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="放一串代码模板丫丫惊">放一串代码模板丫丫惊</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 考研模块 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于树形dp</title>
      <link href="/posts/11464.html"/>
      <url>/posts/11464.html</url>
      
        <content type="html"><![CDATA[<p>树的遍历共有存储多用链表去存储， 而遍历的方式有两种 dfs 月 bfs 此文中我们只讨论dfs 树的深度优先搜索</p><h4 id="数的最长路径-子节点对父节点的传递">数的最长路径(子节点对父节点的传递)</h4><blockquote><p>寻找树的最长路径大题原理基于dp思想：用儿子节点去更新父辈的节点，（要注意的是两条路径是不能重合的）<br>我们这里需要去查找他所有子节点中的最大路径和次大路径， 原因是一个点所在的最长路径就是最长和次长拼在一起</p></blockquote><p><strong>关键步骤:用儿子节点去更新父辈的节点</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>, M = N &lt;&lt; <span class="number">1</span>; <span class="comment">//初始不确定树的拓扑结构，因此要建立双向边</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> f1[N], f2[N], res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line">f1[u] = f2[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, u); <span class="comment">// 先遍历到子节点,从子节点往上推</span></span><br><span class="line"><span class="keyword">if</span> (f1[j] + w[i] &gt;= f1[u]) f2[u] = f1[u], f1[u] = f1[j] + w[i]; <span class="comment">//最长路转移</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f1[j] + w[i] &gt; f2[u]) f2[u] = f1[j] + w[i];            <span class="comment">//次长路转移</span></span><br><span class="line">&#125;</span><br><span class="line">res = <span class="built_in">max</span>(res, f1[u] + f2[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>); <span class="comment">//我们可以任意选取一个点作为根节点，这样整棵树的拓扑结构被唯一确定下来了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数的中心-父节点给子节点的"><a href="https://www.acwing.com/problem/content/1075/">数的中心</a>(父节点给子节点的)</h4><p>也叫作<strong>换根DP</strong></p><p>一般需要两遍dfs</p><ul><li>第一次dfs遍历，统计出当前子树内的节点对当前节点的贡献</li><li>第二次dfs遍历，统计出当前节点的父节点对当前节点的贡献，然后合并统计答案</li></ul><p>题目:给定一棵树，树中包含 $n$ 个结点（编号$1 - n$）和 $n−1$ 条无向边，每条边都有一个权值。</p><p>请你在树中找到一个点，使得该点到树中其他结点的最远距离最近。</p><p>分开讨论两种 ：</p><ul><li><p>一种是向下走走的最长路径</p></li><li><p>从当前节点往上走到其父节点，再从其父节点出发且不回到该节点的最长路径</p></li></ul><p>1.向下走dfs 一遍即可，同时记录最大路径和次长路径</p><blockquote><p>处理 次大贡献（距离） 的原因是：</p><p>如果 当前节点 是其 父节点子树 的 最大路径 上的点，则 父节点子树 的 最大贡献 不能算作对该节点的贡献</p><p>因为我们的路径是 简单路径，不能走回头路</p></blockquote><p>2.然后我们再dfs一遍，求解出每个节点的父节点对他的贡献（即每个节点往上能到的最远路径</p><p>解题:</p><p>d1[u]：存下u节点向下走的最长路径的长度</p><p>d2[u]：存下u节点向下走的第二长的路径的长度</p><p>p1[u]：存下u节点向下走的最长路径是从哪一个节点下去的</p><p>p2[u]：存下u节点向下走的第二长的路径是从哪一个节点走下去的</p><p>up[u]：存下u节点向上走的最长路径的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>, M = N &lt;&lt; <span class="number">1</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> d1[N], d2[N], up[N];</span><br><span class="line"><span class="type">int</span> s1[N], s2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123; <span class="comment">//第一遍往下走dfs先把所有的节点的最长距离和次长距离算出来</span></span><br><span class="line">d1[u] = d2[u] = -INF;  <span class="comment">//这题所有边权都是正的，可以不用初始化为负无穷</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(j, u);</span><br><span class="line"><span class="keyword">if</span> (d1[j] + w[i] &gt;= d1[u]) &#123;</span><br><span class="line">d2[u] = d1[u], s2[u] = s1[u];</span><br><span class="line">d1[u] = d1[j] + w[i], s1[u] = j;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (d1[j] + w[i] &gt; d2[u]) &#123; </span><br><span class="line">d2[u] = d1[j] + w[i], s2[u] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d1[u] == -INF) d1[u] = d2[u] = <span class="number">0</span>; <span class="comment">//特判叶子结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (s1[u] == j) up[j] = w[i] + <span class="built_in">max</span>(up[u], d2[u]);   <span class="comment">//son_u  = j，则用次大更新</span></span><br><span class="line"><span class="keyword">else</span> up[j] = w[i] + <span class="built_in">max</span>(up[u], d1[u]);              <span class="comment">//son_u != j，则用最大更新</span></span><br><span class="line"><span class="built_in">dfs2</span>(j, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(d1[i], up[i]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位dp的那些套路</title>
      <link href="/posts/63629.html"/>
      <url>/posts/63629.html</url>
      
        <content type="html"><![CDATA[<h4 id="基本套路">基本套路</h4><p>数位 DP 问题一般给定一个区间 [L,R][L,R]，问区间满足的条件的数有多少个。</p><p>可以利用前缀和来求解答案：$\sum_{i=1}^{R} a n s_{i}-\sum_{i=1}^{L-1} a n s_{i}$</p><p>记忆化搜索 中要引入的参数通常有：</p><p>当前枚举到的数位 pos（搜索的深度）</p><ol><li><p>前一位数（或是前几位数）的情况 last（诸如 前一位是什么、前几位总和是多少、某个数出现了几次 等）</p></li><li><p>前几位的数字是否等于上界的前几位数字 up (0/1)（限制本次搜索的数位范围）</p></li><li><p>是否有前导零 lead (0/1)</p></li></ol><p>可以另外加的参数</p><ul><li>pre:表示上一个数是多少</li><li>sum: 搜索到当前所有数字之和</li><li>cnt: 某个数字出现的次数</li></ul><p><strong>基础模板:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> f[N][N]; <span class="comment">//f存储在没有贴合上界的情况下，从第i位开始且前一位是j的不降数方案数</span></span><br><span class="line">                 <span class="comment">//因为f是没有贴合上界的情况下，即剩下i位可以从00…00~99…99随便填，所以无论数a[]是多少都可以适用</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> last, <span class="type">int</span> lead, <span class="type">int</span> limit)</span></span>&#123;<span class="comment">//pos当前枚举的位数，last上一个数是几，limit当前位取数有没有限制, 是否有前导零看题目定</span></span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> .....;  <span class="comment">//  枚举完成了，判断边界这个数是否符合要求</span></span><br><span class="line">    <span class="keyword">if</span>(!lead &amp;&amp; !limit &amp;&amp; f[pos][last]  != <span class="number">-1</span>) <span class="keyword">return</span> f[pos][last]; <span class="comment">//记忆化搜索，前提是不贴着上界（可以枚举满这一位所有的数字）否则不算搜索完</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= up; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> 不合法条件 <span class="keyword">continue</span>;</span><br><span class="line">        res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, limit &amp;&amp; i == up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) f[pos][last] = res;  <span class="comment">//f是没有贴合上界的情况下，即!limit</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 差分一个数拆成b进制</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f); <span class="comment">//模板的必要初始化步骤</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) a[ ++ len ] = x %  b, x /= b;<span class="comment">//把x按照进制分解到数组中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len,未定参数, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是关于 limit &amp;&amp; i == up的解释</p><p><img src="https://image.chiullian.cn/picture/20221022221648.png" alt=""></p><p>下面是前导零的运用</p><p><img src="https://image.chiullian.cn/picture/20221022221713.png" alt=""></p><h4 id="例题1-数字游戏">例题1:<a href="https://www.acwing.com/problem/content/1084/">数字游戏</a></h4><p>科协里最近很流行数字游戏。</p><p>某人命名了一种不降数，这种数字必须满足从左到右各位数字呈非下降关系，如 $123$，$446$。</p><p>现在大家决定玩一个游戏，指定一个整数闭区间 [a,b][a,b]，问这个区间内有多少个不降数。</p><blockquote><p>只需要判断枚举的位数是不是非严格递增来判断是否继续搜索。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> last, <span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; ~ f[pos][last]) <span class="keyword">return</span> f[pos][last];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= up; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; last ) <span class="keyword">continue</span>;</span><br><span class="line">        res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, limit &amp;&amp; i == up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) f[pos][last] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) a[ ++ len ] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; l &gt;&gt; r)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">calc</span>(r) - <span class="built_in">calc</span>(l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题2-不要62">例题2: <a href="https://www.acwing.com/problem/content/1087/">不要62</a></h4><p>杭州人称那些傻乎乎粘嗒嗒的人为 62（音：laoer）。</p><p>杭州交通管理局经常会扩充一些的士车牌照，新近出来一个好消息，以后上牌照，不再含有不吉利的数字了，这样一来，就可以消除个别的士司机和乘客的心理障碍，更安全地服务大众。</p><p>不吉利的数字为所有含有 44 或 62 的号码。例如：62315,73418,88914 都属于不吉利号码。但是，61152 虽然含有 6 和 2，但不是 连号，所以不属于不吉利数字之列。</p><p>你的任务是，对于每次给出的一个牌照号区间 [n,m][n,m]，推断出交管局今后又要实际上给多少辆新的士车上牌照了。</p><blockquote><p>首先此题不需要 lead，其次有 62 所以要记前驱 pre</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> last, <span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(~f[pos][last] &amp;&amp; !limit) <span class="keyword">return</span> f[pos][last];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= up; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">4</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">2</span> &amp;&amp; last == <span class="number">6</span>) <span class="keyword">continue</span>;</span><br><span class="line">        res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, limit &amp;&amp; i == up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) f[pos][last] = res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) a[ ++ len] = n % <span class="number">10</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; l &gt;&gt; r, l &amp;&amp; r)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">cal</span>(r) - <span class="built_in">cal</span>(l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3：windy数">题目3：<a href="https://www.acwing.com/problem/content/1085/">windy数</a></h4><blockquote><p>找到区间 [L,R][L,R] 相邻数字之差至少为 2 的数的个数</p><p>搜索初始条件第二个参数 pre 必须填一个≤−2 的数来保证可以搜索下去，不然会出错。此题需要记录前导零，不然忽视前导零的影响会造成最高位数 −0&lt;2无法继续搜索的情况</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> last, <span class="type">int</span> lead, <span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 如果最后一个值能进最后一个说明这个值一定合法</span></span><br><span class="line">    <span class="keyword">if</span>(!lead &amp;&amp; !limit &amp;&amp; ~f[pos][last]) <span class="keyword">return</span> f[pos][last];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= up; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(last - i) &lt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(lead &amp;&amp; !i) res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, <span class="number">-2</span>, <span class="number">1</span>, limit &amp;&amp; i == up);</span><br><span class="line">        <span class="keyword">else</span> res += <span class="built_in">dp</span>(pos - <span class="number">1</span>, i, <span class="number">0</span>, limit &amp;&amp; i == up);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) f[pos][last] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) a[ ++ len] = n % <span class="number">10</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len, <span class="number">-2</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">cal</span>(r)- <span class="built_in">cal</span>(l - <span class="number">1</span>) &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题4-恨7不成妻-hard">例题4: <a href="https://www.acwing.com/problem/content/1088/">恨7不成妻</a> (hard)</h4><p>单身！</p><p>依然单身！</p><p>吉哥依然单身！</p><p>DS 级码农吉哥依然单身！</p><p>所以，他平生最恨情人节，不管是 214 还是 77，他都讨厌！</p><p>吉哥观察了 214 和 77 这两个数，发现：</p><p>$2+1+4=7$<br>$7+7=7×2$<br>$77=7×11$</p><p>最终，他发现原来这一切归根到底都是因为和 7 有关！</p><p>所以，他现在甚至讨厌一切和 7 有关的数！</p><p>什么样的数和 7 有关呢？</p><p>如果一个整数符合下面三个条件之一，那么我们就说这个整数和 7 有关：</p><ol><li>整数中某一位是 7；</li><li>整数的每一位加起来的和是 7 的整数倍；</li><li>这个整数是 7 的整数倍。</li></ol><p>现在问题来了：吉哥想知道在一定区间内和 7 无关的整数的平方和。</p><p>对于每组数据，请计算 [L,R][L,R] 中和 7 无关的数字的平方和，并将结果对 $10^9+7$ 取模后输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rall(x) (x).rbegin(), (x).rend()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Mint</span> &#123; <span class="comment">// 取模数板子</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">Mint</span>(<span class="type">long</span> <span class="type">long</span> v = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">            v = v % mod + mod;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= mod)</span><br><span class="line">            v %= mod;</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(p &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= mod) &#123;</span><br><span class="line">            p %= (mod - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Mint a = *<span class="keyword">this</span>, result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &amp; <span class="number">1</span>) result *= a;</span><br><span class="line">            a *= a, p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Mint <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(x != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(mod - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> += (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x += other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= mod) x -= mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> -= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x -= other.x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> *= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        x = (<span class="type">long</span> <span class="type">long</span>)(x) * other.x % mod;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> /= (<span class="type">const</span> Mint &amp;other) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> *= other.<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> Mint &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x != other.x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint <span class="keyword">operator</span> - () <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == <span class="number">0</span> ? <span class="number">0</span> : mod - x;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span> ++ () &#123;</span><br><span class="line">        x = x == mod - <span class="number">1</span> ? <span class="number">0</span> : x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Mint &amp;<span class="keyword">operator</span>--() &#123;</span><br><span class="line">        x = x == <span class="number">0</span> ? mod - <span class="number">1</span> : x - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>+(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>-(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) -= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>*(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Mint <span class="keyword">operator</span>/(<span class="type">const</span> Mint &amp;a, <span class="type">const</span> Mint &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Mint</span>(a) /= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Mint cnt, w_sum, sum;</span><br><span class="line">    <span class="comment">// 不含7的数量， 以及无关7的数的和，无关7的数的和的平方</span></span><br><span class="line">&#125; f[N][N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">Mint base[N];</span><br><span class="line"><span class="comment">// wei代表所有数位上的和， sum代表选的数的和</span></span><br><span class="line"><span class="function">Node <span class="title">dp</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> wei, <span class="type">int</span> sum, <span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> &#123;sum &amp;&amp; wei, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// 既然算到最后一位的了，</span></span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; f[pos][wei][sum].cnt.<span class="built_in">val</span>() != <span class="number">-1</span>) <span class="keyword">return</span> f[pos][wei][sum];</span><br><span class="line">    <span class="type">int</span> up = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    Node res = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= up; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 第pos - 1位置选值为i的数进数位</span></span><br><span class="line">        Node t = <span class="built_in">dp</span>(pos - <span class="number">1</span>, (wei + i) % <span class="number">7</span>, (sum * <span class="number">10</span> + i) % <span class="number">7</span>, limit &amp;&amp; i == up);</span><br><span class="line"></span><br><span class="line">        Mint B = i * base[pos - <span class="number">1</span>]; <span class="comment">// 一共算到pos - 1数的数位， 这一层选i，</span></span><br><span class="line">        <span class="comment">// 例如一个数为21111， 则这一层的基数就是 20000</span></span><br><span class="line"></span><br><span class="line">        res.cnt += t.cnt; <span class="comment">// 算出不含7的个数</span></span><br><span class="line">        res.w_sum += t.cnt * B + t.w_sum; <span class="comment">//求无7的数位和</span></span><br><span class="line">        <span class="comment">//2123， 2122， 2111</span></span><br><span class="line">        <span class="comment">// 因为dfs递归是从里往外算的，所以此时的t.w_sum就是123 + 122 + 111</span></span><br><span class="line">        <span class="comment">//cnt个数 * 基数 + t.w_sum 就是现在这一位的w_sum</span></span><br><span class="line"></span><br><span class="line">        res.sum += t.cnt * B * B + t.sum + <span class="number">2</span> * B * t.w_sum; </span><br><span class="line">        <span class="comment">//2123 ^ 2， 2122 ^ 2， 2111 ^ 2</span></span><br><span class="line">        <span class="comment">// (2000 + 123)^2 + (2000 + 122)^2 + (2000 + 111)^2</span></span><br><span class="line">        <span class="comment">// 同理可以算出</span></span><br><span class="line">        <span class="comment">// =cnt*(基数)^2 + (123^2+122^2+111^2) + 2*2000*(123 + 122 + 111)</span></span><br><span class="line">        <span class="comment">// =        |      t.sum(递归的出上一个) + 2 * (基数) * t.w_sum </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) f[pos][wei][sum] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mint <span class="title">cal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) a[ ++ len] = n % <span class="number">10</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(len, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>).sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    cout &lt;&lt; (<span class="built_in">cal</span>(r) - <span class="built_in">cal</span>(l - <span class="number">1</span>)).<span class="built_in">val</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    base[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i ++) base[i] = base[i - <span class="number">1</span>] * <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> ______ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; ______;</span><br><span class="line">    <span class="keyword">while</span> (______ --) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 数位dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记合集(一)</title>
      <link href="/posts/64634.html"/>
      <url>/posts/64634.html</url>
      
        <content type="html"><![CDATA[<h4 id="并查集">并查集</h4><blockquote><p>顾名思义<br>并：合并集合<br>查：查询集合</p></blockquote><p><strong>基本原理：用每棵树来表示每一个集合。每个树的最上面那个节点（简称祖宗节点 ）的编号就是整个集合的编号，然后每个节点都要存储它父亲的节点 ，令p[x] 来存储当前节点的父亲节点，即p[x]为x的父亲节点</strong></p><p>下面解决几个问题？:<br><strong>1.如何判断树根节点即（祖宗节点）<br>当且仅当 p[x]=x,时该节点为祖宗节点。</strong></p><p>2.如何求x的集合编号：while（p[x]!=x）x=p[x].  //未经优化的思路(压缩路径) 优化后见详细代码。</p><p><strong>3.如何合并两个集合（即合并两个数）， p[x]是x的集合编号， p[y]是y的集合编号。 合并后为p[x]=y;</strong><br>如图所示（手绘）<br>就是让B的祖宗节点成为A祖宗节点的儿子节点</p><p><img src="https://image.chiullian.cn/picture/20221023113632.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="comment">//(find()函数用于查找祖宗节点)</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(p[x] != x)    p[x]=<span class="built_in">find</span>(p[x]); <span class="comment">//寻找根节点 然后回溯  路径压缩</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    经上述可以发现,每个集合中只有祖宗节点的p[x]值等于他自己,即:</span></span><br><span class="line"><span class="comment">    p[x]=x;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="comment">//找到了便返回祖宗节点的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kmp算法">kmp算法</h4><p>1、s[ ]是模式串，即比较长的字符串。</p><p>2、p[ ]是模板串，即比较短的字符串。（这样可能不严谨。。。）</p><p>3、“非平凡前缀”：指除了最后一个字符以外，一个字符串的全部头部组合。</p><p>4、“非平凡后缀”：指除了第一个字符以外，一个字符串的全部尾部组合。（后面会有例子，均简称为前/后缀）</p><p>5、“部分匹配值”：前缀和后缀的最长共有元素的长度。</p><p>6、next[ ]是“部分匹配值表”，即next数组，它存储的是每一个下标对应的“部分匹配值”，是KMP算法的核心。</p><p><a href="https://www.bilibili.com/video/BV1jb411V78H/?from=search&amp;seid=1965360417922076996">KMP推荐视频</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line"><span class="comment">// 求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line"><span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line"><span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">j = ne[j];</span><br><span class="line"><span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二分">二分</h4><p>算法是一种广泛用于查找的算法，本质是根据题目条件先确定check()函数进行边界放缩的判断</p><p>还用于二分求答案:</p><p>**最小值最大（最大值最小）**问题，这类双最值问题常常选用二分法求解，也就是确定答案后，然后用其他逻辑检验这个答案是否合理，将最优化问题转换为判定性问题。</p><p>使用条件: 一定程度上满足单调性</p><p>模板:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 浮点数二分</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span>  </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;  </span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="离散化">离散化</h4><blockquote><p>离散化的本质，是映射，将间隔很大的点，映射到相邻的数组元素中。减少对空间的需求，也减少计算量。</p></blockquote><p>模板:</p><ol><li>数组写法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N], alls[N], len; <span class="comment">// alls存的都是要离散的数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getid</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span> </span>&#123;  <span class="comment">// 离散化,获取离散化后的下标</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls + <span class="number">1</span>, alls + len + <span class="number">1</span>, val) - alls;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a[i] 为初始数组,下标范围为 [1, n]</span></span><br><span class="line"><span class="comment">// len 为离散化后数组的有效长度 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">  <span class="built_in">memcpy</span>(alls, a, <span class="keyword">sizeof</span> alls);</span><br><span class="line">  <span class="built_in">sort</span>(alls + <span class="number">1</span>, alls + n + <span class="number">1</span>);</span><br><span class="line">  len = <span class="built_in">unique</span>(alls + <span class="number">1</span>, alls + n + <span class="number">1</span>) - alls - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.vector写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N], n; <span class="comment">// alls存的都是要离散的数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_id</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(<span class="built_in">all</span>(alls), val) - alls.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">alls.<span class="built_in">emplace_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(alls));</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(<span class="built_in">all</span>(alls)), alls.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Trie树">Trie树</h4><p>Trie树别名字典树:高效存储和查找字符串集合的数据结构</p><p>基本单元是一个个结点连接构成的, 然后变为“链”式结构</p><p>一个节点包含两个基本的含义:<strong>本身的值和指向下一个结点的指针</strong></p><p><strong>插入操作:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>; <span class="comment">//从根结点开始遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx; <span class="comment">//没有该子结点就创建一个</span></span><br><span class="line">p = son[p][u]; <span class="comment">//走到p的子结点</span></span><br><span class="line">        <span class="comment">// 抽象成一个树往下走,没路了就新建一个子节点</span></span><br><span class="line">&#125;</span><br><span class="line">cnt[p] ++; <span class="comment">// cnt相当于链表中的e[idx]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询操作:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++) &#123;</span><br><span class="line"><span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//该节点不存在，即该字符串不存在</span></span><br><span class="line">p = son[p][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt[p];  <span class="comment">//返回字符串出现的次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>son[N][26]相当于链表中的ne[N]。</p><h4 id="树状数组">树状数组</h4><p><strong>前置知识<br>lowbit()运算：非负整数$x$在二进制表示下最低位1及其后面的0构成的数值。</strong></p><p>树状数组的本质思想是使用树结构维护”前缀和”，从而把时间复杂度降为$O(logn)$。</p><p><img src="https://image.chiullian.cn/picture/20221023135159.png" alt=""></p><ol><li>每个结点t[x]保存以x为根的子树中叶结点值的和</li><li>每个结点覆盖的长度为lowbit(x)</li><li>t[x]结点的父结点为t[x + lowbit(x)]</li><li>树的深度为log2n+1</li></ol><blockquote><p>add(x, k)表示将序列中第x个数加上k。</p></blockquote><p>以$add(3, 5)$为例：</p><p><img src="https://image.chiullian.cn/picture/20221023135325.png" alt=""></p><p>在整棵树上维护这个值，需要一层一层向上找到父结点，并将这些结点上的t[x]值都加上k，这样保证计算区间和时的结果正确。时间复杂度为$O(logn)$。</p><blockquote><p>query(x)表示将查询序列前x个数的和</p></blockquote><p>以query(7)为例：</p><p><img src="https://image.chiullian.cn/picture/20221023135426.png" alt=""></p><p>查询这个点的前缀和，需要从这个点向左上找到上一个结点，将加上其结点的值。向左上找到上一个结点，只需要将下标 $x -= lowbit(x)，例如 7 - lowbit(7) = 6$。</p><p><a href="https://www.bilibili.com/video/BV1pE41197Qj/">树状数组解释原文</a></p><p>模板:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> tr[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x &lt;= n; x += (x &amp; -x)) tr[x] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> res = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; x; x -= (x &amp; -x)) res += tr[x];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/">acwing</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c++ </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
